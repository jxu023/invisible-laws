default_params{
smalloc
}
game_fetch_preset{
default_params
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
}
encode_params{
sprintf
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
perm_parity{
}
new_game_desc{
smalloc
smalloc
random_upto
random_upto
__assert_fail
__assert_fail
__assert_fail
__assert_fail
perm_parity
perm_parity
__assert_fail
sprintf
srealloc
strcpy
sfree
sfree
}
validate_desc{
smalloc
atoi
sfree
}
new_game{
smalloc
smalloc
__assert_fail
atoi
__assert_fail
__assert_fail
}
dup_game{
smalloc
smalloc
memcpy
}
free_game{
sfree
sfree
}
solve_game{
dupstr
}
game_can_format_as_text_now{
}
game_text_format{
sprintf
smalloc
sprintf
sprintf
memcpy
__assert_fail
}
new_ui{
}
free_ui{
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
flip_cursor{
}
next_move_3x2{
}
next_move{
__assert_fail
__assert_fail
__assert_fail
__assert_fail
next_move_3x2
next_move_3x2
next_move
abs
abs
}
compute_hint{
__assert_fail
__assert_fail
next_move
next_move
__assert_fail
}
interpret_move{
getenv
flip_cursor
flip_cursor
move_cursor
compute_hint
sprintf
dupstr
}
execute_move{
strcmp
dup_game
sscanf
dup_game
__assert_fail
__assert_fail
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
game_mkhighlight
}
game_new_drawstate{
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
}
draw_tile{
draw_rect
draw_polygon
draw_polygon
draw_rect
sprintf
draw_text
draw_update
}
game_redraw{
draw_rect
draw_update
draw_polygon
draw_polygon
__assert_fail
draw_tile
sprintf
sprintf
status_bar
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
}
game_print{
}
main{
strcmp
strcmp
fprintf
fprintf
strchr
fprintf
default_params
decode_params
validate_desc
free_params
fprintf
new_game
free_params
perm_parity
free_game
fputs
compute_hint
fprintf
printf
sprintf
execute_move
free_game
fprintf
free_game
free_game
fprintf
}
printv{
__builtin_va_start
vprintf
__builtin_va_end
}
default_params{
smalloc
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
}
encode_params{
sprintf
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
board_to_string{
smalloc
__assert_fail
memcpy
memcpy
}
game_can_format_as_text_now{
}
game_text_format{
board_to_string
}
print_board{
board_to_string
printv
free
}
mark_region{
mark_region
}
region_size{
mark_region
}
merge_ones{
region_size
mark_region
}
make_board{
__assert_fail
__assert_fail
__assert_fail
smalloc
dsf_init
shuffle
dsf_canonify
dsf_size
dsf_canonify
dsf_size
dsf_merge
dsf_size
merge_ones
sfree
}
merge{
__assert_fail
__assert_fail
dsf_canonify
dsf_canonify
dsf_merge
}
memdup{
smalloc
__assert_fail
memcpy
}
expand{
__assert_fail
__assert_fail
__assert_fail
printv
merge
}
clear_count{
}
flood_count{
flood_count
}
check_capacity{
flood_count
clear_count
}
expandsize{
dsf_canonify
printv
dsf_size
dsf_size
__assert_fail
}
filled_square{
merge
}
init_solver_state{
__assert_fail
filled_square
}
learn_expand_or_one{
__assert_fail
expandsize
dsf_size
__assert_fail
check_capacity
__assert_fail
printv
expand
printv
__assert_fail
__assert_fail
}
learn_blocked_expansion{
__assert_fail
dsf_canonify
dsf_size
printv
printv
expandsize
printv
__assert_fail
__assert_fail
printv
expand
}
learn_critical_square{
__assert_fail
dsf_canonify
dsf_size
__assert_fail
abs
abs
check_capacity
__assert_fail
printv
filled_square
}
learn_bitmap_deductions{
dsf_init
dsf_merge
dsf_merge
dsf_size
dsf_size
__assert_fail
__assert_fail
__assert_fail
printv
filled_square
__assert_fail
}
solver{
memdup
snew_dsf
smalloc
smalloc
snew_dsf
smalloc
printv
print_board
init_solver_state
learn_blocked_expansion
learn_expand_or_one
learn_critical_square
learn_bitmap_deductions
printv
print_board
smalloc
sfree
sfree
sfree
sfree
sfree
sfree
}
make_dsf{
snew_dsf
dsf_init
dsf_merge
}
minimize_clue_set{
smalloc
shuffle
make_dsf
smalloc
dsf_canonify
__assert_fail
dsf_canonify
solver
sfree
sfree
solver
sfree
}
encode_run{
}
new_game_desc{
smalloc
smalloc
make_board
minimize_clue_set
__assert_fail
__assert_fail
encode_run
encode_run
sfree
srealloc
}
validate_desc{
sprintf
__assert_fail
}
new_game{
smalloc
smalloc
smalloc
__assert_fail
memdup
}
dup_game{
smalloc
memdup
}
free_game{
__assert_fail
sfree
sfree
sfree
sfree
}
solve_game{
solver
dupstr
}
new_ui{
smalloc
}
free_ui{
sfree
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
sfree
}
interpret_move{
__assert_fail
__assert_fail
sfree
smalloc
memset
move_cursor
smalloc
memset
smalloc
memset
sfree
sfree
sprintf
srealloc
strlen
strlen
strcat
smalloc
strlen
strcpy
sprintf
srealloc
strlen
strlen
strcat
sfree
}
execute_move{
dup_game
strchr
strtol
dup_game
strtol
make_dsf
dsf_size
sfree
free_game
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
frontend_default_colour
}
game_new_drawstate{
smalloc
smalloc
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
sfree
sfree
sfree
}
draw_square{
__assert_fail
__assert_fail
clip
draw_rect
draw_line
draw_line
draw_text
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect_outline
unclip
draw_update
}
draw_grid{
make_dsf
dsf_size
dsf_size
dsf_size
dsf_canonify
dsf_canonify
draw_square
}
game_redraw{
draw_rect
draw_rect
draw_update
draw_grid
}
game_anim_length{
}
game_flash_length{
__assert_fail
__assert_fail
__assert_fail
__assert_fail
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
game_new_drawstate
game_set_size
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
draw_rect
print_line_width
draw_grid
game_free_drawstate
}
main{
fprintf
smalloc
decode_params
new_game
solver
printf
printf
}
latin_solver_place{
__assert_fail
__assert_fail
}
latin_solver_elim{
__assert_fail
printf
__builtin_va_start
vprintf
__builtin_va_end
printf
latin_solver_place
printf
__builtin_va_start
vprintf
__builtin_va_end
printf
}
latin_solver_set{
memset
memset
__assert_fail
memset
printf
__builtin_va_start
vprintf
__builtin_va_end
printf
printf
__builtin_va_start
vprintf
__builtin_va_end
printf
printf
}
latin_solver_forcing{
memset
printf
printf
printf
}
latin_solver_new_scratch{
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
}
latin_solver_free_scratch{
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
latin_solver_alloc{
smalloc
memset
smalloc
smalloc
memset
memset
latin_solver_place
}
latin_solver_free{
sfree
sfree
sfree
}
latin_solver_diff_simple{
latin_solver_elim
latin_solver_elim
latin_solver_elim
}
latin_solver_diff_set{
latin_solver_set
latin_solver_set
latin_solver_set
}
latin_solver_recurse{
__assert_fail
smalloc
smalloc
smalloc
memcpy
printf
printf
printf
memcpy
printf
latin_solver_alloc
latin_solver_top
latin_solver_free
printf
__assert_fail
memcpy
sfree
sfree
sfree
__assert_fail
}
latin_solver_top{
latin_solver_new_scratch
__assert_fail
latin_solver_debug
latin_solver_diff_simple
latin_solver_diff_set
latin_solver_diff_set
latin_solver_forcing
latin_solver_recurse
printf
latin_solver_free_scratch
}
latin_solver_main{
smalloc
smalloc
sprintf
latin_solver_top
sfree
sfree
}
latin_solver{
latin_solver_alloc
latin_solver_main
latin_solver_free
}
latin_solver_debug{
smalloc
printf
sfree
}
latin_debug{
printf
printf
printf
}
latin_generate{
smalloc
smalloc
smalloc
smalloc
smalloc
shuffle
maxflow_scratch_size
smalloc
smalloc
smalloc
smalloc
smalloc
__assert_fail
maxflow_setup_backedges
shuffle
shuffle
maxflow_with_scratch
__assert_fail
__assert_fail
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
latin_generate_rect{
latin_generate
smalloc
sfree
}
latin_check_cmp{
}
latin_check{
newtree234
find234
smalloc
add234
__assert_fail
count234
index234
index234
sfree
freetree234
}
default_params{
smalloc
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strlen
dupstr
}
game_configure{
smalloc
sprintf
dupstr
}
custom_params{
smalloc
atoi
}
validate_params{
}
solver_clue_candidate{
}
solver_common{
__assert_fail
solver_clue_candidate
solver_clue_candidate
solver_clue_candidate
sprintf
printf
sprintf
sprintf
printf
}
solver_easy{
solver_common
}
solver_normal{
solver_common
}
solver_hard{
solver_common
}
solver{
dsf_canonify
smalloc
smalloc
smalloc
smalloc
dsf_canonify
dsf_canonify
__assert_fail
__assert_fail
smalloc
smalloc
latin_solver
sfree
sfree
sfree
sfree
sfree
sfree
}
encode_block_structure{
dsf_canonify
dsf_canonify
sprintf
}
parse_block_structure{
dsf_init
__ctype_b_loc
atoi
__ctype_b_loc
dsf_merge
}
new_game_desc{
smalloc
smalloc
smalloc
snew_dsf
smalloc
smalloc
smalloc
sfree
latin_generate
shuffle
dsf_init
random_upto
dsf_merge
dsf_size
dsf_size
dsf_size
dsf_size
dsf_merge
dsf_canonify
dsf_size
shuffle
dsf_canonify
abs
dsf_canonify
memset
solver
memset
solver
smalloc
encode_block_structure
dsf_canonify
sprintf
srealloc
memcmp
__assert_fail
smalloc
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
validate_desc{
snew_dsf
parse_block_structure
sfree
dsf_canonify
dsf_size
__ctype_b_loc
}
new_game{
smalloc
smalloc
snew_dsf
parse_block_structure
__assert_fail
smalloc
dsf_canonify
dsf_size
__assert_fail
dsf_size
__assert_fail
__assert_fail
atol
__ctype_b_loc
smalloc
smalloc
}
dup_game{
smalloc
smalloc
smalloc
memcpy
memcpy
}
free_game{
sfree
sfree
sfree
sfree
sfree
sfree
}
solve_game{
dupstr
smalloc
memset
solver
smalloc
sfree
}
game_can_format_as_text_now{
}
game_text_format{
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
check_errors{
smalloc
smalloc
dsf_canonify
abs
dsf_canonify
sfree
sfree
}
interpret_move{
move_cursor
sprintf
dupstr
dupstr
}
execute_move{
dup_game
free_game
free_game
sscanf
dup_game
check_errors
dup_game
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
frontend_default_colour
}
game_new_drawstate{
smalloc
smalloc
smalloc
text_fallback
text_fallback
text_fallback
}
game_free_drawstate{
sfree
sfree
sfree
sfree
sfree
sfree
}
draw_tile{
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
clip
draw_rect
draw_polygon
dsf_canonify
dsf_canonify
draw_rect
dsf_canonify
dsf_canonify
draw_rect
dsf_canonify
dsf_canonify
draw_rect
dsf_canonify
dsf_canonify
draw_rect
dsf_canonify
dsf_size
sprintf
draw_text
draw_text
dsf_canonify
__assert_fail
dsf_canonify
draw_text
unclip
draw_update
}
game_redraw{
draw_rect
draw_rect
draw_update
check_errors
draw_tile
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
outline_block_structure{
smalloc
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
__assert_fail
dsf_canonify
__assert_fail
__assert_fail
draw_polygon
sfree
}
game_print{
print_mono_colour
game_set_size
text_fallback
text_fallback
text_fallback
print_line_width
draw_rect_outline
print_line_width
draw_line
print_line_width
draw_line
print_line_width
outline_block_structure
dsf_canonify
dsf_size
sprintf
draw_text
draw_text
sfree
sfree
sfree
}
main{
strcmp
strcmp
fprintf
fprintf
strchr
fprintf
default_params
decode_params
validate_desc
fprintf
new_game
memset
solver
printf
printf
printf
printf
memset
solver
printf
printf
putchar
}
latin_solver_place{
__assert_fail
__assert_fail
}
latin_solver_elim{
__assert_fail
printf
__builtin_va_start
vprintf
__builtin_va_end
printf
latin_solver_place
printf
__builtin_va_start
vprintf
__builtin_va_end
printf
}
latin_solver_set{
memset
memset
__assert_fail
memset
printf
__builtin_va_start
vprintf
__builtin_va_end
printf
printf
__builtin_va_start
vprintf
__builtin_va_end
printf
printf
}
latin_solver_forcing{
memset
printf
printf
printf
}
latin_solver_new_scratch{
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
}
latin_solver_free_scratch{
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
latin_solver_alloc{
smalloc
memset
smalloc
smalloc
memset
memset
latin_solver_place
}
latin_solver_free{
sfree
sfree
sfree
}
latin_solver_diff_simple{
latin_solver_elim
latin_solver_elim
latin_solver_elim
}
latin_solver_diff_set{
latin_solver_set
latin_solver_set
latin_solver_set
}
latin_solver_recurse{
__assert_fail
smalloc
smalloc
smalloc
memcpy
printf
printf
printf
memcpy
printf
latin_solver_alloc
latin_solver_top
latin_solver_free
printf
__assert_fail
memcpy
sfree
sfree
sfree
__assert_fail
}
latin_solver_top{
latin_solver_new_scratch
__assert_fail
latin_solver_debug
latin_solver_diff_simple
latin_solver_diff_set
latin_solver_diff_set
latin_solver_forcing
latin_solver_recurse
printf
latin_solver_free_scratch
}
latin_solver_main{
smalloc
smalloc
sprintf
latin_solver_top
sfree
sfree
}
latin_solver{
latin_solver_alloc
latin_solver_main
latin_solver_free
}
latin_solver_debug{
smalloc
printf
sfree
}
latin_debug{
printf
printf
printf
}
latin_generate{
smalloc
smalloc
smalloc
smalloc
smalloc
shuffle
maxflow_scratch_size
smalloc
smalloc
smalloc
smalloc
smalloc
__assert_fail
maxflow_setup_backedges
shuffle
shuffle
maxflow_with_scratch
__assert_fail
__assert_fail
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
latin_generate_rect{
latin_generate
smalloc
sfree
}
latin_check_cmp{
}
latin_check{
newtree234
find234
smalloc
add234
__assert_fail
count234
index234
index234
sfree
freetree234
}
latin_print{
printf
printf
printf
}
gen{
latin_generate
latin_print
latin_check
fprintf
exit
sfree
}
test_soak{
time
latin_generate
sfree
time
printf
}
usage_exit{
fprintf
fprintf
exit
}
main{
time
strcmp
strcmp
usage_exit
atoi
usage_exit
random_new
usage_exit
test_soak
atoi
gen
atoi
random_upto
gen
random_free
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
default_params{
game_fetch_preset
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strlen
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
__assert_fail
}
add_dot{
__assert_fail
}
remove_dot{
__assert_fail
}
remove_assoc{
}
remove_assoc_with_opposite{
tile_opposite
remove_assoc
remove_assoc
}
add_assoc{
remove_assoc
}
add_assoc_with_opposite{
space_opposite_dot
smalloc
check_complete
sfree
sfree
sfree
remove_assoc_with_opposite
add_assoc
remove_assoc_with_opposite
add_assoc
}
sp2dot{
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
sp2dot
__assert_fail
__assert_fail
}
dbg_state{
}
foreach_sub{
}
foreach_tile{
foreach_sub
}
foreach_edge{
foreach_sub
foreach_sub
}
space_opposite_dot{
__assert_fail
}
tile_opposite{
__assert_fail
space_opposite_dot
}
dotfortile{
space_opposite_dot
}
adjacencies{
}
outline_tile_fordot{
__assert_fail
adjacencies
}
tiles_from_edge{
}
diff_game{
smalloc
__assert_fail
__assert_fail
sprintf
sprintf
sprintf
sprintf
srealloc
strcpy
dbg_state
dbg_state
}
dot_is_possible{
abs
abs
}
blank_game{
smalloc
smalloc
memset
}
game_update_dots{
sfree
smalloc
}
clear_game{
game_update_dots
}
dup_game{
blank_game
memcpy
game_update_dots
}
free_game{
sfree
sfree
sfree
}
encode_game{
smalloc
__assert_fail
srealloc
}
movedot_cb{
__assert_fail
__assert_fail
space_opposite_dot
__assert_fail
add_assoc
add_assoc
}
dot_expand_or_move{
__assert_fail
space_opposite_dot
space_opposite_dot
add_assoc
add_assoc
dbg_state
foreach_tile
space_opposite_dot
add_assoc
remove_dot
add_dot
foreach_tile
__assert_fail
dbg_state
}
generate_try_block{
sqrt
__assert_fail
__assert_fail
__assert_fail
__assert_fail
__assert_fail
__assert_fail
shuffle
dot_expand_or_move
}
generate_pass{
shuffle
generate_try_block
dot_is_possible
add_dot
solver_obvious_dot
__assert_fail
dbg_state
dbg_state
}
new_game_desc{
blank_game
smalloc
clear_game
generate_pass
game_update_dots
outline_tile_fordot
check_complete
__assert_fail
dup_game
clear_game
dbg_state
solver_state
free_game
__assert_fail
encode_game
free_game
sfree
}
dots_too_close{
dup_game
solver_obvious
free_game
}
load_game{
blank_game
add_dot
game_update_dots
dots_too_close
free_game
}
validate_desc{
load_game
free_game
__assert_fail
__assert_fail
}
new_game{
load_game
__assert_fail
}
new_solver{
smalloc
smalloc
}
free_solver{
sfree
sfree
}
solver_add_assoc{
space_opposite_dot
__assert_fail
printf
printf
printf
add_assoc
add_assoc
printf
printf
}
solver_obvious_dot{
__assert_fail
solver_add_assoc
}
solver_obvious{
solver_obvious_dot
}
solver_lines_opposite_cb{
__assert_fail
tiles_from_edge
printf
__assert_fail
tile_opposite
printf
__assert_fail
printf
}
solver_spaces_oneposs_cb{
__assert_fail
adjacencies
__assert_fail
__assert_fail
__assert_fail
__assert_fail
printf
__assert_fail
solver_add_assoc
__assert_fail
}
solver_expand_checkdot{
}
solver_expand_fromdot{
tiles_from_edge
__assert_fail
__assert_fail
adjacencies
__assert_fail
__assert_fail
space_opposite_dot
__assert_fail
solver_expand_checkdot
solver_expand_checkdot
dbg_state
}
solver_expand_postcb{
__assert_fail
printf
solver_add_assoc
}
solver_expand_dots{
solver_expand_fromdot
foreach_tile
}
solver_recurse_cb{
__assert_fail
dotfortile
}
solver_recurse{
printf
foreach_tile
__assert_fail
printf
smalloc
memcpy
memcpy
dotfortile
solver_add_assoc
solver_state
__assert_fail
smalloc
memcpy
tile_opposite
__assert_fail
remove_assoc
remove_assoc
memcpy
sfree
sfree
}
solver_state{
new_solver
solver_obvious
foreach_edge
foreach_tile
solver_expand_dots
check_complete
solver_recurse
free_solver
}
solve_game{
dup_game
solver_state
free_game
dup_game
solver_state
free_game
diff_game
free_game
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
coord_round_to_edge{
floor
floor
floor
floor
fabs
fabs
floor
floor
}
interpret_move{
dup_game
solver_obvious
diff_game
free_game
coord_round_to_edge
__assert_fail
sprintf
dupstr
sprintf
strlen
sprintf
strlen
dupstr
move_cursor
sprintf
sprintf
strlen
dupstr
__assert_fail
sprintf
dupstr
}
check_complete{
snew_dsf
dsf_init
dsf_merge
dsf_merge
smalloc
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
__assert_fail
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
sfree
sfree
}
execute_move{
dup_game
sscanf
remove_assoc
remove_assoc_with_opposite
sscanf
add_assoc
add_assoc_with_opposite
check_complete
free_game
}
game_compute_size{
}
game_set_size{
__assert_fail
__assert_fail
blitter_new
__assert_fail
blitter_new
__assert_fail
blitter_new
}
game_colours{
smalloc
game_mkhighlight
}
game_new_drawstate{
smalloc
smalloc
smalloc
smalloc
smalloc
}
game_free_drawstate{
blitter_free
sfree
blitter_free
blitter_free
sfree
sfree
sfree
sfree
}
draw_arrow{
sqrt
draw_line
draw_line
draw_line
}
draw_square{
clip
draw_rect
draw_rect
draw_rect
draw_arrow
draw_rect_outline
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_circle
unclip
draw_update
}
calculate_opposite_point{
}
game_redraw{
__assert_fail
__assert_fail
calculate_opposite_point
blitter_load
draw_update
blitter_load
draw_update
__assert_fail
blitter_load
draw_update
draw_rect
draw_rect
draw_update
check_complete
tile_opposite
draw_square
blitter_save
draw_circle
draw_rect
draw_update
calculate_opposite_point
blitter_save
blitter_save
draw_arrow
draw_arrow
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
print_mono_colour
print_hatched_colour
smalloc
smalloc
check_complete
print_line_width
draw_line
draw_line
dsf_canonify
srealloc
dsf_canonify
dsf_canonify
draw_polygon
draw_rect
draw_rect
draw_circle
sfree
sfree
sfree
}
usage_exit{
fprintf
fprintf
exit
}
dump_state{
game_text_format
printf
sfree
}
gen{
printf
new_game_desc
new_game
dump_state
solver_state
printf
dump_state
free_game
sfree
}
soak{
time
printf
printf
printf
printf
new_game_desc
new_game
solver_state
free_game
sfree
time
printf
printf
printf
}
main{
time
strcmp
strcmp
usage_exit
atoi
strcmp
usage_exit
default_params
random_new
usage_exit
decode_params
soak
random_upto
random_upto
random_upto
gen
strchr
decode_params
gen
decode_params
validate_desc
fprintf
exit
new_game
solver_state
dump_state
printf
free_game
free_params
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
default_params{
game_fetch_preset
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strlen
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
__assert_fail
}
add_dot{
__assert_fail
}
remove_dot{
__assert_fail
}
remove_assoc{
}
remove_assoc_with_opposite{
tile_opposite
remove_assoc
remove_assoc
}
add_assoc{
remove_assoc
__assert_fail
}
add_assoc_with_opposite{
space_opposite_dot
smalloc
check_complete
sfree
sfree
sfree
remove_assoc_with_opposite
add_assoc
remove_assoc_with_opposite
add_assoc
}
sp2dot{
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
sp2dot
__assert_fail
__assert_fail
}
dbg_state{
}
foreach_sub{
}
foreach_tile{
foreach_sub
}
foreach_edge{
foreach_sub
foreach_sub
}
space_opposite_dot{
__assert_fail
}
tile_opposite{
__assert_fail
space_opposite_dot
}
dotfortile{
space_opposite_dot
}
adjacencies{
}
outline_tile_fordot{
__assert_fail
adjacencies
}
tiles_from_edge{
}
diff_game{
smalloc
__assert_fail
__assert_fail
sprintf
sprintf
sprintf
sprintf
srealloc
strcpy
dbg_state
dbg_state
}
dot_is_possible{
abs
abs
}
blank_game{
smalloc
smalloc
memset
}
game_update_dots{
sfree
smalloc
}
clear_game{
game_update_dots
}
dup_game{
blank_game
memcpy
game_update_dots
}
free_game{
sfree
sfree
sfree
}
encode_game{
smalloc
__assert_fail
srealloc
}
movedot_cb{
__assert_fail
__assert_fail
space_opposite_dot
__assert_fail
add_assoc
add_assoc
}
dot_expand_or_move{
__assert_fail
space_opposite_dot
space_opposite_dot
add_assoc
add_assoc
dbg_state
foreach_tile
space_opposite_dot
add_assoc
remove_dot
add_dot
foreach_tile
__assert_fail
dbg_state
}
generate_try_block{
sqrt
__assert_fail
__assert_fail
__assert_fail
__assert_fail
__assert_fail
__assert_fail
shuffle
dot_expand_or_move
}
generate_pass{
shuffle
generate_try_block
dot_is_possible
add_dot
solver_obvious_dot
__assert_fail
dbg_state
dbg_state
}
new_game_desc{
blank_game
smalloc
clear_game
generate_pass
game_update_dots
outline_tile_fordot
check_complete
__assert_fail
dup_game
clear_game
dbg_state
solver_state
free_game
__assert_fail
smalloc
__assert_fail
shuffle
__assert_fail
__assert_fail
__assert_fail
__assert_fail
dup_game
remove_dot
remove_dot
add_dot
__assert_fail
add_assoc
dup_game
clear_game
dbg_state
solver_state
free_game
free_game
free_game
sfree
encode_game
dbg_state
free_game
sfree
}
dots_too_close{
dup_game
solver_obvious
free_game
}
load_game{
blank_game
add_dot
game_update_dots
dots_too_close
free_game
}
validate_desc{
load_game
free_game
__assert_fail
__assert_fail
}
new_game{
load_game
__assert_fail
}
new_solver{
smalloc
smalloc
}
free_solver{
sfree
sfree
}
solver_add_assoc{
space_opposite_dot
__assert_fail
printf
printf
printf
add_assoc
add_assoc
printf
printf
}
solver_obvious_dot{
__assert_fail
solver_add_assoc
}
solver_obvious{
solver_obvious_dot
}
solver_lines_opposite_cb{
__assert_fail
tiles_from_edge
printf
__assert_fail
tile_opposite
printf
__assert_fail
printf
}
solver_spaces_oneposs_cb{
__assert_fail
adjacencies
__assert_fail
__assert_fail
__assert_fail
__assert_fail
printf
__assert_fail
solver_add_assoc
__assert_fail
}
solver_expand_checkdot{
}
solver_expand_fromdot{
tiles_from_edge
__assert_fail
__assert_fail
adjacencies
__assert_fail
__assert_fail
space_opposite_dot
__assert_fail
solver_expand_checkdot
solver_expand_checkdot
dbg_state
}
solver_expand_postcb{
__assert_fail
printf
solver_add_assoc
}
solver_expand_dots{
solver_expand_fromdot
foreach_tile
}
solver_recurse_cb{
__assert_fail
dotfortile
}
solver_recurse{
printf
foreach_tile
__assert_fail
printf
smalloc
memcpy
memcpy
dotfortile
solver_add_assoc
solver_state
__assert_fail
smalloc
memcpy
tile_opposite
__assert_fail
remove_assoc
remove_assoc
memcpy
sfree
sfree
}
solver_state{
new_solver
solver_obvious
foreach_edge
foreach_tile
solver_expand_dots
check_complete
solver_recurse
free_solver
dbg_state
}
solve_game{
dup_game
solver_state
free_game
dup_game
solver_state
free_game
diff_game
free_game
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
coord_round_to_edge{
floor
floor
floor
floor
fabs
fabs
floor
floor
}
interpret_move{
dup_game
solver_obvious
diff_game
free_game
coord_round_to_edge
__assert_fail
sprintf
dupstr
sprintf
strlen
sprintf
strlen
dupstr
move_cursor
sprintf
sprintf
strlen
dupstr
__assert_fail
sprintf
dupstr
}
check_complete{
snew_dsf
dsf_init
dsf_merge
dsf_merge
smalloc
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
__assert_fail
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
sfree
sfree
}
execute_move{
dup_game
sscanf
remove_assoc
remove_assoc_with_opposite
sscanf
add_assoc
add_assoc_with_opposite
check_complete
free_game
}
game_compute_size{
}
game_set_size{
__assert_fail
__assert_fail
blitter_new
__assert_fail
blitter_new
__assert_fail
blitter_new
}
game_colours{
smalloc
game_mkhighlight
}
game_new_drawstate{
smalloc
smalloc
smalloc
smalloc
smalloc
}
game_free_drawstate{
blitter_free
sfree
blitter_free
blitter_free
sfree
sfree
sfree
sfree
}
draw_arrow{
sqrt
draw_line
draw_line
draw_line
}
draw_square{
clip
draw_rect
draw_rect
draw_rect
draw_arrow
draw_rect_outline
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_circle
unclip
draw_update
}
calculate_opposite_point{
}
game_redraw{
__assert_fail
__assert_fail
calculate_opposite_point
blitter_load
draw_update
blitter_load
draw_update
__assert_fail
blitter_load
draw_update
draw_rect
draw_rect
draw_update
check_complete
tile_opposite
draw_square
blitter_save
draw_circle
draw_rect
draw_update
calculate_opposite_point
blitter_save
blitter_save
draw_arrow
draw_arrow
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
print_mono_colour
print_hatched_colour
smalloc
smalloc
check_complete
print_line_width
draw_line
draw_line
dsf_canonify
srealloc
dsf_canonify
dsf_canonify
draw_polygon
draw_rect
draw_rect
draw_circle
sfree
sfree
sfree
}
main{
time
default_params
decode_params
fgets
strcspn
strncmp
strlen
__ctype_b_loc
__ctype_b_loc
strncmp
atoi
strncmp
atoi
printf
smalloc
__ctype_b_loc
__ctype_b_loc
strspn
strtoul
fprintf
random_new
new_game_desc
encode_params
printf
sfree
sfree
free_params
random_free
}
get_surrounds{
__assert_fail
}
default_params{
smalloc
}
game_fetch_preset{
default_params
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
atoi
}
validate_params{
}
new_state{
smalloc
smalloc
memset
smalloc
memset
}
dup_game{
smalloc
smalloc
memcpy
smalloc
memcpy
}
free_game{
sfree
sfree
sfree
}
debug_state{
printf
printf
printf
printf
}
grid_lit{
}
grid_overlap{
}
number_wrong{
__assert_fail
get_surrounds
}
number_correct{
__assert_fail
get_surrounds
}
grid_addsup{
number_correct
}
grid_correct{
grid_lit
grid_overlap
grid_addsup
}
clean_board{
}
set_blacks{
__assert_fail
__assert_fail
clean_board
random_upto
random_upto
random_upto
debug_state
}
list_lights{
}
set_light{
__assert_fail
list_lights
}
check_dark{
list_lights
}
place_lights{
smalloc
shuffle
set_light
list_lights
check_dark
check_dark
set_light
set_light
grid_overlap
sfree
grid_lit
__assert_fail
grid_overlap
debug_state
__assert_fail
sfree
}
place_numbers{
get_surrounds
}
tsl_callback{
}
try_solve_light{
list_lights
tsl_callback
tsl_callback
set_light
printf
debug_state
}
could_place_light{
}
could_place_light_xy{
could_place_light
}
try_solve_number{
get_surrounds
could_place_light
printf
debug_state
set_light
printf
debug_state
}
trl_callback_search{
printf
}
trl_callback_discount{
printf
printf
try_rule_out
printf
debug_state
}
trl_callback_incn{
}
try_rule_out{
list_lights
could_place_light_xy
could_place_light_xy
get_surrounds
get_surrounds
could_place_light_xy
}
debug_scratch{
printf
printf
}
discount_set{
debug_scratch
try_rule_out
debug_scratch
printf
try_rule_out
printf
}
discount_clear{
memset
}
unlit_cb{
could_place_light_xy
}
discount_unlit{
printf
debug_state
discount_clear
list_lights
unlit_cb
unlit_cb
discount_set
printf
}
discount_clue{
printf
debug_state
get_surrounds
memset
could_place_light
new_combi
next_combi
discount_clear
discount_set
free_combi
printf
}
flags_from_difficulty{
__assert_fail
}
solve_sub{
printf
grid_overlap
grid_correct
could_place_light
try_solve_light
try_solve_number
smalloc
discount_unlit
discount_clue
could_place_light
list_lights
__assert_fail
__assert_fail
dup_game
printf
solve_sub
free_game
printf
set_light
solve_sub
memcpy
memcpy
free_game
sfree
printf
printf
}
dosolve{
solve_sub
}
strip_unused_nums{
printf
}
unplace_lights{
set_light
}
puzzle_is_good{
flags_from_difficulty
unplace_lights
printf
debug_state
dosolve
printf
printf
}
new_game_desc{
new_state
smalloc
shuffle
set_blacks
place_lights
printf
place_numbers
puzzle_is_good
dup_game
strip_unused_nums
puzzle_is_good
printf
free_game
free_game
puzzle_is_good
printf
puzzle_is_good
printf
printf
smalloc
__assert_fail
free_game
sfree
}
validate_desc{
}
new_game{
new_state
__assert_fail
__assert_fail
__assert_fail
}
solve_game{
dup_game
dosolve
free_game
dup_game
dosolve
smalloc
sprintf
sprintf
srealloc
strcpy
free_game
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
__assert_fail
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
interpret_move{
move_cursor
sprintf
__assert_fail
dupstr
}
execute_move{
dup_game
sscanf
set_light
set_light
grid_correct
free_game
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
frontend_default_colour
}
game_new_drawstate{
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
}
tile_flags{
number_wrong
}
tile_redraw{
draw_rect
sprintf
draw_text
draw_rect
draw_rect_outline
draw_circle
getenv
draw_rect
draw_rect_outline
draw_update
}
game_redraw{
draw_rect
draw_rect_outline
draw_update
tile_flags
tile_redraw
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
print_mono_colour
game_set_size
print_line_width
draw_rect_outline
print_line_width
draw_line
draw_line
tile_flags
draw_rect
sprintf
draw_text
draw_circle
}
main{
strcmp
fprintf
fprintf
strchr
fprintf
default_params
decode_params
validate_desc
fprintf
new_game
printf
flags_from_difficulty
unplace_lights
dosolve
printf
printf
printf
printf
unplace_lights
printf
dosolve
game_text_format
printf
sfree
}
default_params{
smalloc
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strlen
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
atoi
}
validate_params{
}
cf_init{
}
cf_add{
}
cf_clookup{
__assert_fail
}
cf_slookup{
__assert_fail
}
cf_whichsym{
__assert_fail
}
extend_options{
__assert_fail
__assert_fail
__assert_fail
__assert_fail
}
genmap{
__assert_fail
smalloc
random_upto
cf_init
cf_add
extend_options
random_upto
cf_whichsym
cf_clookup
extend_options
cf_add
cf_slookup
extend_options
__assert_fail
sfree
}
gengraph{
}
graph_edge_index{
}
graph_vertex_start{
}
fourcolour_recurse{
random_upto
__assert_fail
graph_vertex_start
shuffle
fourcolour_recurse
}
fourcolour{
smalloc
fourcolour_recurse
__assert_fail
sfree
}
new_scratch{
smalloc
smalloc
smalloc
smalloc
smalloc
}
free_scratch{
sfree
sfree
sfree
sfree
sfree
}
bitcount{
__assert_fail
}
place_colour{
printf
printf
graph_vertex_start
printf
}
colourset{
sprintf
}
map_solver{
place_colour
printf
printf
__assert_fail
place_colour
__assert_fail
graph_vertex_start
graph_edge_index
printf
colourset
printf
colourset
bitcount
graph_vertex_start
bitcount
graph_edge_index
printf
colourset
printf
printf
colourset
__assert_fail
printf
printf
__assert_fail
__assert_fail
printf
new_scratch
smalloc
memcpy
smalloc
memcpy
memcpy
place_colour
map_solver
printf
memcpy
sfree
sfree
free_scratch
printf
}
new_game_desc{
smalloc
smalloc
smalloc
smalloc
smalloc
genmap
gengraph
fourcolour
sfree
sprintf
srealloc
strcpy
shuffle
free_scratch
new_scratch
memcpy
map_solver
__assert_fail
memcpy
map_solver
srealloc
srealloc
__assert_fail
free_scratch
sfree
sfree
sfree
sfree
sfree
}
parse_edge_list{
dsf_init
dsf_merge
__assert_fail
dsf_canonify
}
validate_desc{
smalloc
parse_edge_list
sfree
}
new_game{
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
parse_edge_list
__assert_fail
__assert_fail
__assert_fail
__assert_fail
gengraph
random_new
strlen
smalloc
shuffle
sfree
random_free
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
graph_edge_index
__assert_fail
__assert_fail
sqrt
smalloc
smalloc
memcpy
memcpy
smalloc
smalloc
memcpy
memcpy
graph_edge_index
__assert_fail
sfree
sfree
sfree
sfree
sfree
sfree
}
dup_game{
smalloc
smalloc
memcpy
smalloc
memcpy
}
free_game{
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
solve_game{
smalloc
memcpy
new_scratch
map_solver
free_scratch
sfree
smalloc
strcpy
__assert_fail
__assert_fail
sprintf
srealloc
strcpy
sfree
dupstr
}
game_can_format_as_text_now{
}
game_text_format{
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
region_from_logical_coords{
}
region_from_coords{
region_from_logical_coords
}
region_from_ui_cursor{
__assert_fail
region_from_logical_coords
}
interpret_move{
move_cursor
region_from_ui_cursor
region_from_ui_cursor
region_from_coords
region_from_coords
sprintf
sprintf
dupstr
}
execute_move{
dup_game
sscanf
free_game
free_game
free_game
}
game_compute_size{
}
game_set_size{
__assert_fail
blitter_new
}
game_colours{
smalloc
frontend_default_colour
memcpy
memcpy
memcpy
memcpy
}
game_new_drawstate{
smalloc
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
blitter_free
sfree
}
draw_error{
draw_polygon
draw_rect
draw_rect
}
draw_square{
clip
draw_rect
draw_polygon
__assert_fail
draw_circle
draw_rect
draw_rect
draw_rect
draw_error
sprintf
draw_text
unclip
draw_update
}
game_redraw{
blitter_load
draw_update
game_compute_size
draw_rect
draw_rect
draw_update
__assert_fail
__assert_fail
__assert_fail
draw_square
region_from_ui_cursor
blitter_save
draw_circle
draw_circle
draw_update
}
game_anim_length{
}
game_flash_length{
getenv
atoi
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
print_rgb_hatched_colour
print_line_width
__assert_fail
__assert_fail
__assert_fail
srealloc
__assert_fail
draw_polygon
sfree
}
main{
strcmp
strcmp
fprintf
fprintf
strchr
fprintf
default_params
decode_params
validate_desc
fprintf
new_game
new_scratch
map_solver
printf
printf
printf
printf
map_solver
printf
printf
}
./map.c:1506:13: warning: Null pointer argument in call to string copy function
            strcpy(ret + retlen, buf);
            ^~~~~~~~~~~~~~~~~~~~~~~~~
1 warning generated.
default_params{
smalloc
}
game_fetch_preset{
default_params
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strlen
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
clear_state{
memset
memset
memset
}
new_state{
smalloc
memset
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
clear_state
}
dup_game{
smalloc
smalloc
memcpy
smalloc
memcpy
smalloc
memcpy
}
free_game{
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
n2c{
}
c2n{
__ctype_b_loc
}
readrow{
c2n
}
new_game_int{
new_state
readrow
readrow
readrow
readrow
free_game
}
validate_desc{
new_game_int
free_game
}
new_game{
new_game_int
__assert_fail
}
generate_desc{
smalloc
n2c
n2c
n2c
n2c
__assert_fail
}
game_text_hborder{
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
n2c
game_text_hborder
n2c
n2c
game_text_hborder
n2c
}
game_debug{
game_text_format
sfree
}
mkrowcol{
__assert_fail
}
count_rowcol{
mkrowcol
}
check_rowcol{
mkrowcol
count_rowcol
}
check_completion{
check_rowcol
check_rowcol
}
solve_clearflags{
}
solve_unflag{
__assert_fail
printf
printf
printf
}
solve_unflag_surrounds{
__assert_fail
solve_unflag
}
solve_set{
printf
printf
printf
solve_unflag_surrounds
solve_unflag_surrounds
}
solve_counts{
__assert_fail
__assert_fail
}
solve_checkfull{
__assert_fail
solve_counts
solve_unflag
solve_set
}
solve_startflags{
solve_set
}
solve_rowcols{
mkrowcol
solve_counts
mkrowcol
solve_counts
}
solve_force{
solve_set
}
solve_neither{
solve_set
}
solve_advancedfull{
solve_unflag
solve_unflag
}
solve_nonneutral{
solve_unflag
}
solve_oddlength{
solve_set
}
solve_countdominoes_neutral{
__assert_fail
solve_unflag
}
solve_domino_count{
}
solve_countdominoes_nonneutral{
solve_domino_count
solve_domino_count
__assert_fail
__assert_fail
solve_set
}
solve_state{
solve_clearflags
solve_startflags
solve_force
solve_neither
solve_rowcols
solve_rowcols
solve_rowcols
solve_rowcols
solve_rowcols
solve_rowcols
check_completion
}
game_state_diff{
__assert_fail
srealloc
sprintf
srealloc
strcpy
}
solve_from_aux{
strlen
__assert_fail
}
solve_game{
dup_game
strlen
solve_from_aux
solve_state
free_game
dup_game
solve_state
free_game
game_state_diff
free_game
}
solve_unnumbered{
solve_force
solve_neither
}
lay_dominoes{
shuffle
__assert_fail
solve_set
solve_set
solve_set
solve_set
solve_unnumbered
game_debug
}
gen_game{
smalloc
printf
clear_state
sfree
domino_layout
lay_dominoes
memset
memset
sfree
}
generate_aux{
}
check_difficulty{
memset
solve_state
solve_state
smalloc
memcpy
smalloc
shuffle
mkrowcol
game_debug
memset
solve_state
__assert_fail
memcmp
sfree
sfree
}
new_game_desc{
new_state
smalloc
gen_game
generate_aux
check_difficulty
generate_desc
free_game
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
is_clue{
}
clue_index{
}
interpret_move{
move_cursor
is_clue
sprintf
dupstr
__assert_fail
sprintf
dupstr
}
execute_move{
dup_game
sscanf
sscanf
is_clue
clue_index
check_completion
free_game
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
game_mkhighlight
}
game_new_drawstate{
smalloc
smalloc
memset
smalloc
memset
smalloc
memset
}
game_free_drawstate{
sfree
sfree
sfree
sfree
}
draw_num{
sprintf
strlen
strlen
draw_rect
draw_text
draw_update
}
draw_sym{
draw_rect
draw_rect
draw_text
draw_line
draw_line
}
draw_tile_col{
__assert_fail
draw_circle
draw_circle
draw_circle
draw_circle
draw_rect
draw_sym
}
draw_tile{
draw_rect
draw_rect
draw_tile_col
draw_tile_col
draw_update
}
get_count_color{
count_rowcol
count_rowcol
clue_index
clue_index
}
game_redraw{
draw_rect
draw_sym
draw_sym
draw_update
draw_tile
get_count_color
draw_num
get_count_color
draw_num
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
print_mono_colour
game_set_size
print_line_width
draw_sym
draw_sym
draw_num
draw_num
print_line_width
draw_circle
draw_rect
draw_rect
draw_circle
draw_rect
draw_rect
draw_sym
}
usage{
fprintf
}
doprint{
game_text_format
printf
sfree
}
pnum{
printf
}
start_soak{
time
printf
printf
new_state
smalloc
gen_game
generate_aux
memset
dup_game
solve_state
solve_state
generate_desc
solve_from_aux
printf
sfree
doprint
free_game
time
printf
printf
pnum
printf
pnum
pnum
printf
printf
free_game
sfree
}
main{
time
setvbuf
strcmp
strcmp
strcmp
strcmp
strcmp
atoi
strcmp
strcmp
strcmp
strcmp
fprintf
usage
exit
random_new
fprintf
strchr
default_params
decode_params
validate_params
fprintf
fprintf
start_soak
new_game_desc
validate_desc
fprintf
new_game
printf
doprint
solve_from_aux
doprint
solve_state
printf
printf
printf
doprint
sfree
free_params
free_game
random_free
sfree
}
loopy_generate_grid{
grid_new
}
dup_game{
smalloc
smalloc
memcpy
smalloc
memcpy
smalloc
memcpy
}
free_game{
grid_free
sfree
sfree
sfree
sfree
}
new_solver_state{
smalloc
dup_game
snew_dsf
smalloc
smalloc
smalloc
memset
memset
smalloc
memset
smalloc
memset
smalloc
memset
smalloc
memset
smalloc
memset
snew_dsf
}
free_solver_state{
free_game
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
dup_solver_state{
smalloc
dup_game
smalloc
smalloc
memcpy
memcpy
smalloc
smalloc
memcpy
memcpy
smalloc
memcpy
smalloc
memcpy
smalloc
memcpy
smalloc
memcpy
smalloc
memcpy
smalloc
memcpy
}
default_params{
smalloc
}
dup_params{
smalloc
}
preset_menu_add_preset_with_title{
sprintf
smalloc
preset_menu_add_preset
dupstr
}
game_preset_menu{
preset_menu_new
preset_menu_add_preset_with_title
preset_menu_add_submenu
dupstr
preset_menu_add_preset_with_title
}
free_params{
sfree
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strlen
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
__assert_fail
}
state_to_text{
smalloc
sprintf
sprintf
sprintf
sprintf
dupstr
sfree
}
extract_grid_desc{
strchr
smalloc
memcpy
}
validate_desc{
extract_grid_desc
grid_validate_desc
loopy_generate_grid
sfree
grid_free
}
len_0_to_n{
}
encode_solve_move{
len_0_to_n
smalloc
sprintf
sprintf
sprintf
strlen
__assert_fail
}
new_ui{
}
free_ui{
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
game_compute_size{
grid_compute_size
}
game_set_size{
}
game_colours{
smalloc
frontend_default_colour
}
game_new_drawstate{
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
memset
memset
memset
}
game_free_drawstate{
sfree
sfree
sfree
sfree
sfree
sfree
}
game_timing_state{
}
game_anim_length{
}
game_can_format_as_text_now{
}
game_text_format{
__assert_fail
__assert_fail
abs
smalloc
__assert_fail
__assert_fail
}
solver_set_line{
__assert_fail
}
merge_dots{
dsf_canonify
dsf_canonify
dsf_merge
dsf_canonify
}
merge_lines{
__assert_fail
__assert_fail
edsf_canonify
edsf_canonify
edsf_merge
}
dot_order{
}
face_order{
}
dot_setall{
solver_set_line
__assert_fail
}
face_setall{
solver_set_line
__assert_fail
}
add_full_clues{
smalloc
generate_loop
memset
__assert_fail
__assert_fail
sfree
}
game_has_unique_soln{
new_solver_state
solve_game_rec
__assert_fail
free_solver_state
free_solver_state
}
remove_clues{
dup_game
smalloc
shuffle
dup_game
game_has_unique_soln
free_game
free_game
sfree
}
new_game_desc{
smalloc
grid_new_desc
loopy_generate_grid
smalloc
smalloc
smalloc
memset
memset
add_full_clues
game_has_unique_soln
remove_clues
free_game
game_has_unique_soln
state_to_text
free_game
smalloc
strlen
strlen
sprintf
sfree
sfree
validate_desc
__assert_fail
}
new_game{
smalloc
extract_grid_desc
loopy_generate_grid
sfree
smalloc
smalloc
smalloc
__assert_fail
__assert_fail
memset
memset
}
check_completion{
memset
snew_dsf
dsf_merge
smalloc
dsf_canonify
dsf_canonify
dot_order
dot_order
dsf_size
dsf_size
dsf_canonify
face_order
sfree
sfree
}
dline_index_from_dot{
}
dline_index_from_face{
}
is_atleastone{
}
set_atleastone{
}
is_atmostone{
}
set_atmostone{
}
array_setall{
memchr
}
dline_set_opp_atleastone{
dline_index_from_dot
set_atleastone
}
face_setall_identical{
edsf_canonify
edsf_canonify
solver_set_line
solver_set_line
}
find_unknowns{
}
parity_deductions{
find_unknowns
merge_lines
find_unknowns
edsf_canonify
edsf_canonify
edsf_canonify
solver_set_line
solver_set_line
solver_set_line
find_unknowns
edsf_canonify
edsf_canonify
edsf_canonify
edsf_canonify
merge_lines
merge_lines
merge_lines
merge_lines
merge_lines
merge_lines
}
trivial_deductions{
face_setall
face_setall
__assert_fail
solver_set_line
__assert_fail
dot_setall
dot_setall
dot_setall
}
dline_deductions{
__assert_fail
dline_index_from_face
is_atmostone
is_atleastone
solver_set_line
solver_set_line
dline_index_from_face
set_atmostone
set_atleastone
dline_index_from_dot
set_atmostone
set_atleastone
is_atmostone
solver_set_line
solver_set_line
is_atleastone
solver_set_line
solver_set_line
is_atmostone
solver_set_line
solver_set_line
is_atleastone
solver_set_line
solver_set_line
set_atmostone
set_atleastone
is_atleastone
dline_index_from_dot
set_atmostone
is_atmostone
solver_set_line
dline_set_opp_atleastone
}
linedsf_deductions{
face_setall_identical
face_setall_identical
parity_deductions
dline_index_from_dot
edsf_canonify
edsf_canonify
set_atmostone
set_atleastone
is_atmostone
is_atleastone
merge_lines
parity_deductions
edsf_canonify
solver_set_line
solver_set_line
}
loop_deductions{
merge_dots
dsf_canonify
__assert_fail
dsf_canonify
dsf_canonify
solver_set_line
__assert_fail
}
solve_game_rec{
dup_solver_state
array_setall
}
solve_game{
new_solver_state
solve_game_rec
encode_solve_move
encode_solve_move
encode_solve_move
free_solver_state
free_solver_state
}
interpret_move{
grid_nearest_edge
smalloc
sprintf
getenv
strcmp
strcmp
strcmp
srealloc
sprintf
srealloc
}
execute_move{
dup_game
atoi
strspn
check_completion
free_game
}
grid_to_screen{
}
face_text_pos{
grid_find_incentre
grid_to_screen
}
face_text_bbox{
face_text_pos
}
game_redraw_clue{
sprintf
face_text_pos
draw_text
}
edge_bbox{
grid_to_screen
grid_to_screen
}
dot_bbox{
grid_to_screen
}
game_redraw_line{
grid_to_screen
grid_to_screen
getenv
draw_line
draw_thick_line
}
game_redraw_dot{
grid_to_screen
draw_circle
}
boxes_intersect{
}
game_redraw_in_rect{
clip
draw_rect
face_text_bbox
boxes_intersect
game_redraw_clue
edge_bbox
boxes_intersect
game_redraw_line
dot_bbox
boxes_intersect
game_redraw_dot
unclip
draw_update
}
game_redraw{
face_order
face_order
game_redraw_in_rect
face_text_bbox
game_redraw_in_rect
edge_bbox
game_redraw_in_rect
}
game_flash_length{
}
game_status{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
smalloc
smalloc
grid_to_screen
draw_circle
sprintf
face_text_pos
draw_text
grid_to_screen
grid_to_screen
sqrt
draw_polygon
draw_circle
sfree
sfree
}
main{
strcmp
fprintf
fprintf
strchr
fprintf
default_params
decode_params
validate_desc
fprintf
new_game
new_solver_state
solve_game_rec
free_solver_state
free_solver_state
printf
printf
printf
printf
new_solver_state
solve_game_rec
printf
__assert_fail
fputs
game_text_format
printf
free_solver_state
free_solver_state
}
default_params{
smalloc
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
__assert_fail
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
atoi
strchr
}
validate_params{
}
bitcount16{
}
setcmp{
}
ss_new{
smalloc
newtree234
}
setmunge{
abs
abs
}
ss_add_todo{
}
ss_add{
__assert_fail
smalloc
add234
sfree
ss_add_todo
}
ss_remove{
del234
sfree
}
ss_overlap{
findrelpos234
index234
setmunge
srealloc
srealloc
}
ss_todo{
}
std_add{
}
known_squares{
__assert_fail
std_add
}
minesolve{
ss_new
smalloc
std_add
ss_add
ss_overlap
setmunge
ss_add
ss_remove
sfree
ss_todo
bitcount16
known_squares
ss_overlap
setmunge
setmunge
bitcount16
bitcount16
known_squares
known_squares
__assert_fail
ss_add
__assert_fail
ss_add
sfree
__assert_fail
known_squares
count234
index234
setmunge
bitcount16
setmunge
known_squares
__assert_fail
bitcount16
count234
index234
random_upto
count234
__assert_fail
std_add
ss_overlap
ss_add_todo
sfree
sfree
sfree
delpos234
sfree
freetree234
sfree
sfree
}
mineopen{
__assert_fail
}
squarecmp{
}
mineperturb{
smalloc
abs
abs
random_bits
qsort
__assert_fail
__assert_fail
smalloc
smalloc
smalloc
smalloc
__assert_fail
smalloc
__assert_fail
__assert_fail
__assert_fail
random_upto
smalloc
sfree
sfree
smalloc
__assert_fail
sfree
__assert_fail
sfree
sfree
__assert_fail
}
minegen{
smalloc
memset
smalloc
abs
abs
random_upto
sfree
smalloc
memset
mineopen
__assert_fail
minesolve
sfree
}
describe_layout{
smalloc
memset
obfuscate_bitmap
smalloc
sprintf
sfree
}
new_mine_layout{
minegen
describe_layout
}
new_game_desc{
random_upto
random_upto
new_mine_layout
sfree
random_state_encode
smalloc
strlen
sprintf
sfree
}
validate_desc{
__ctype_b_loc
__ctype_b_loc
__ctype_b_loc
atoi
__ctype_b_loc
__ctype_b_loc
atoi
__ctype_b_loc
strlen
}
open_square{
new_mine_layout
__ctype_b_loc
__ctype_b_loc
__assert_fail
midend_supersede_game_desc
sfree
random_free
__assert_fail
__assert_fail
}
new_game{
smalloc
smalloc
memset
smalloc
memset
atoi
__ctype_b_loc
random_state_decode
smalloc
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
smalloc
memset
__assert_fail
obfuscate_bitmap
memset
open_square
sfree
}
dup_game{
smalloc
smalloc
memcpy
}
free_game{
sfree
random_free
sfree
sfree
sfree
}
solve_game{
dupstr
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
sprintf
strcat
dupstr
}
decode_ui{
sscanf
}
game_changed_state{
}
interpret_move{
move_cursor
sprintf
dupstr
sprintf
dupstr
sprintf
dupstr
sprintf
dupstr
sprintf
sprintf
dupstr
}
execute_move{
strcmp
dup_game
dup_game
sscanf
sscanf
open_square
sscanf
open_square
free_game
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
frontend_default_colour
}
game_new_drawstate{
smalloc
smalloc
memset
}
game_free_drawstate{
sfree
sfree
}
draw_tile{
draw_rect
draw_line
draw_line
draw_polygon
draw_polygon
draw_rect
draw_polygon
draw_polygon
draw_text
draw_rect
draw_line
draw_line
draw_text
draw_circle
draw_rect
draw_rect
draw_rect
draw_line
draw_line
draw_update
}
game_redraw{
draw_rect
draw_update
draw_polygon
draw_polygon
abs
abs
draw_tile
sprintf
sprintf
sprintf
sprintf
sprintf
strlen
sprintf
strlen
sprintf
strlen
status_bar
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
}
game_print{
}
main{
fprintf
fprintf
strchr
fprintf
default_params
decode_params
validate_desc
fprintf
new_game
atoi
atoi
printf
describe_layout
}
default_params{
smalloc
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
__assert_fail
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
float_compare{
}
generate{
smalloc
random_upto
smalloc
sfree
smalloc
memcpy
qsort
random_upto
sfree
sfree
}
compute_rowdata{
}
do_recurse{
do_recurse
}
do_row{
memset
memset
do_recurse
printf
sprintf
printf
printf
printf
putchar
printf
putchar
putchar
}
solve_puzzle{
__assert_fail
memset
memcpy
compute_rowdata
memcpy
compute_rowdata
memcpy
compute_rowdata
do_row
memcpy
compute_rowdata
do_row
}
generate_soluble{
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
generate
solve_puzzle
sfree
sfree
sfree
sfree
sfree
}
new_game_desc{
generate_soluble
smalloc
smalloc
compute_rowdata
compute_rowdata
sprintf
smalloc
compute_rowdata
compute_rowdata
sprintf
__assert_fail
__assert_fail
sfree
sfree
}
validate_desc{
__ctype_b_loc
__ctype_b_loc
atoi
__builtin_constant_p
__ctype_tolower_loc
tolower
__ctype_tolower_loc
}
new_game{
smalloc
smalloc
smalloc
memset
smalloc
memset
smalloc
smalloc
__ctype_b_loc
__ctype_b_loc
atoi
__ctype_b_loc
__builtin_constant_p
__ctype_tolower_loc
tolower
__ctype_tolower_loc
}
dup_game{
smalloc
smalloc
memcpy
}
free_game{
sfree
sfree
sfree
sfree
sfree
sfree
}
solve_game{
dupstr
smalloc
smalloc
smalloc
smalloc
smalloc
solve_puzzle
sfree
sfree
sfree
sfree
sfree
smalloc
__assert_fail
sfree
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
sprintf
sprintf
smalloc
sprintf
memcpy
memcpy
sfree
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
interpret_move{
abs
abs
sprintf
dupstr
move_cursor
sprintf
abs
abs
dupstr
sprintf
dupstr
}
execute_move{
strlen
dup_game
sscanf
dup_game
smalloc
compute_rowdata
memcmp
compute_rowdata
memcmp
sfree
}
errcheck_found_run{
}
check_errors{
errcheck_found_run
errcheck_found_run
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
frontend_default_colour
}
game_new_drawstate{
smalloc
smalloc
memset
smalloc
memset
}
game_free_drawstate{
sfree
sfree
}
grid_square{
draw_rect
draw_rect
draw_rect_outline
draw_rect_outline
draw_update
}
draw_numbers{
draw_rect
draw_rect
__assert_fail
sprintf
draw_text
draw_update
draw_update
}
game_redraw{
draw_rect
draw_rect
draw_update
grid_square
check_errors
draw_numbers
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
game_set_size
print_line_width
draw_rect_outline
print_line_width
draw_line
print_line_width
draw_line
draw_numbers
print_line_width
draw_rect
draw_circle
}
main{
strcmp
fprintf
fprintf
strchr
fprintf
default_params
decode_params
validate_desc
fprintf
new_game
smalloc
smalloc
smalloc
smalloc
smalloc
sprintf
solve_puzzle
putchar
printf
}
default_params{
smalloc
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
__assert_fail
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
compute_rowdata{
}
do_recurse{
do_recurse
}
do_row{
memset
memset
do_recurse
}
solve_puzzle{
__assert_fail
memset
memcpy
compute_rowdata
memcpy
compute_rowdata
memcpy
compute_rowdata
do_row
memcpy
compute_rowdata
do_row
}
new_game_desc{
smalloc
memcpy
smalloc
smalloc
smalloc
memset
smalloc
shuffle
smalloc
smalloc
smalloc
smalloc
smalloc
solve_puzzle
sfree
sfree
sfree
sfree
sfree
smalloc
smalloc
compute_rowdata
compute_rowdata
sprintf
smalloc
compute_rowdata
compute_rowdata
sprintf
__assert_fail
__assert_fail
srealloc
sfree
sfree
sfree
sfree
sfree
}
validate_desc{
__ctype_b_loc
__ctype_b_loc
atoi
__builtin_constant_p
__ctype_tolower_loc
tolower
__ctype_tolower_loc
}
new_game{
smalloc
smalloc
smalloc
memset
smalloc
memset
smalloc
smalloc
__ctype_b_loc
__ctype_b_loc
atoi
__ctype_b_loc
__builtin_constant_p
__ctype_tolower_loc
tolower
__ctype_tolower_loc
}
dup_game{
smalloc
smalloc
memcpy
}
free_game{
sfree
sfree
sfree
sfree
sfree
sfree
}
solve_game{
dupstr
smalloc
smalloc
smalloc
smalloc
smalloc
solve_puzzle
sfree
sfree
sfree
sfree
sfree
smalloc
__assert_fail
sfree
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
sprintf
sprintf
smalloc
sprintf
memcpy
memcpy
sfree
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
interpret_move{
abs
abs
sprintf
dupstr
move_cursor
sprintf
abs
abs
dupstr
sprintf
dupstr
}
execute_move{
strlen
dup_game
sscanf
dup_game
smalloc
compute_rowdata
memcmp
compute_rowdata
memcmp
sfree
}
errcheck_found_run{
}
check_errors{
errcheck_found_run
errcheck_found_run
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
frontend_default_colour
}
game_new_drawstate{
smalloc
smalloc
memset
smalloc
memset
}
game_free_drawstate{
sfree
sfree
}
grid_square{
draw_rect
draw_rect
draw_rect_outline
draw_rect_outline
draw_update
}
draw_numbers{
draw_rect
draw_rect
__assert_fail
sprintf
draw_text
draw_update
draw_update
}
game_redraw{
draw_rect
draw_rect
draw_update
grid_square
check_errors
draw_numbers
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
game_set_size
print_line_width
draw_rect_outline
print_line_width
draw_line
print_line_width
draw_line
draw_numbers
print_line_width
draw_rect
draw_circle
}
main{
time
default_params
decode_params
fgets
strcspn
strncmp
strlen
__ctype_b_loc
__ctype_b_loc
strncmp
atoi
strncmp
atoi
printf
smalloc
__ctype_b_loc
__ctype_b_loc
strspn
strtoul
fprintf
random_new
new_game_desc
encode_params
printf
sfree
sfree
free_params
random_free
}
default_params{
smalloc
}
game_fetch_preset{
default_params
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strlen
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
pearl_solve{
smalloc
smalloc
smalloc
dsf_init
dsf_canonify
dsf_canonify
dsf_merge
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
__assert_fail
sfree
sfree
sfree
__assert_fail
}
pearl_loopgen_bias{
tdq_add
tdq_remove
tdq_add
tdq_remove
tdq_add
tdq_add
tdq_remove
tdq_add
tdq_add
tdq_add
tdq_add
tdq_add
tdq_remove
}
pearl_loopgen{
grid_new
smalloc
memset
smalloc
tdq_new
tdq_fill
memset
smalloc
memset
tdq_new
tdq_fill
smalloc
memset
smalloc
smalloc
tdq_new
tdq_fill
smalloc
memset
tdq_new
tdq_fill
generate_loop
sfree
tdq_free
sfree
tdq_free
sfree
sfree
sfree
tdq_free
sfree
tdq_free
__assert_fail
__assert_fail
__assert_fail
__assert_fail
__assert_fail
grid_free
sfree
}
new_clues{
pearl_loopgen
__assert_fail
__assert_fail
pearl_solve
__assert_fail
pearl_solve
__assert_fail
smalloc
shuffle
shuffle
pearl_solve
__assert_fail
sfree
}
new_game_desc{
smalloc
smalloc
new_clues
smalloc
smalloc
sfree
sfree
}
validate_desc{
}
new_game{
smalloc
smalloc
smalloc
__assert_fail
__assert_fail
smalloc
smalloc
smalloc
}
dup_game{
smalloc
smalloc
smalloc
smalloc
}
free_game{
__assert_fail
sfree
sfree
sfree
sfree
sfree
sfree
}
dsf_update_completion{
__assert_fail
__assert_fail
dsf_merge
}
check_completion{
snew_dsf
dsf_update_completion
dsf_update_completion
smalloc
dsf_canonify
dsf_canonify
dsf_size
dsf_size
dsf_canonify
sfree
sfree
}
solve_for_diff{
smalloc
sprintf
srealloc
}
solve_game{
dup_game
pearl_solve
pearl_solve
solve_for_diff
free_game
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
__assert_fail
memset
memset
}
new_ui{
smalloc
smalloc
}
free_ui{
sfree
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
get_gui_style{
getenv
}
update_ui_drag{
}
interpret_ui_drag{
}
mark_in_direction{
sprintf
dupstr
}
interpret_move{
get_gui_style
get_gui_style
get_gui_style
get_gui_style
update_ui_drag
mark_in_direction
move_cursor
move_cursor
update_ui_drag
get_gui_style
get_gui_style
interpret_ui_drag
smalloc
sprintf
srealloc
strcpy
get_gui_style
get_gui_style
get_gui_style
get_gui_style
get_gui_style
get_gui_style
abs
abs
abs
abs
abs
abs
mark_in_direction
dupstr
}
execute_move{
dup_game
sscanf
strcmp
pearl_solve
check_completion
free_game
}
game_compute_size{
get_gui_style
get_gui_style
}
game_set_size{
}
game_colours{
smalloc
game_mkhighlight
}
game_new_drawstate{
smalloc
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
sfree
}
draw_lines_specific{
get_gui_style
get_gui_style
abs
abs
draw_rect
abs
abs
draw_rect
}
draw_square{
get_gui_style
get_gui_style
__assert_fail
clip
draw_rect
get_gui_style
draw_circle
draw_line
get_gui_style
draw_line
get_gui_style
draw_line
draw_line
get_gui_style
draw_line
draw_lines_specific
draw_lines_specific
draw_lines_specific
draw_lines_specific
draw_circle
draw_circle
unclip
draw_update
}
game_redraw{
draw_rect
get_gui_style
get_gui_style
get_gui_style
draw_rect
get_gui_style
get_gui_style
draw_update
get_gui_style
get_gui_style
memset
interpret_ui_drag
draw_square
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
print_mono_colour
game_new_drawstate
game_set_size
draw_line
get_gui_style
get_gui_style
get_gui_style
get_gui_style
draw_line
get_gui_style
get_gui_style
get_gui_style
get_gui_style
get_gui_style
get_gui_style
draw_lines_specific
draw_circle
game_free_drawstate
}
usage{
fprintf
}
pnum{
printf
}
start_soak{
time
printf
printf
printf
smalloc
smalloc
new_clues
pearl_solve
time
printf
pnum
printf
printf
pnum
printf
printf
sfree
sfree
}
main{
time
setvbuf
strcmp
strcmp
atoi
fprintf
usage
exit
random_new
default_params
strchr
fprintf
decode_params
validate_params
fprintf
start_soak
start_soak
free_params
random_free
}
whichdir{
abs
abs
abs
abs
}
whichdiri{
whichdir
}
ispointing{
}
ispointingi{
ispointing
}
move_couldfit{
__assert_fail
dsf_size
}
isvalidmove{
ispointing
dsf_canonify
dsf_canonify
move_couldfit
move_couldfit
}
makelink{
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
__assert_fail
}
debug_state{
}
strip_nums{
memset
memset
memset
dsf_init
}
check_nums{
__assert_fail
__assert_fail
__assert_fail
}
default_params{
smalloc
}
game_fetch_preset{
default_params
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
blank_game_into{
memset
memset
memset
memset
memset
memset
}
blank_game{
smalloc
memset
smalloc
smalloc
smalloc
smalloc
smalloc
snew_dsf
smalloc
blank_game_into
}
dup_game_to{
memcpy
memcpy
memcpy
memcpy
memcpy
memcpy
memcpy
}
dup_game{
blank_game
dup_game_to
}
free_game{
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
unpick_desc{
blank_game
__ctype_b_loc
free_game
free_game
}
generate_desc{
srealloc
sprintf
sprintf
srealloc
strcpy
}
cell_adj{
}
new_game_fill{
smalloc
smalloc
memset
__assert_fail
cell_adj
random_upto
cell_adj
cell_adj
random_upto
cell_adj
whichdiri
sfree
sfree
}
debug_desc{
}
new_game_strip{
dup_game
strip_nums
debug_desc
solve_state
free_game
smalloc
shuffle
__assert_fail
debug_state
strip_nums
solve_state
check_nums
__assert_fail
dup_game_to
strip_nums
solve_state
check_nums
__assert_fail
__assert_fail
sfree
free_game
}
new_game_desc{
blank_game
dupstr
blank_game_into
random_upto
random_upto
new_game_fill
debug_state
__assert_fail
__assert_fail
new_game_strip
strip_nums
dup_game
solve_state
__assert_fail
free_game
generate_desc
free_game
}
validate_desc{
unpick_desc
}
head_number{
__assert_fail
dsf_size
__assert_fail
dsf_size
__assert_fail
}
connect_numbers{
dsf_init
__assert_fail
dsf_canonify
dsf_canonify
dsf_merge
}
compare_heads{
}
lowest_start{
__assert_fail
}
update_numbers{
smalloc
__assert_fail
__assert_fail
connect_numbers
head_number
qsort
lowest_start
__assert_fail
lowest_start
__assert_fail
sfree
}
check_completion{
ispointingi
makelink
}
new_game{
unpick_desc
__assert_fail
update_numbers
check_completion
}
solve_single{
memset
isvalidmove
makelink
makelink
}
solve_state{
dup_game
smalloc
debug_state
update_numbers
solve_single
dup_game_to
free_game
sfree
update_numbers
check_completion
debug_state
}
solve_game{
dup_game
solve_state
generate_desc
free_game
dup_game
solve_state
generate_desc
free_game
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
interpret_move{
move_cursor
isvalidmove
sprintf
isvalidmove
sprintf
dupstr
__assert_fail
sprintf
dupstr
isvalidmove
sprintf
isvalidmove
sprintf
dupstr
sprintf
dupstr
}
unlink_cell{
}
execute_move{
validate_desc
dup_game
new_game
free_game
sscanf
isvalidmove
dup_game
makelink
sscanf
dup_game
unlink_cell
unlink_cell
strcmp
dup_game
solve_state
update_numbers
check_completion
}
game_compute_size{
}
game_set_size{
__assert_fail
__assert_fail
blitter_new
}
game_colours{
smalloc
game_mkhighlight
}
game_new_drawstate{
smalloc
smalloc
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
sfree
blitter_free
sfree
}
draw_arrow{
sin
cos
draw_polygon
}
draw_arrow_dir{
draw_arrow
}
draw_star{
__assert_fail
smalloc
sin
cos
draw_polygon
sfree
}
num2col{
}
tile_redraw{
num2col
draw_rect
draw_star
draw_arrow_dir
draw_rect_corners
draw_circle
sprintf
sprintf
strlen
sprintf
strlen
strlen
draw_text
draw_rect_outline
draw_update
}
draw_drag_indicator{
abs
abs
atan
draw_arrow
}
game_redraw{
__assert_fail
blitter_load
draw_update
interpret_move
strcmp
execute_move
sfree
draw_rect
draw_rect_outline
draw_update
ispointing
ispointing
whichdir
getenv
tile_redraw
blitter_save
draw_drag_indicator
free_game
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
print_line_width
draw_line
draw_line
print_line_width
draw_rect_outline
print_line_width
tile_redraw
}
usage{
fprintf
}
cycle_seed{
random_upto
random_upto
sfree
dupstr
}
start_soak{
time
printf
random_new
strlen
sfree
cycle_seed
random_free
time
printf
}
process_desc{
printf
strchr
fprintf
exit
fprintf
fprintf
fprintf
printf
}
main{
setvbuf
strcmp
strcmp
strcmp
strcmp
strcmp
dupstr
strcmp
strcmp
atoi
strcmp
strcmp
fprintf
usage
exit
sprintf
time
dupstr
strchr
process_desc
strchr
sfree
dupstr
fprintf
exit
start_soak
random_new
strlen
printf
printf
sfree
cycle_seed
random_free
sfree
fgets
strcspn
process_desc
sfree
}
default_params{
smalloc
}
game_fetch_preset{
default_params
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
blank_game{
smalloc
memset
smalloc
smalloc
memset
memset
}
dup_game{
blank_game
memcpy
memcpy
}
free_game{
sfree
sfree
sfree
}
n2c{
}
c2n{
__ctype_b_loc
}
unpick_desc{
blank_game
strlen
c2n
free_game
free_game
}
generate_desc{
smalloc
n2c
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
n2c
__assert_fail
}
debug_state{
game_text_format
sfree
}
connect_if_same{
dsf_canonify
dsf_canonify
dsf_merge
}
connect_dsf{
dsf_init
connect_if_same
connect_if_same
}
check_rowcol{
}
check_complete{
smalloc
connect_dsf
dsf_size
check_rowcol
check_rowcol
dsf_size
dsf_canonify
sfree
}
game_state_diff{
__assert_fail
srealloc
__assert_fail
sprintf
srealloc
strcpy
}
solver_state_new{
smalloc
smalloc
}
solver_state_free{
sfree
sfree
sfree
}
solver_op_add{
srealloc
}
solver_op_circle{
solver_op_add
}
solver_op_blacken{
solver_op_add
}
solver_ops_do{
printf
solver_op_circle
solver_op_circle
solver_op_circle
solver_op_circle
printf
solver_op_blacken
solver_op_blacken
}
solve_singlesep{
solver_op_add
solver_op_add
}
solve_doubles{
__assert_fail
solver_op_add
solver_op_add
}
solve_allblackbutone{
__assert_fail
solver_op_add
}
solve_corner{
solver_op_add
solver_op_add
solver_op_add
solver_op_add
solver_op_add
solver_op_add
}
solve_corners{
solve_corner
solve_corner
solve_corner
solve_corner
}
solve_offsetpair_pair{
__assert_fail
__assert_fail
solver_op_add
solver_op_add
}
solve_offsetpair{
solve_offsetpair_pair
solve_offsetpair_pair
solve_offsetpair_pair
solve_offsetpair_pair
}
solve_hassinglewhiteregion{
memset
__assert_fail
}
solve_removesplits_check{
solve_hassinglewhiteregion
solver_op_add
}
solve_removesplits{
solve_hassinglewhiteregion
solve_removesplits_check
solve_removesplits_check
solve_removesplits_check
solve_removesplits_check
}
solve_sneaky{
solver_op_add
}
solve_specific{
solver_state_new
solve_sneaky
solve_singlesep
solve_doubles
solve_corners
solve_offsetpair
solver_ops_do
solve_allblackbutone
solve_removesplits
solver_state_free
check_complete
}
solve_game{
dup_game
solve_specific
free_game
dup_game
solve_specific
free_game
game_state_diff
free_game
}
new_game_is_good{
memcpy
memset
__assert_fail
solve_specific
memset
solve_specific
}
best_black_col{
shuffle
__assert_fail
}
new_game_desc{
blank_game
blank_game
solver_state_new
smalloc
smalloc
smalloc
memset
latin_generate_rect
sfree
debug_state
shuffle
solver_op_add
solver_ops_do
solve_allblackbutone
solver_ops_do
solve_removesplits
solver_ops_do
debug_state
memset
memset
best_black_col
debug_state
new_game_is_good
generate_desc
free_game
free_game
solver_state_free
sfree
sfree
sfree
}
validate_desc{
unpick_desc
}
new_game{
unpick_desc
__assert_fail
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
interpret_move{
move_cursor
sprintf
dupstr
}
execute_move{
dup_game
sscanf
check_complete
free_game
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
game_mkhighlight
}
game_new_drawstate{
smalloc
smalloc
memset
}
game_free_drawstate{
sfree
sfree
}
tile_redraw{
draw_rect
draw_rect_outline
draw_circle
draw_circle
sprintf
strlen
strlen
draw_text
draw_rect_corners
draw_update
}
game_redraw{
draw_rect
draw_rect_outline
draw_update
tile_redraw
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
print_mono_colour
game_set_size
print_line_width
draw_rect
draw_rect_outline
draw_circle
sprintf
draw_text
strlen
}
start_soak{
time
printf
memset
new_game_desc
new_game
solve_sneaky
memset
solve_specific
fprintf
free_game
sfree
time
printf
printf
printf
printf
}
main{
time
setvbuf
strcmp
strcmp
strcmp
fprintf
atoi
fprintf
random_new
fprintf
strchr
default_params
decode_params
validate_params
fprintf
fprintf
start_soak
new_game_desc
validate_desc
fprintf
free_params
new_game
game_text_format
fputs
sfree
solve_specific
game_text_format
fputs
sfree
printf
sfree
free_params
free_game
random_free
}
default_params{
smalloc
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strlen
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
new_scratch{
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
}
free_scratch{
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
merge_vertices{
dsf_canonify
dsf_canonify
dsf_merge
dsf_canonify
}
decr_exits{
dsf_canonify
}
fill_square{
__assert_fail
printf
dsf_canonify
merge_vertices
decr_exits
decr_exits
merge_vertices
decr_exits
decr_exits
}
vbitmap_clear{
printf
__builtin_va_start
vprintf
__builtin_va_end
printf
}
slant_solve{
memset
dsf_init
dsf_init
memset
memset
dsf_canonify
dsf_canonify
printf
printf
printf
fill_square
__assert_fail
printf
printf
dsf_canonify
dsf_canonify
printf
dsf_merge
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
printf
printf
fill_square
printf
fill_square
vbitmap_clear
vbitmap_clear
vbitmap_clear
vbitmap_clear
dsf_canonify
dsf_canonify
dsf_merge
printf
dsf_canonify
dsf_canonify
dsf_merge
printf
vbitmap_clear
vbitmap_clear
vbitmap_clear
vbitmap_clear
vbitmap_clear
vbitmap_clear
vbitmap_clear
vbitmap_clear
vbitmap_clear
vbitmap_clear
}
slant_generate{
memset
snew_dsf
smalloc
shuffle
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
__assert_fail
random_upto
fill_square
sfree
sfree
}
new_game_desc{
smalloc
smalloc
smalloc
smalloc
new_scratch
slant_generate
slant_solve
__assert_fail
shuffle
slant_solve
slant_solve
smalloc
__assert_fail
srealloc
smalloc
free_scratch
sfree
sfree
sfree
sfree
}
validate_desc{
}
new_game{
smalloc
smalloc
memset
smalloc
memset
smalloc
smalloc
smalloc
memset
__assert_fail
__assert_fail
}
dup_game{
smalloc
smalloc
memcpy
smalloc
memcpy
}
free_game{
sfree
sfree
__assert_fail
sfree
sfree
sfree
sfree
}
vertex_degree{
__assert_fail
}
slant_neighbour{
}
check_completion{
memset
findloop_new_state
findloop_run
findloop_is_loop_edge
findloop_free_state
vertex_degree
vertex_degree
}
solve_game{
new_scratch
smalloc
slant_solve
free_scratch
sfree
smalloc
sprintf
srealloc
strcpy
sfree
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
__assert_fail
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
interpret_move{
getenv
move_cursor
sprintf
dupstr
sprintf
dupstr
}
execute_move{
dup_game
sscanf
free_game
free_game
free_game
check_completion
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
game_mkhighlight
}
game_new_drawstate{
smalloc
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
sfree
}
draw_clue{
draw_circle
draw_text
}
draw_tile{
clip
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_clue
draw_clue
draw_clue
draw_clue
unclip
draw_update
}
game_redraw{
game_compute_size
draw_rect
draw_update
draw_tile
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
print_mono_colour
game_set_size
print_line_width
draw_rect_outline
print_line_width
draw_line
draw_line
print_line_width
clip
draw_line
unclip
print_line_width
draw_clue
}
main{
strcmp
strcmp
fprintf
fprintf
strchr
fprintf
default_params
decode_params
validate_desc
fprintf
new_game
new_scratch
slant_solve
printf
printf
printf
printf
slant_solve
printf
fputs
game_text_format
}
default_params{
smalloc
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strlen
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
new_scratch{
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
}
free_scratch{
sfree
sfree
sfree
sfree
sfree
sfree
}
tents_solve{
memset
memcpy
printf
printf
printf
printf
printf
printf
__assert_fail
printf
memset
memset
memset
printf
}
new_game_desc{
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
new_scratch
shuffle
memset
abs
abs
__assert_fail
maxflow
tents_solve
tents_solve
smalloc
sprintf
srealloc
smalloc
sprintf
srealloc
free_scratch
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
validate_desc{
__ctype_b_loc
}
new_game{
smalloc
smalloc
smalloc
smalloc
memset
__assert_fail
__assert_fail
__assert_fail
__assert_fail
atoi
__ctype_b_loc
__assert_fail
}
dup_game{
smalloc
smalloc
memcpy
}
free_game{
sfree
sfree
sfree
sfree
}
solve_game{
dupstr
new_scratch
smalloc
tents_solve
free_scratch
sfree
smalloc
sprintf
srealloc
sfree
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
sprintf
memcpy
memcpy
memset
memset
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
drag_xform{
}
interpret_move{
abs
abs
__assert_fail
__assert_fail
smalloc
drag_xform
sprintf
srealloc
strcpy
sfree
move_cursor
sprintf
__assert_fail
dupstr
move_cursor
sprintf
dupstr
}
execute_move{
dup_game
sscanf
free_game
free_game
free_game
free_game
smalloc
smalloc
smalloc
__assert_fail
__assert_fail
__assert_fail
maxflow
sfree
sfree
sfree
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
frontend_default_colour
}
game_new_drawstate{
smalloc
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
sfree
}
find_errors{
smalloc
smalloc
dsf_init
dsf_merge
dsf_merge
dsf_canonify
dsf_canonify
dsf_init
dsf_merge
dsf_merge
dsf_canonify
dsf_canonify
sfree
}
draw_err_adj{
draw_polygon
draw_rect
draw_rect
}
draw_tile{
clip
draw_rect
draw_rect
draw_circle
draw_circle
draw_circle
draw_circle
draw_circle
draw_polygon
draw_err_adj
draw_err_adj
draw_err_adj
draw_err_adj
draw_err_adj
draw_err_adj
draw_err_adj
draw_err_adj
draw_rect_outline
unclip
draw_update
}
int_redraw{
game_compute_size
draw_rect
draw_update
print_line_width
draw_line
draw_line
smalloc
memcpy
drag_xform
find_errors
sfree
find_errors
drag_xform
draw_tile
draw_rect
sprintf
draw_text
draw_update
draw_rect
sprintf
draw_text
draw_update
sfree
}
game_redraw{
int_redraw
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
game_set_size
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
int_redraw
}
main{
strcmp
strcmp
fprintf
fprintf
strchr
fprintf
default_params
decode_params
validate_desc
fprintf
new_game
new_game
new_scratch
tents_solve
printf
printf
printf
printf
tents_solve
printf
fputs
game_text_format
}
find_sum_bits{
__assert_fail
__assert_fail
find_sum_bits
}
precompute_sum_bits{
find_sum_bits
__assert_fail
find_sum_bits
__assert_fail
find_sum_bits
__assert_fail
}
default_params{
smalloc
}
free_params{
sfree
}
dup_params{
smalloc
}
game_fetch_preset{
dupstr
dup_params
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strcat
strcat
strcat
strcat
strcat
strcat
strcat
strcat
strcat
strcat
strcat
strcat
strcat
strcat
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
alloc_block_structure{
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
}
free_block_structure{
sfree
sfree
sfree
sfree
sfree
sfree
}
dup_block_structure{
alloc_block_structure
memcpy
memcpy
memcpy
memcpy
}
split_block{
__assert_fail
__assert_fail
srealloc
srealloc
sfree
smalloc
__assert_fail
}
remove_from_block{
__assert_fail
}
solver_place{
__assert_fail
}
solver_elim{
__assert_fail
printf
__builtin_va_start
vprintf
__builtin_va_end
printf
solver_place
printf
__builtin_va_start
vprintf
__builtin_va_end
printf
}
solver_intersect{
printf
__builtin_va_start
vprintf
__builtin_va_end
printf
printf
}
solver_set{
memset
memset
printf
__builtin_va_start
vprintf
__builtin_va_end
printf
__assert_fail
memset
printf
__builtin_va_start
vprintf
__builtin_va_end
printf
printf
__builtin_va_start
vprintf
__builtin_va_end
printf
printf
}
solver_forcing{
memset
printf
printf
printf
}
solver_killer_minmax{
printf
printf
}
solver_killer_sums{
__assert_fail
printf
__assert_fail
printf
printf
}
filter_whole_cages{
memmove
__assert_fail
}
solver_new_scratch{
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
}
solver_free_scratch{
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
solver{
smalloc
dup_block_structure
alloc_block_structure
smalloc
smalloc
__assert_fail
smalloc
__assert_fail
memset
memset
smalloc
smalloc
smalloc
memset
memset
memset
smalloc
memset
smalloc
smalloc
solver_new_scratch
solver_place
solver_elim
remove_from_block
solver_place
printf
memcpy
filter_whole_cages
__assert_fail
solver_place
printf
__assert_fail
split_block
__assert_fail
solver_killer_minmax
solver_killer_minmax
solver_killer_sums
solver_killer_sums
solver_elim
solver_elim
solver_elim
solver_elim
solver_elim
solver_intersect
solver_intersect
solver_intersect
solver_intersect
solver_intersect
solver_intersect
solver_intersect
solver_intersect
solver_set
solver_set
solver_set
solver_set
solver_set
solver_set
solver_forcing
__assert_fail
smalloc
smalloc
smalloc
memcpy
printf
printf
printf
memcpy
printf
solver
printf
memcpy
sfree
sfree
sfree
printf
sfree
sfree
sfree
sfree
sfree
sfree
free_block_structure
free_block_structure
sfree
sfree
sfree
solver_free_scratch
}
gridgen_place{
}
gridgen_remove{
}
gridgen_real{
smalloc
shuffle
gridgen_place
gridgen_real
gridgen_remove
sfree
}
gridgen{
memset
smalloc
smalloc
smalloc
smalloc
smalloc
memset
memset
memset
memset
smalloc
memset
shuffle
gridgen_place
smalloc
random_bits
gridgen_real
sfree
sfree
sfree
sfree
sfree
sfree
}
check_killer_cage_sum{
__assert_fail
__assert_fail
}
check_valid{
smalloc
memset
sfree
memset
sfree
memset
sfree
memset
sfree
check_killer_cage_sum
sfree
memset
sfree
sfree
sfree
}
symmetries{
}
encode_solve_move{
smalloc
sprintf
__assert_fail
}
dsf_to_blocks{
dsf_canonify
__assert_fail
}
make_blocks_from_whichblock{
__assert_fail
}
encode_block_structure_desc{
}
encode_grid{
sprintf
}
grid_encode_space{
}
blocks_encode_space{
grid_encode_space
}
encode_puzzle_desc{
grid_encode_space
blocks_encode_space
blocks_encode_space
grid_encode_space
smalloc
encode_grid
encode_block_structure_desc
encode_block_structure_desc
encode_grid
__assert_fail
srealloc
}
merge_blocks{
memcpy
memcpy
}
merge_some_cages{
smalloc
random_upto
merge_blocks
sfree
sfree
}
compute_kclues{
memset
__assert_fail
}
gen_killer_cages{
alloc_block_structure
random_bits
random_bits
make_blocks_from_whichblock
__assert_fail
random_bits
merge_blocks
__assert_fail
}
new_game_desc{
precompute_sum_bits
smalloc
smalloc
smalloc
alloc_block_structure
smalloc
__assert_fail
divvy_rectangle
dsf_to_blocks
sfree
make_blocks_from_whichblock
free_block_structure
gen_killer_cages
gridgen
check_valid
__assert_fail
sfree
encode_solve_move
memcpy
compute_kclues
memset
solver
free_block_structure
dup_block_structure
merge_some_cages
free_block_structure
dup_block_structure
merge_some_cages
free_block_structure
free_block_structure
dup_block_structure
merge_some_cages
free_block_structure
free_block_structure
compute_kclues
memset
symmetries
shuffle
memcpy
symmetries
solver
memcpy
solver
sfree
sfree
encode_puzzle_desc
sfree
free_block_structure
free_block_structure
sfree
}
spec_to_grid{
__assert_fail
__assert_fail
atoi
__assert_fail
__assert_fail
}
spec_to_dsf{
snew_dsf
sfree
sfree
dsf_merge
sfree
}
validate_grid_desc{
atoi
}
validate_block_desc{
spec_to_dsf
__assert_fail
__assert_fail
smalloc
smalloc
dsf_canonify
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
validate_desc{
validate_grid_desc
validate_block_desc
validate_block_desc
validate_grid_desc
}
new_game{
smalloc
precompute_sum_bits
smalloc
smalloc
memset
smalloc
memset
alloc_block_structure
alloc_block_structure
smalloc
spec_to_grid
__assert_fail
spec_to_dsf
__assert_fail
dsf_to_blocks
sfree
make_blocks_from_whichblock
__assert_fail
spec_to_dsf
__assert_fail
dsf_to_blocks
sfree
make_blocks_from_whichblock
__assert_fail
spec_to_grid
__assert_fail
sprintf
sprintf
__assert_fail
__assert_fail
}
dup_game{
smalloc
smalloc
memcpy
smalloc
memcpy
smalloc
memcpy
smalloc
memcpy
}
free_game{
free_block_structure
free_block_structure
sfree
sfree
sfree
sfree
sfree
}
solve_game{
dupstr
smalloc
memcpy
solver
sfree
encode_solve_move
sfree
}
grid_text_format{
smalloc
__assert_fail
}
game_can_format_as_text_now{
}
game_text_format{
__assert_fail
grid_text_format
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
interpret_move{
move_cursor
sprintf
dupstr
dupstr
}
execute_move{
dup_game
atoi
free_game
__ctype_b_loc
sscanf
dup_game
memset
check_valid
dup_game
memset
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
frontend_default_colour
}
game_new_drawstate{
smalloc
smalloc
memset
smalloc
memset
smalloc
memset
smalloc
}
game_free_drawstate{
sfree
sfree
sfree
sfree
sfree
}
draw_number{
memcmp
clip
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_polygon
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
sprintf
draw_text
draw_text
__assert_fail
draw_text
unclip
draw_update
memcpy
}
game_redraw{
draw_rect
draw_rect
check_killer_cage_sum
draw_number
draw_update
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
outline_block_structure{
smalloc
__assert_fail
__assert_fail
__assert_fail
__assert_fail
draw_polygon
sfree
}
game_print{
print_mono_colour
game_set_size
print_line_width
draw_rect_outline
print_grey_colour
draw_rect
draw_rect
print_line_width
draw_line
print_line_width
draw_line
print_line_width
outline_block_structure
print_line_width
print_line_dotted
outline_block_structure
print_line_dotted
sprintf
draw_text
draw_text
}
main{
strcmp
strcmp
fprintf
fprintf
strchr
fprintf
default_params
decode_params
validate_desc
fprintf
new_game
solver
printf
printf
printf
grid_text_format
}
./solo.c:5128:5: warning: Null pointer argument in call to memory copy function
    memcpy(ds->pencil+(y*cr+x)*cr, state->pencil+(y*cr+x)*cr, cr);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1 warning generated.
default_params{
smalloc
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strlen
dupstr
}
game_configure{
smalloc
sprintf
dupstr
}
custom_params{
smalloc
atoi
}
validate_params{
}
solver_easy{
printf
printf
latin_solver_place
sprintf
printf
sprintf
printf
}
solver_hard{
sprintf
printf
}
solver{
smalloc
smalloc
latin_solver
sfree
sfree
}
new_game_desc{
smalloc
smalloc
smalloc
smalloc
sfree
latin_generate
memcpy
memset
solver
shuffle
memcpy
solver
shuffle
memcpy
solver
memcpy
solver
smalloc
sprintf
sprintf
srealloc
smalloc
sfree
sfree
sfree
sfree
sfree
}
validate_desc{
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
new_game{
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
memset
memset
__assert_fail
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__assert_fail
__assert_fail
__ctype_b_loc
__assert_fail
__assert_fail
__assert_fail
}
dup_game{
smalloc
smalloc
smalloc
smalloc
memcpy
memcpy
memcpy
}
free_game{
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
solve_game{
dupstr
smalloc
memcpy
solver
smalloc
sfree
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
__assert_fail
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
check_errors{
__assert_fail
}
clue_index{
}
is_clue{
clue_index
}
interpret_move{
is_clue
sprintf
dupstr
is_clue
sprintf
dupstr
move_cursor
sprintf
dupstr
dupstr
}
execute_move{
dup_game
sscanf
check_errors
sscanf
is_clue
clue_index
free_game
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
frontend_default_colour
}
game_new_drawstate{
smalloc
getenv
smalloc
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
sfree
sfree
}
draw_tile{
draw_polygon
draw_polygon
draw_rect
draw_polygon
draw_polygon
draw_text
__assert_fail
draw_text
}
game_redraw{
draw_rect
draw_update
check_errors
clip
draw_tile
draw_tile
draw_tile
draw_tile
unclip
draw_update
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
game_set_size
print_line_width
draw_rect_outline
print_line_width
draw_line
print_line_width
draw_line
sprintf
draw_text
draw_text
}
main{
strcmp
strcmp
fprintf
fprintf
strchr
fprintf
default_params
decode_params
validate_desc
fprintf
new_game
memcpy
solver
printf
printf
printf
printf
memcpy
solver
printf
fputs
game_text_format
}
drawing_new{
smalloc
}
drawing_free{
sfree
sfree
sfree
}
draw_text{
}
draw_rect{
}
draw_line{
}
draw_thick_line{
sqrt
}
draw_polygon{
}
draw_circle{
}
draw_update{
}
clip{
}
unclip{
}
start_draw{
}
end_draw{
}
text_fallback{
dupstr
__assert_fail
}
status_bar{
__assert_fail
midend_rewrite_statusbar
strcmp
sfree
sfree
}
blitter_new{
}
blitter_free{
}
blitter_save{
}
blitter_load{
}
print_begin_doc{
}
print_begin_page{
}
print_begin_puzzle{
}
print_end_puzzle{
}
print_end_page{
}
print_end_doc{
}
print_get_colour{
__assert_fail
}
print_generic_colour{
srealloc
}
print_mono_colour{
print_generic_colour
}
print_grey_colour{
print_generic_colour
}
print_hatched_colour{
print_generic_colour
}
print_rgb_mono_colour{
print_generic_colour
}
print_rgb_grey_colour{
print_generic_colour
}
print_rgb_hatched_colour{
print_generic_colour
}
print_line_width{
sqrt
}
print_line_dotted{
}
default_params{
smalloc
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
strcat
sprintf
strlen
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
validate_desc{
}
blank_state{
smalloc
smalloc
smalloc
memset
memset
}
new_game{
blank_state
__assert_fail
__assert_fail
}
dup_game{
blank_state
memcpy
memcpy
}
free_game{
sfree
sfree
sfree
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
}
unruly_solver_update_remaining{
memset
memset
memset
memset
}
unruly_new_scratch{
smalloc
smalloc
smalloc
smalloc
smalloc
unruly_solver_update_remaining
}
unruly_free_scratch{
sfree
sfree
sfree
sfree
sfree
}
unruly_solver_check_threes{
printf
printf
printf
}
unruly_solver_check_all_threes{
unruly_solver_check_threes
unruly_solver_check_threes
unruly_solver_check_threes
unruly_solver_check_threes
}
unruly_solver_check_uniques{
__assert_fail
__assert_fail
printf
}
unruly_solver_check_all_uniques{
unruly_solver_check_uniques
unruly_solver_check_uniques
unruly_solver_check_uniques
unruly_solver_check_uniques
}
unruly_solver_fill_row{
printf
printf
printf
}
unruly_solver_check_complete_nums{
printf
unruly_solver_fill_row
}
unruly_solver_check_all_complete_nums{
unruly_solver_check_complete_nums
unruly_solver_check_complete_nums
unruly_solver_check_complete_nums
unruly_solver_check_complete_nums
}
unruly_solver_check_near_complete{
printf
unruly_solver_fill_row
printf
unruly_solver_fill_row
printf
unruly_solver_fill_row
printf
unruly_solver_fill_row
}
unruly_solver_check_all_near_complete{
unruly_solver_check_near_complete
unruly_solver_check_near_complete
unruly_solver_check_near_complete
unruly_solver_check_near_complete
}
unruly_validate_rows{
}
unruly_validate_unique{
}
unruly_validate_all_rows{
unruly_validate_rows
unruly_validate_rows
unruly_validate_rows
unruly_validate_rows
unruly_validate_unique
unruly_validate_unique
}
unruly_validate_counts{
unruly_new_scratch
unruly_free_scratch
}
unruly_solve_game{
unruly_solver_check_all_threes
unruly_solver_check_all_complete_nums
unruly_solver_check_all_uniques
unruly_solver_check_all_near_complete
}
solve_game{
dup_game
unruly_new_scratch
unruly_solve_game
unruly_validate_counts
unruly_validate_all_rows
smalloc
free_game
unruly_free_scratch
}
unruly_fill_game{
printf
smalloc
shuffle
random_upto
unruly_solve_game
sfree
unruly_validate_all_rows
unruly_validate_counts
}
new_game_desc{
blank_state
unruly_new_scratch
unruly_fill_game
free_game
unruly_free_scratch
printf
game_text_format
fputs
sfree
unruly_free_scratch
smalloc
shuffle
dup_game
unruly_new_scratch
unruly_solve_game
unruly_validate_counts
free_game
unruly_free_scratch
sfree
printf
game_text_format
fputs
sfree
dup_game
unruly_new_scratch
unruly_solve_game
unruly_validate_counts
free_game
unruly_free_scratch
smalloc
free_game
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
game_new_drawstate{
smalloc
smalloc
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
sfree
sfree
}
interpret_move{
move_cursor
sprintf
dupstr
}
execute_move{
dup_game
free_game
sscanf
dup_game
free_game
unruly_validate_counts
unruly_validate_all_rows
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
frontend_default_colour
game_mkhighlight_specific
game_mkhighlight_specific
}
unruly_draw_err_rectangle{
draw_rect
draw_rect
draw_rect
draw_rect
}
unruly_draw_tile{
clip
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
unruly_draw_err_rectangle
unruly_draw_err_rectangle
draw_text
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
unclip
draw_update
}
game_redraw{
draw_rect
draw_rect
draw_update
unruly_validate_all_rows
unruly_validate_counts
unruly_draw_tile
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
draw_polygon
draw_rect
draw_circle
}
usage_exit{
fprintf
fprintf
exit
}
main{
time
strcmp
usage_exit
atoi
strcmp
usage_exit
strchr
default_params
decode_params
validate_params
fprintf
fprintf
exit
random_new
default_params
printf
encode_params
new_game_desc
game_text_format
new_game
fputs
sfree
printf
validate_desc
fprintf
fprintf
exit
new_game
unruly_new_scratch
unruly_solve_game
unruly_validate_counts
unruly_validate_all_rows
game_text_format
fputs
sfree
printf
printf
printf
printf
free_game
unruly_free_scratch
}
smalloc{
malloc
fatal
}
sfree{
free
}
srealloc{
realloc
malloc
fatal
}
dupstr{
smalloc
strlen
strcpy
}
default_params{
smalloc
}
game_fetch_preset{
smalloc
sprintf
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
default_params
free_params
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
sprintf
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
sscanf
atoi
}
validate_params{
}
new_game_desc{
random_upto
smalloc
memset
smalloc
memset
random_upto
random_upto
sfree
obfuscate_bitmap
bin2hex
sfree
}
validate_desc{
strlen
hex2bin
obfuscate_bitmap
sfree
}
range2grid{
}
grid2range{
}
new_game{
smalloc
strlen
hex2bin
obfuscate_bitmap
smalloc
memset
smalloc
memset
sfree
}
dup_game{
smalloc
smalloc
memcpy
smalloc
memcpy
}
free_game{
sfree
sfree
sfree
}
solve_game{
dupstr
}
game_can_format_as_text_now{
}
game_text_format{
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
sprintf
dupstr
}
decode_ui{
sscanf
}
game_changed_state{
}
isball{
__assert_fail
}
fire_laser_internal{
grid2range
__assert_fail
isball
isball
isball
grid2range
grid2range
__assert_fail
__assert_fail
isball
isball
isball
}
laser_exit{
range2grid
__assert_fail
fire_laser_internal
}
fire_laser{
range2grid
__assert_fail
fire_laser_internal
range2grid
__assert_fail
}
check_guesses{
dup_game
laser_exit
random_new
random_upto
random_free
laser_exit
laser_exit
free_game
laser_exit
laser_exit
random_new
random_upto
random_free
laser_exit
laser_exit
fire_laser
laser_exit
free_game
free_game
dup_game
range2grid
__assert_fail
dup_game
fire_laser
fire_laser
range2grid
__assert_fail
range2grid
__assert_fail
free_game
free_game
}
interpret_move{
move_cursor
grid2range
sprintf
sprintf
sprintf
sprintf
sprintf
sprintf
dupstr
}
execute_move{
dup_game
strcmp
check_guesses
sscanf
sscanf
fire_laser
check_guesses
strlen
sscanf
sscanf
sscanf
free_game
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
game_mkhighlight
}
game_new_drawstate{
smalloc
smalloc
memset
}
game_free_drawstate{
sfree
sfree
}
draw_square_cursor{
draw_rect_outline
}
draw_arena_tile{
draw_rect
draw_rect_outline
draw_circle
draw_circle
draw_square_cursor
draw_polygon
draw_polygon
draw_update
}
draw_laser_tile{
range2grid
__assert_fail
draw_rect
draw_rect_outline
sprintf
sprintf
draw_circle
draw_circle
draw_text
draw_square_cursor
draw_update
}
game_redraw{
draw_rect
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
draw_update
draw_arena_tile
draw_laser_tile
clip
draw_circle
draw_circle
unclip
draw_rect
draw_update
sprintf
sprintf
sprintf
sprintf
sprintf
sprintf
sprintf
sprintf
strlen
status_bar
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
}
game_print{
}
_GLIB_CHECKED_ADD_U32{
__builtin_uadd_overflow
}
_GLIB_CHECKED_MUL_U32{
__builtin_umul_overflow
}
_GLIB_CHECKED_ADD_U64{
__builtin_uaddll_overflow
}
_GLIB_CHECKED_MUL_U64{
__builtin_umulll_overflow
}
g_bit_nth_lsf_impl{
__builtin_expect
}
g_bit_nth_msf_impl{
__builtin_expect
}
g_bit_storage_impl{
__builtin_expect
__builtin_clzl
}
g_mutex_locker_new{
g_mutex_lock
}
g_mutex_locker_free{
g_mutex_unlock
}
g_steal_pointer{
}
g_string_append_c_inline{
g_string_insert_c
}
g_error{
__builtin_va_start
g_logv
__builtin_va_end
}
g_message{
__builtin_va_start
g_logv
__builtin_va_end
}
g_critical{
__builtin_va_start
g_logv
__builtin_va_end
}
g_warning{
__builtin_va_start
g_logv
__builtin_va_end
}
g_info{
__builtin_va_start
g_logv
__builtin_va_end
}
g_debug{
__builtin_va_start
g_logv
__builtin_va_end
}
g_autoptr_cleanup_generic_gfree{
g_free
}
g_autoptr_cleanup_gstring_free{
g_string_free
}
glib_autoptr_cleanup_GAsyncQueue{
g_async_queue_unref
}
glib_autoptr_cleanup_GBookmarkFile{
g_bookmark_file_free
}
glib_autoptr_cleanup_GBytes{
g_bytes_unref
}
glib_autoptr_cleanup_GChecksum{
g_checksum_free
}
glib_autoptr_cleanup_GDateTime{
g_date_time_unref
}
glib_autoptr_cleanup_GDir{
g_dir_close
}
glib_autoptr_cleanup_GError{
g_error_free
}
glib_autoptr_cleanup_GHashTable{
g_hash_table_unref
}
glib_autoptr_cleanup_GHmac{
g_hmac_unref
}
glib_autoptr_cleanup_GIOChannel{
g_io_channel_unref
}
glib_autoptr_cleanup_GKeyFile{
g_key_file_unref
}
glib_autoptr_cleanup_GList{
g_list_free
}
glib_autoptr_cleanup_GArray{
g_array_unref
}
glib_autoptr_cleanup_GPtrArray{
g_ptr_array_unref
}
glib_autoptr_cleanup_GByteArray{
g_byte_array_unref
}
glib_autoptr_cleanup_GMainContext{
g_main_context_unref
}
glib_autoptr_cleanup_GMainLoop{
g_main_loop_unref
}
glib_autoptr_cleanup_GSource{
g_source_unref
}
glib_autoptr_cleanup_GMappedFile{
g_mapped_file_unref
}
glib_autoptr_cleanup_GMarkupParseContext{
g_markup_parse_context_unref
}
glib_autoptr_cleanup_GNode{
g_node_destroy
}
glib_autoptr_cleanup_GOptionContext{
g_option_context_free
}
glib_autoptr_cleanup_GOptionGroup{
g_option_group_unref
}
glib_autoptr_cleanup_GPatternSpec{
g_pattern_spec_free
}
glib_autoptr_cleanup_GQueue{
g_queue_free
}
glib_auto_cleanup_GQueue{
g_queue_clear
}
glib_autoptr_cleanup_GRand{
g_rand_free
}
glib_autoptr_cleanup_GRegex{
g_regex_unref
}
glib_autoptr_cleanup_GMatchInfo{
g_match_info_unref
}
glib_autoptr_cleanup_GScanner{
g_scanner_destroy
}
glib_autoptr_cleanup_GSequence{
g_sequence_free
}
glib_autoptr_cleanup_GSList{
g_slist_free
}
glib_autoptr_cleanup_GString{
g_autoptr_cleanup_gstring_free
}
glib_autoptr_cleanup_GStringChunk{
g_string_chunk_free
}
glib_autoptr_cleanup_GThread{
g_thread_unref
}
glib_auto_cleanup_GMutex{
g_mutex_clear
}
glib_autoptr_cleanup_GMutexLocker{
g_mutex_locker_free
}
glib_auto_cleanup_GCond{
g_cond_clear
}
glib_autoptr_cleanup_GTimer{
g_timer_destroy
}
glib_autoptr_cleanup_GTimeZone{
g_time_zone_unref
}
glib_autoptr_cleanup_GTree{
g_tree_unref
}
glib_autoptr_cleanup_GVariant{
g_variant_unref
}
glib_autoptr_cleanup_GVariantBuilder{
g_variant_builder_unref
}
glib_auto_cleanup_GVariantBuilder{
g_variant_builder_clear
}
glib_autoptr_cleanup_GVariantIter{
g_variant_iter_free
}
glib_autoptr_cleanup_GVariantDict{
g_variant_dict_unref
}
glib_auto_cleanup_GVariantDict{
g_variant_dict_clear
}
glib_autoptr_cleanup_GVariantType{
g_variant_type_free
}
glib_auto_cleanup_GStrv{
g_strfreev
}
g_set_object{
g_object_ref
g_object_unref
}
glib_autoptr_cleanup_GTypeModule{
g_object_unref
}
glib_autoptr_cleanup_GClosure{
g_closure_unref
}
glib_autoptr_cleanup_GObject{
g_object_unref
}
glib_autoptr_cleanup_GInitiallyUnowned{
g_object_unref
}
glib_auto_cleanup_GValue{
g_value_unset
}
glib_autoptr_cleanup_GListModel{
glib_autoptr_cleanup_GObject
}
G_LIST_MODEL{
g_type_check_instance_cast
g_list_model_get_type
}
G_IS_LIST_MODEL{
g_list_model_get_type
g_type_check_instance_is_a
}
G_LIST_MODEL_GET_IFACE{
g_type_interface_peek
g_list_model_get_type
}
glib_autoptr_cleanup_GListStore{
glib_autoptr_cleanup_GObject
}
G_LIST_STORE{
g_type_check_instance_cast
g_list_store_get_type
}
G_IS_LIST_STORE{
g_list_store_get_type
g_type_check_instance_is_a
}
glib_autoptr_cleanup_GAction{
g_object_unref
}
glib_autoptr_cleanup_GActionMap{
g_object_unref
}
glib_autoptr_cleanup_GAppInfo{
g_object_unref
}
glib_autoptr_cleanup_GAppLaunchContext{
g_object_unref
}
glib_autoptr_cleanup_GAppInfoMonitor{
g_object_unref
}
glib_autoptr_cleanup_GApplicationCommandLine{
g_object_unref
}
glib_autoptr_cleanup_GApplication{
g_object_unref
}
glib_autoptr_cleanup_GAsyncInitable{
g_object_unref
}
glib_autoptr_cleanup_GAsyncResult{
g_object_unref
}
glib_autoptr_cleanup_GBufferedInputStream{
g_object_unref
}
glib_autoptr_cleanup_GBufferedOutputStream{
g_object_unref
}
glib_autoptr_cleanup_GBytesIcon{
g_object_unref
}
glib_autoptr_cleanup_GCancellable{
g_object_unref
}
glib_autoptr_cleanup_GCharsetConverter{
g_object_unref
}
glib_autoptr_cleanup_GConverter{
g_object_unref
}
glib_autoptr_cleanup_GConverterInputStream{
g_object_unref
}
glib_autoptr_cleanup_GConverterOutputStream{
g_object_unref
}
glib_autoptr_cleanup_GCredentials{
g_object_unref
}
glib_autoptr_cleanup_GDatagramBased{
g_object_unref
}
glib_autoptr_cleanup_GDataInputStream{
g_object_unref
}
glib_autoptr_cleanup_GDataOutputStream{
g_object_unref
}
glib_autoptr_cleanup_GDBusActionGroup{
g_object_unref
}
glib_autoptr_cleanup_GDBusAuthObserver{
g_object_unref
}
glib_autoptr_cleanup_GDBusConnection{
g_object_unref
}
glib_autoptr_cleanup_GDBusInterface{
g_object_unref
}
glib_autoptr_cleanup_GDBusInterfaceSkeleton{
g_object_unref
}
glib_autoptr_cleanup_GDBusMenuModel{
g_object_unref
}
glib_autoptr_cleanup_GDBusMessage{
g_object_unref
}
glib_autoptr_cleanup_GDBusMethodInvocation{
g_object_unref
}
glib_autoptr_cleanup_GDBusNodeInfo{
g_dbus_node_info_unref
}
glib_autoptr_cleanup_GDBusObject{
g_object_unref
}
glib_autoptr_cleanup_GDBusObjectManagerClient{
g_object_unref
}
glib_autoptr_cleanup_GDBusObjectManager{
g_object_unref
}
glib_autoptr_cleanup_GDBusObjectManagerServer{
g_object_unref
}
glib_autoptr_cleanup_GDBusObjectProxy{
g_object_unref
}
glib_autoptr_cleanup_GDBusObjectSkeleton{
g_object_unref
}
glib_autoptr_cleanup_GDBusProxy{
g_object_unref
}
glib_autoptr_cleanup_GDBusServer{
g_object_unref
}
glib_autoptr_cleanup_GDrive{
g_object_unref
}
glib_autoptr_cleanup_GEmblemedIcon{
g_object_unref
}
glib_autoptr_cleanup_GEmblem{
g_object_unref
}
glib_autoptr_cleanup_GFileEnumerator{
g_object_unref
}
glib_autoptr_cleanup_GFile{
g_object_unref
}
glib_autoptr_cleanup_GFileAttributeInfoList{
g_file_attribute_info_list_unref
}
glib_autoptr_cleanup_GFileIcon{
g_object_unref
}
glib_autoptr_cleanup_GFileInfo{
g_object_unref
}
glib_autoptr_cleanup_GFileInputStream{
g_object_unref
}
glib_autoptr_cleanup_GFileIOStream{
g_object_unref
}
glib_autoptr_cleanup_GFileMonitor{
g_object_unref
}
glib_autoptr_cleanup_GFilenameCompleter{
g_object_unref
}
glib_autoptr_cleanup_GFileOutputStream{
g_object_unref
}
glib_autoptr_cleanup_GFilterInputStream{
g_object_unref
}
glib_autoptr_cleanup_GFilterOutputStream{
g_object_unref
}
glib_autoptr_cleanup_GIcon{
g_object_unref
}
glib_autoptr_cleanup_GInetAddress{
g_object_unref
}
glib_autoptr_cleanup_GInetAddressMask{
g_object_unref
}
glib_autoptr_cleanup_GInetSocketAddress{
g_object_unref
}
glib_autoptr_cleanup_GInitable{
g_object_unref
}
glib_autoptr_cleanup_GInputStream{
g_object_unref
}
glib_autoptr_cleanup_GIOModule{
g_object_unref
}
glib_autoptr_cleanup_GIOStream{
g_object_unref
}
glib_autoptr_cleanup_GLoadableIcon{
g_object_unref
}
glib_autoptr_cleanup_GMemoryInputStream{
g_object_unref
}
glib_autoptr_cleanup_GMemoryOutputStream{
g_object_unref
}
glib_autoptr_cleanup_GMenu{
g_object_unref
}
glib_autoptr_cleanup_GMenuItem{
g_object_unref
}
glib_autoptr_cleanup_GMenuModel{
g_object_unref
}
glib_autoptr_cleanup_GMenuAttributeIter{
g_object_unref
}
glib_autoptr_cleanup_GMenuLinkIter{
g_object_unref
}
glib_autoptr_cleanup_GMount{
g_object_unref
}
glib_autoptr_cleanup_GMountOperation{
g_object_unref
}
glib_autoptr_cleanup_GNativeVolumeMonitor{
g_object_unref
}
glib_autoptr_cleanup_GNetworkAddress{
g_object_unref
}
glib_autoptr_cleanup_GNetworkMonitor{
g_object_unref
}
glib_autoptr_cleanup_GNetworkService{
g_object_unref
}
glib_autoptr_cleanup_GNotification{
g_object_unref
}
glib_autoptr_cleanup_GOutputStream{
g_object_unref
}
glib_autoptr_cleanup_GPermission{
g_object_unref
}
glib_autoptr_cleanup_GPollableInputStream{
g_object_unref
}
glib_autoptr_cleanup_GPollableOutputStream{
g_object_unref
}
glib_autoptr_cleanup_GPropertyAction{
g_object_unref
}
glib_autoptr_cleanup_GProxyAddressEnumerator{
g_object_unref
}
glib_autoptr_cleanup_GProxyAddress{
g_object_unref
}
glib_autoptr_cleanup_GProxy{
g_object_unref
}
glib_autoptr_cleanup_GProxyResolver{
g_object_unref
}
glib_autoptr_cleanup_GRemoteActionGroup{
g_object_unref
}
glib_autoptr_cleanup_GResolver{
g_object_unref
}
glib_autoptr_cleanup_GSeekable{
g_object_unref
}
glib_autoptr_cleanup_GSettingsBackend{
g_object_unref
}
glib_autoptr_cleanup_GSettingsSchema{
g_settings_schema_unref
}
glib_autoptr_cleanup_GSettings{
g_object_unref
}
glib_autoptr_cleanup_GSimpleActionGroup{
g_object_unref
}
glib_autoptr_cleanup_GSimpleAction{
g_object_unref
}
glib_autoptr_cleanup_GSimpleAsyncResult{
g_object_unref
}
glib_autoptr_cleanup_GSimplePermission{
g_object_unref
}
glib_autoptr_cleanup_GSimpleProxyResolver{
g_object_unref
}
glib_autoptr_cleanup_GSocketAddressEnumerator{
g_object_unref
}
glib_autoptr_cleanup_GSocketAddress{
g_object_unref
}
glib_autoptr_cleanup_GSocketClient{
g_object_unref
}
glib_autoptr_cleanup_GSocketConnectable{
g_object_unref
}
glib_autoptr_cleanup_GSocketConnection{
g_object_unref
}
glib_autoptr_cleanup_GSocketControlMessage{
g_object_unref
}
glib_autoptr_cleanup_GSocket{
g_object_unref
}
glib_autoptr_cleanup_GSocketListener{
g_object_unref
}
glib_autoptr_cleanup_GSocketService{
g_object_unref
}
glib_autoptr_cleanup_GSubprocess{
g_object_unref
}
glib_autoptr_cleanup_GSubprocessLauncher{
g_object_unref
}
glib_autoptr_cleanup_GTask{
g_object_unref
}
glib_autoptr_cleanup_GTcpConnection{
g_object_unref
}
glib_autoptr_cleanup_GTcpWrapperConnection{
g_object_unref
}
glib_autoptr_cleanup_GTestDBus{
g_object_unref
}
glib_autoptr_cleanup_GThemedIcon{
g_object_unref
}
glib_autoptr_cleanup_GThreadedSocketService{
g_object_unref
}
glib_autoptr_cleanup_GTlsBackend{
g_object_unref
}
glib_autoptr_cleanup_GTlsCertificate{
g_object_unref
}
glib_autoptr_cleanup_GTlsClientConnection{
g_object_unref
}
glib_autoptr_cleanup_GTlsConnection{
g_object_unref
}
glib_autoptr_cleanup_GTlsDatabase{
g_object_unref
}
glib_autoptr_cleanup_GTlsFileDatabase{
g_object_unref
}
glib_autoptr_cleanup_GTlsInteraction{
g_object_unref
}
glib_autoptr_cleanup_GTlsPassword{
g_object_unref
}
glib_autoptr_cleanup_GTlsServerConnection{
g_object_unref
}
glib_autoptr_cleanup_GVfs{
g_object_unref
}
glib_autoptr_cleanup_GVolume{
g_object_unref
}
glib_autoptr_cleanup_GVolumeMonitor{
g_object_unref
}
glib_autoptr_cleanup_GZlibCompressor{
g_object_unref
}
glib_autoptr_cleanup_GZlibDecompressor{
g_object_unref
}
glib_autoptr_cleanup_GdkPixbuf{
g_object_unref
}
glib_autoptr_cleanup_GdkPixbufAnimation{
g_object_unref
}
glib_autoptr_cleanup_GdkPixbufAnimationIter{
g_object_unref
}
glib_autoptr_cleanup_GdkPixbufLoader{
g_object_unref
}
glib_autoptr_cleanup_GdkPixbufSimpleAnim{
g_object_unref
}
glib_autoptr_cleanup_GdkAppLaunchContext{
g_object_unref
}
glib_autoptr_cleanup_GdkCursor{
g_object_unref
}
glib_autoptr_cleanup_GdkDevice{
g_object_unref
}
glib_autoptr_cleanup_GdkDeviceManager{
g_object_unref
}
glib_autoptr_cleanup_GdkDisplay{
g_object_unref
}
glib_autoptr_cleanup_GdkDisplayManager{
g_object_unref
}
glib_autoptr_cleanup_GdkDragContext{
g_object_unref
}
glib_autoptr_cleanup_GdkFrameClock{
g_object_unref
}
glib_autoptr_cleanup_GdkGLContext{
g_object_unref
}
glib_autoptr_cleanup_GdkKeymap{
g_object_unref
}
glib_autoptr_cleanup_GdkScreen{
g_object_unref
}
glib_autoptr_cleanup_GdkVisual{
g_object_unref
}
glib_autoptr_cleanup_GdkWindow{
g_object_unref
}
glib_autoptr_cleanup_GdkEvent{
gdk_event_free
}
glib_autoptr_cleanup_GdkFrameTimings{
gdk_frame_timings_unref
}
glib_autoptr_cleanup_GdkRGBA{
gdk_rgba_free
}
glib_autoptr_cleanup_GtkAccelGroup{
g_object_unref
}
glib_autoptr_cleanup_GtkBorder{
gtk_border_free
}
glib_autoptr_cleanup_GtkWidget{
g_object_unref
}
glib_autoptr_cleanup_GtkRequisition{
gtk_requisition_free
}
glib_autoptr_cleanup_GtkApplication{
g_object_unref
}
glib_autoptr_cleanup_GtkContainer{
g_object_unref
}
glib_autoptr_cleanup_GtkBin{
g_object_unref
}
glib_autoptr_cleanup_GtkWindow{
g_object_unref
}
glib_autoptr_cleanup_GtkWindowGroup{
g_object_unref
}
glib_autoptr_cleanup_GtkDialog{
g_object_unref
}
glib_autoptr_cleanup_GtkAboutDialog{
g_object_unref
}
glib_autoptr_cleanup_GtkMenuShell{
g_object_unref
}
glib_autoptr_cleanup_GtkMenu{
g_object_unref
}
glib_autoptr_cleanup_GtkLabel{
g_object_unref
}
glib_autoptr_cleanup_GtkAccelLabel{
g_object_unref
}
glib_autoptr_cleanup_GtkAccelMap{
g_object_unref
}
glib_autoptr_cleanup_GtkShortcutsWindow{
g_object_unref
}
glib_autoptr_cleanup_GtkNativeDialog{
glib_autoptr_cleanup_GObject
}
GTK_NATIVE_DIALOG{
g_type_check_instance_cast
gtk_native_dialog_get_type
}
GTK_NATIVE_DIALOG_CLASS{
g_type_check_class_cast
gtk_native_dialog_get_type
}
GTK_IS_NATIVE_DIALOG{
gtk_native_dialog_get_type
g_type_check_instance_is_a
}
GTK_IS_NATIVE_DIALOG_CLASS{
gtk_native_dialog_get_type
g_type_check_class_is_a
}
GTK_NATIVE_DIALOG_GET_CLASS{
}
glib_autoptr_cleanup_GtkFileChooserNative{
glib_autoptr_cleanup_GtkNativeDialog
}
GTK_FILE_CHOOSER_NATIVE{
g_type_check_instance_cast
gtk_file_chooser_native_get_type
}
GTK_IS_FILE_CHOOSER_NATIVE{
gtk_file_chooser_native_get_type
g_type_check_instance_is_a
}
glib_autoptr_cleanup_GtkListBox{
g_object_unref
}
glib_autoptr_cleanup_GtkListBoxRow{
g_object_unref
}
glib_autoptr_cleanup_GtkAccessible{
g_object_unref
}
glib_autoptr_cleanup_GtkActionBar{
g_object_unref
}
glib_autoptr_cleanup_GtkActionable{
g_object_unref
}
glib_autoptr_cleanup_GtkAdjustment{
g_object_unref
}
glib_autoptr_cleanup_GtkAppChooser{
g_object_unref
}
glib_autoptr_cleanup_GtkAppChooserButton{
g_object_unref
}
glib_autoptr_cleanup_GtkAppChooserDialog{
g_object_unref
}
glib_autoptr_cleanup_GtkAppChooserWidget{
g_object_unref
}
glib_autoptr_cleanup_GtkApplicationWindow{
g_object_unref
}
glib_autoptr_cleanup_GtkAspectFrame{
g_object_unref
}
glib_autoptr_cleanup_GtkAssistant{
g_object_unref
}
glib_autoptr_cleanup_GtkBox{
g_object_unref
}
glib_autoptr_cleanup_GtkBuildable{
g_object_unref
}
glib_autoptr_cleanup_GtkBuilder{
g_object_unref
}
glib_autoptr_cleanup_GtkButton{
g_object_unref
}
glib_autoptr_cleanup_GtkButtonBox{
g_object_unref
}
glib_autoptr_cleanup_GtkCalendar{
g_object_unref
}
glib_autoptr_cleanup_GtkCellArea{
g_object_unref
}
glib_autoptr_cleanup_GtkCellAreaBox{
g_object_unref
}
glib_autoptr_cleanup_GtkCellAreaContext{
g_object_unref
}
glib_autoptr_cleanup_GtkCellEditable{
g_object_unref
}
glib_autoptr_cleanup_GtkCellLayout{
g_object_unref
}
glib_autoptr_cleanup_GtkCellRenderer{
g_object_unref
}
glib_autoptr_cleanup_GtkCellRendererAccel{
g_object_unref
}
glib_autoptr_cleanup_GtkCellRendererCombo{
g_object_unref
}
glib_autoptr_cleanup_GtkCellRendererPixbuf{
g_object_unref
}
glib_autoptr_cleanup_GtkCellRendererProgress{
g_object_unref
}
glib_autoptr_cleanup_GtkCellRendererSpin{
g_object_unref
}
glib_autoptr_cleanup_GtkCellRendererSpinner{
g_object_unref
}
glib_autoptr_cleanup_GtkCellRendererText{
g_object_unref
}
glib_autoptr_cleanup_GtkCellRendererToggle{
g_object_unref
}
glib_autoptr_cleanup_GtkCellView{
g_object_unref
}
glib_autoptr_cleanup_GtkCheckButton{
g_object_unref
}
glib_autoptr_cleanup_GtkCheckMenuItem{
g_object_unref
}
glib_autoptr_cleanup_GtkClipboard{
g_object_unref
}
glib_autoptr_cleanup_GtkColorButton{
g_object_unref
}
glib_autoptr_cleanup_GtkColorChooser{
g_object_unref
}
glib_autoptr_cleanup_GtkColorChooserDialog{
g_object_unref
}
glib_autoptr_cleanup_GtkColorChooserWidget{
g_object_unref
}
glib_autoptr_cleanup_GtkComboBox{
g_object_unref
}
glib_autoptr_cleanup_GtkComboBoxText{
g_object_unref
}
glib_autoptr_cleanup_GtkCssProvider{
g_object_unref
}
glib_autoptr_cleanup_GtkDrawingArea{
g_object_unref
}
glib_autoptr_cleanup_GtkEditable{
g_object_unref
}
glib_autoptr_cleanup_GtkEntry{
g_object_unref
}
glib_autoptr_cleanup_GtkEntryBuffer{
g_object_unref
}
glib_autoptr_cleanup_GtkEntryCompletion{
g_object_unref
}
glib_autoptr_cleanup_GtkEventBox{
g_object_unref
}
glib_autoptr_cleanup_GtkEventController{
g_object_unref
}
glib_autoptr_cleanup_GtkExpander{
g_object_unref
}
glib_autoptr_cleanup_GtkFileChooserButton{
g_object_unref
}
glib_autoptr_cleanup_GtkFileChooserDialog{
g_object_unref
}
glib_autoptr_cleanup_GtkFileChooserWidget{
g_object_unref
}
glib_autoptr_cleanup_GtkFileFilter{
g_object_unref
}
glib_autoptr_cleanup_GtkFixed{
g_object_unref
}
glib_autoptr_cleanup_GtkFlowBox{
g_object_unref
}
glib_autoptr_cleanup_GtkFlowBoxChild{
g_object_unref
}
glib_autoptr_cleanup_GtkFontButton{
g_object_unref
}
glib_autoptr_cleanup_GtkFontChooser{
g_object_unref
}
glib_autoptr_cleanup_GtkFontChooserDialog{
g_object_unref
}
glib_autoptr_cleanup_GtkFontChooserWidget{
g_object_unref
}
glib_autoptr_cleanup_GtkFrame{
g_object_unref
}
glib_autoptr_cleanup_GtkGLArea{
g_object_unref
}
glib_autoptr_cleanup_GtkGesture{
g_object_unref
}
glib_autoptr_cleanup_GtkGestureDrag{
g_object_unref
}
glib_autoptr_cleanup_GtkGestureLongPress{
g_object_unref
}
glib_autoptr_cleanup_GtkGestureMultiPress{
g_object_unref
}
glib_autoptr_cleanup_GtkGesturePan{
g_object_unref
}
glib_autoptr_cleanup_GtkGestureRotate{
g_object_unref
}
glib_autoptr_cleanup_GtkGestureSingle{
g_object_unref
}
glib_autoptr_cleanup_GtkGestureSwipe{
g_object_unref
}
glib_autoptr_cleanup_GtkGestureZoom{
g_object_unref
}
glib_autoptr_cleanup_GtkGrid{
g_object_unref
}
glib_autoptr_cleanup_GtkHeaderBar{
g_object_unref
}
glib_autoptr_cleanup_GtkIMContext{
g_object_unref
}
glib_autoptr_cleanup_GtkIMContextSimple{
g_object_unref
}
glib_autoptr_cleanup_GtkIMMulticontext{
g_object_unref
}
glib_autoptr_cleanup_GtkIconInfo{
g_object_unref
}
glib_autoptr_cleanup_GtkIconTheme{
g_object_unref
}
glib_autoptr_cleanup_GtkIconView{
g_object_unref
}
glib_autoptr_cleanup_GtkImage{
g_object_unref
}
glib_autoptr_cleanup_GtkInfoBar{
g_object_unref
}
glib_autoptr_cleanup_GtkInvisible{
g_object_unref
}
glib_autoptr_cleanup_GtkLayout{
g_object_unref
}
glib_autoptr_cleanup_GtkLevelBar{
g_object_unref
}
glib_autoptr_cleanup_GtkLinkButton{
g_object_unref
}
glib_autoptr_cleanup_GtkListStore{
g_object_unref
}
glib_autoptr_cleanup_GtkLockButton{
g_object_unref
}
glib_autoptr_cleanup_GtkMenuBar{
g_object_unref
}
glib_autoptr_cleanup_GtkMenuButton{
g_object_unref
}
glib_autoptr_cleanup_GtkMenuItem{
g_object_unref
}
glib_autoptr_cleanup_GtkMenuToolButton{
g_object_unref
}
glib_autoptr_cleanup_GtkMessageDialog{
g_object_unref
}
glib_autoptr_cleanup_GtkMountOperation{
g_object_unref
}
glib_autoptr_cleanup_GtkNotebook{
g_object_unref
}
glib_autoptr_cleanup_GtkOffscreenWindow{
g_object_unref
}
glib_autoptr_cleanup_GtkOrientable{
g_object_unref
}
glib_autoptr_cleanup_GtkOverlay{
g_object_unref
}
glib_autoptr_cleanup_GtkPageSetup{
g_object_unref
}
glib_autoptr_cleanup_GtkPaned{
g_object_unref
}
glib_autoptr_cleanup_GtkPlacesSidebar{
g_object_unref
}
glib_autoptr_cleanup_GtkPopover{
g_object_unref
}
glib_autoptr_cleanup_GtkPopoverMenu{
g_object_unref
}
glib_autoptr_cleanup_GtkPrintContext{
g_object_unref
}
glib_autoptr_cleanup_GtkPrintOperation{
g_object_unref
}
glib_autoptr_cleanup_GtkPrintOperationPreview{
g_object_unref
}
glib_autoptr_cleanup_GtkPrintSettings{
g_object_unref
}
glib_autoptr_cleanup_GtkProgressBar{
g_object_unref
}
glib_autoptr_cleanup_GtkRadioButton{
g_object_unref
}
glib_autoptr_cleanup_GtkRadioMenuItem{
g_object_unref
}
glib_autoptr_cleanup_GtkRadioToolButton{
g_object_unref
}
glib_autoptr_cleanup_GtkRange{
g_object_unref
}
glib_autoptr_cleanup_GtkRcStyle{
g_object_unref
}
glib_autoptr_cleanup_GtkRecentChooser{
g_object_unref
}
glib_autoptr_cleanup_GtkRecentChooserDialog{
g_object_unref
}
glib_autoptr_cleanup_GtkRecentChooserMenu{
g_object_unref
}
glib_autoptr_cleanup_GtkRecentChooserWidget{
g_object_unref
}
glib_autoptr_cleanup_GtkRecentFilter{
g_object_unref
}
glib_autoptr_cleanup_GtkRecentManager{
g_object_unref
}
glib_autoptr_cleanup_GtkRevealer{
g_object_unref
}
glib_autoptr_cleanup_GtkScale{
g_object_unref
}
glib_autoptr_cleanup_GtkScaleButton{
g_object_unref
}
glib_autoptr_cleanup_GtkScrollable{
g_object_unref
}
glib_autoptr_cleanup_GtkScrollbar{
g_object_unref
}
glib_autoptr_cleanup_GtkScrolledWindow{
g_object_unref
}
glib_autoptr_cleanup_GtkSearchBar{
g_object_unref
}
glib_autoptr_cleanup_GtkSearchEntry{
g_object_unref
}
glib_autoptr_cleanup_GtkSeparator{
g_object_unref
}
glib_autoptr_cleanup_GtkSeparatorMenuItem{
g_object_unref
}
glib_autoptr_cleanup_GtkSeparatorToolItem{
g_object_unref
}
glib_autoptr_cleanup_GtkSettings{
g_object_unref
}
glib_autoptr_cleanup_GtkStackSidebar{
g_object_unref
}
glib_autoptr_cleanup_GtkSizeGroup{
g_object_unref
}
glib_autoptr_cleanup_GtkSpinButton{
g_object_unref
}
glib_autoptr_cleanup_GtkSpinner{
g_object_unref
}
glib_autoptr_cleanup_GtkStack{
g_object_unref
}
glib_autoptr_cleanup_GtkStackSwitcher{
g_object_unref
}
glib_autoptr_cleanup_GtkStatusbar{
g_object_unref
}
glib_autoptr_cleanup_GtkStyle{
g_object_unref
}
glib_autoptr_cleanup_GtkStyleContext{
g_object_unref
}
glib_autoptr_cleanup_GtkStyleProperties{
g_object_unref
}
glib_autoptr_cleanup_GtkStyleProvider{
g_object_unref
}
glib_autoptr_cleanup_GtkSwitch{
g_object_unref
}
glib_autoptr_cleanup_GtkTextBuffer{
g_object_unref
}
glib_autoptr_cleanup_GtkTextChildAnchor{
g_object_unref
}
glib_autoptr_cleanup_GtkTextMark{
g_object_unref
}
glib_autoptr_cleanup_GtkTextTag{
g_object_unref
}
glib_autoptr_cleanup_GtkTextTagTable{
g_object_unref
}
glib_autoptr_cleanup_GtkTextView{
g_object_unref
}
glib_autoptr_cleanup_GtkToggleButton{
g_object_unref
}
glib_autoptr_cleanup_GtkToggleToolButton{
g_object_unref
}
glib_autoptr_cleanup_GtkToolButton{
g_object_unref
}
glib_autoptr_cleanup_GtkToolItem{
g_object_unref
}
glib_autoptr_cleanup_GtkToolItemGroup{
g_object_unref
}
glib_autoptr_cleanup_GtkToolPalette{
g_object_unref
}
glib_autoptr_cleanup_GtkToolShell{
g_object_unref
}
glib_autoptr_cleanup_GtkToolbar{
g_object_unref
}
glib_autoptr_cleanup_GtkTooltip{
g_object_unref
}
glib_autoptr_cleanup_GtkTreeDragDest{
g_object_unref
}
glib_autoptr_cleanup_GtkTreeDragSource{
g_object_unref
}
glib_autoptr_cleanup_GtkTreeModel{
g_object_unref
}
glib_autoptr_cleanup_GtkTreeModelFilter{
g_object_unref
}
glib_autoptr_cleanup_GtkTreeModelSort{
g_object_unref
}
glib_autoptr_cleanup_GtkTreeSelection{
g_object_unref
}
glib_autoptr_cleanup_GtkTreeSortable{
g_object_unref
}
glib_autoptr_cleanup_GtkTreeStore{
g_object_unref
}
glib_autoptr_cleanup_GtkTreeView{
g_object_unref
}
glib_autoptr_cleanup_GtkTreeViewColumn{
g_object_unref
}
glib_autoptr_cleanup_GtkViewport{
g_object_unref
}
glib_autoptr_cleanup_GtkVolumeButton{
g_object_unref
}
glib_autoptr_cleanup_GtkPaperSize{
gtk_paper_size_free
}
glib_autoptr_cleanup_GtkSelectionData{
gtk_selection_data_free
}
glib_autoptr_cleanup_GtkTargetList{
gtk_target_list_unref
}
glib_autoptr_cleanup_GtkTextAttributes{
gtk_text_attributes_unref
}
glib_autoptr_cleanup_GtkTextIter{
gtk_text_iter_free
}
glib_autoptr_cleanup_GtkTreeIter{
gtk_tree_iter_free
}
glib_autoptr_cleanup_GtkTreeRowReference{
gtk_tree_row_reference_free
}
glib_autoptr_cleanup_GtkWidgetPath{
gtk_widget_path_unref
}
glib_autoptr_cleanup_GdkX11AppLaunchContext{
g_object_unref
}
glib_autoptr_cleanup_GdkX11Cursor{
g_object_unref
}
glib_autoptr_cleanup_GdkX11DeviceCore{
g_object_unref
}
glib_autoptr_cleanup_GdkX11DeviceManagerCore{
g_object_unref
}
glib_autoptr_cleanup_GdkX11DeviceManagerXI2{
g_object_unref
}
glib_autoptr_cleanup_GdkX11DeviceXI2{
g_object_unref
}
glib_autoptr_cleanup_GdkX11Display{
g_object_unref
}
glib_autoptr_cleanup_GdkX11DisplayManager{
g_object_unref
}
glib_autoptr_cleanup_GdkX11DragContext{
g_object_unref
}
glib_autoptr_cleanup_GdkX11GLContext{
g_object_unref
}
glib_autoptr_cleanup_GdkX11Keymap{
g_object_unref
}
glib_autoptr_cleanup_GdkX11Screen{
g_object_unref
}
glib_autoptr_cleanup_GdkX11Visual{
g_object_unref
}
glib_autoptr_cleanup_GdkX11Window{
g_object_unref
}
fatal{
fprintf
__builtin_va_start
vfprintf
__builtin_va_end
fprintf
exit
}
get_random_seed{
smalloc
gettimeofday
}
frontend_default_colour{
}
gtk_status_bar{
__assert_fail
gtk_statusbar_pop
g_type_check_instance_cast
gtk_statusbar_get_type
gtk_statusbar_push
g_type_check_instance_cast
gtk_statusbar_get_type
}
setup_drawing{
cairo_create
cairo_set_antialias
cairo_set_line_width
cairo_set_line_cap
cairo_set_line_join
}
teardown_drawing{
cairo_destroy
}
snaffle_colours{
midend_colours
}
set_colour{
cairo_set_source_rgb
}
set_window_background{
sprintf
gtk_css_provider_new
gtk_css_provider_load_from_data
g_type_check_instance_cast
gtk_css_provider_get_type
__assert_fail
gtk_style_context_add_provider
gtk_widget_get_style_context
g_type_check_instance_cast
gtk_style_provider_get_type
gtk_style_context_add_provider
gtk_widget_get_style_context
g_type_check_instance_cast
gtk_style_provider_get_type
}
make_pango_layout{
pango_cairo_create_layout
}
draw_pango_layout{
cairo_move_to
pango_cairo_show_layout
}
save_screenshot_png{
cairo_surface_write_to_png
}
do_clip{
cairo_new_path
cairo_rectangle
cairo_clip
}
do_unclip{
cairo_reset_clip
}
do_draw_rect{
cairo_save
cairo_new_path
cairo_set_antialias
cairo_rectangle
cairo_fill
cairo_restore
}
do_draw_line{
cairo_new_path
cairo_move_to
cairo_line_to
cairo_stroke
}
do_draw_thick_line{
cairo_save
cairo_set_line_width
cairo_new_path
cairo_move_to
cairo_line_to
cairo_stroke
cairo_restore
}
do_draw_poly{
cairo_new_path
cairo_line_to
cairo_close_path
set_colour
cairo_fill_preserve
__assert_fail
set_colour
cairo_stroke
}
do_draw_circle{
cairo_new_path
cairo_arc
cairo_close_path
set_colour
cairo_fill_preserve
__assert_fail
set_colour
cairo_stroke
}
setup_blitter{
cairo_image_surface_create
}
teardown_blitter{
cairo_surface_destroy
}
do_blitter_save{
cairo_create
cairo_set_source_surface
cairo_paint
cairo_destroy
}
do_blitter_load{
cairo_set_source_surface
cairo_paint
}
clear_backing_store{
}
wipe_and_maybe_destroy_cairo{
cairo_set_source_rgb
cairo_paint
cairo_destroy
}
setup_backing_store{
cairo_image_surface_create
wipe_and_maybe_destroy_cairo
cairo_create
gtk_widget_get_window
gdk_window_get_clip_region
gdk_window_begin_draw_frame
gdk_drawing_context_get_cairo_context
wipe_and_maybe_destroy_cairo
gdk_window_end_draw_frame
cairo_region_destroy
}
backing_store_ok{
}
teardown_backing_store{
cairo_surface_destroy
}
add_font{
pango_font_description_new
pango_font_description_set_family
pango_font_description_set_weight
pango_font_description_set_absolute_size
}
align_and_draw_text{
make_pango_layout
pango_layout_set_font_description
pango_layout_set_text
strlen
pango_layout_get_pixel_extents
draw_pango_layout
g_object_unref
}
gtk_start_draw{
setup_drawing
}
gtk_clip{
do_clip
}
gtk_unclip{
do_unclip
}
gtk_draw_text{
srealloc
add_font
set_colour
align_and_draw_text
}
gtk_draw_rect{
set_colour
do_draw_rect
}
gtk_draw_line{
set_colour
do_draw_line
}
gtk_draw_thick_line{
set_colour
do_draw_thick_line
}
gtk_draw_poly{
do_draw_poly
}
gtk_draw_circle{
do_draw_circle
}
gtk_blitter_new{
smalloc
setup_blitter
}
gtk_blitter_free{
teardown_blitter
sfree
}
gtk_blitter_save{
do_blitter_save
}
gtk_blitter_load{
do_blitter_load
}
gtk_draw_update{
}
gtk_end_draw{
teardown_drawing
gtk_widget_queue_draw_area
}
gtk_text_fallback{
dupstr
}
destroy{
deactivate_timer
midend_free
gtk_main_quit
}
key_event{
backing_store_ok
gtk_window_activate_key
g_type_check_instance_cast
gtk_window_get_type
midend_process_key
gtk_widget_destroy
}
button_event{
backing_store_ok
midend_process_key
gtk_widget_destroy
}
motion_event{
backing_store_ok
midend_process_key
gtk_widget_destroy
gdk_event_request_motions
}
draw_area{
gdk_cairo_get_clip_rectangle
cairo_set_source_surface
cairo_rectangle
cairo_fill
}
map_window{
gtk_widget_queue_draw
}
resize_puzzle_to_area{
midend_size
backing_store_ok
backing_store_ok
teardown_backing_store
setup_backing_store
midend_force_redraw
}
configure_area{
resize_puzzle_to_area
}
window_size_alloc{
gtk_widget_get_allocation
resize_puzzle_to_area
}
timer_func{
gettimeofday
midend_timer
}
deactivate_timer{
g_source_remove
}
activate_timer{
g_timeout_add
gettimeofday
}
window_destroy{
gtk_main_quit
}
win_key_press{
g_type_check_instance_cast
g_signal_emit_by_name
}
align_label{
gtk_label_set_xalign
gtk_label_set_yalign
}
message_box{
gtk_message_dialog_new
g_type_check_instance_cast
gtk_window_get_type
gtk_window_set_title
g_type_check_instance_cast
gtk_window_get_type
gtk_dialog_run
g_type_check_instance_cast
gtk_dialog_get_type
gtk_widget_destroy
}
error_box{
message_box
}
config_ok_button_clicked{
midend_set_config
error_box
gtk_widget_destroy
changed_preset
}
config_cancel_button_clicked{
gtk_widget_destroy
}
editbox_key{
gtk_widget_get_parent
g_signal_stop_emission_by_name
g_type_check_instance_cast
g_signal_emit_by_name
g_type_check_instance_cast
gtk_widget_get_parent
}
editbox_changed{
__assert_fail
sfree
dupstr
gtk_entry_get_text
g_type_check_instance_cast
gtk_entry_get_type
}
button_toggled{
__assert_fail
gtk_toggle_button_get_active
g_type_check_instance_cast
gtk_toggle_button_get_type
}
droplist_sel{
__assert_fail
gtk_combo_box_get_active
}
get_config{
midend_get_config
gtk_window_new
g_type_check_instance_cast
gtk_box_new
gtk_box_get_type
g_object_set
g_type_check_instance_cast
gtk_widget_show
g_type_check_instance_cast
gtk_widget_get_type
gtk_container_add
g_type_check_instance_cast
gtk_container_get_type
g_type_check_instance_cast
gtk_widget_get_type
g_type_check_instance_cast
gtk_box_new
gtk_box_get_type
gtk_widget_show
g_type_check_instance_cast
gtk_widget_get_type
gtk_box_pack_end
g_type_check_instance_cast
gtk_widget_get_type
gtk_separator_new
gtk_widget_show
gtk_box_pack_end
gtk_window_set_title
g_type_check_instance_cast
gtk_window_get_type
sfree
gtk_button_new_with_mnemonic
gtk_box_pack_end
gtk_widget_show
g_signal_connect_data
g_type_check_instance_cast
gtk_button_new_with_mnemonic
gtk_box_pack_end
gtk_widget_show
gtk_widget_set_can_default
gtk_window_set_default
g_type_check_instance_cast
gtk_window_get_type
g_signal_connect_data
g_type_check_instance_cast
gtk_grid_new
gtk_box_pack_start
gtk_widget_show
gtk_label_new
align_label
g_type_check_instance_cast
gtk_label_get_type
gtk_grid_attach
g_type_check_instance_cast
gtk_grid_get_type
gtk_widget_show
gtk_entry_new
gtk_grid_attach
g_type_check_instance_cast
gtk_grid_get_type
g_object_set
g_type_check_instance_cast
gtk_entry_set_text
g_type_check_instance_cast
gtk_entry_get_type
g_signal_connect_data
g_type_check_instance_cast
g_signal_connect_data
g_type_check_instance_cast
gtk_widget_show
gtk_check_button_new_with_label
g_signal_connect_data
g_type_check_instance_cast
gtk_grid_attach
g_type_check_instance_cast
gtk_grid_get_type
g_object_set
g_type_check_instance_cast
gtk_toggle_button_set_active
g_type_check_instance_cast
gtk_toggle_button_get_type
gtk_widget_show
gtk_label_new
align_label
g_type_check_instance_cast
gtk_label_get_type
gtk_grid_attach
g_type_check_instance_cast
gtk_grid_get_type
gtk_widget_show
gtk_list_store_new
smalloc
strncpy
gtk_list_store_append
gtk_list_store_set
gtk_combo_box_new_with_model
g_type_check_instance_cast
gtk_tree_model_get_type
gtk_combo_box_set_active
g_type_check_instance_cast
gtk_combo_box_get_type
gtk_cell_renderer_text_new
gtk_cell_layout_pack_start
g_type_check_instance_cast
gtk_cell_layout_get_type
gtk_cell_layout_set_attributes
g_type_check_instance_cast
gtk_cell_layout_get_type
g_signal_connect_data
g_type_check_instance_cast
gtk_grid_attach
g_type_check_instance_cast
gtk_grid_get_type
g_object_set
g_type_check_instance_cast
gtk_widget_show
g_signal_connect_data
g_type_check_instance_cast
g_signal_connect_data
g_type_check_instance_cast
gtk_window_set_modal
g_type_check_instance_cast
gtk_window_get_type
gtk_window_set_transient_for
g_type_check_instance_cast
gtk_window_get_type
g_type_check_instance_cast
gtk_window_get_type
gtk_widget_show
gtk_main
free_cfg
}
menu_key_event{
g_object_get_data
g_type_check_instance_cast
midend_process_key
gtk_widget_destroy
}
get_size{
midend_size
}
changed_preset{
midend_which_preset
gtk_check_menu_item_set_active
g_type_check_instance_cast
gtk_check_menu_item_get_type
g_object_get_data
g_type_check_instance_cast
gtk_check_menu_item_set_active
g_type_check_instance_cast
gtk_check_menu_item_get_type
gtk_check_menu_item_set_active
g_type_check_instance_cast
gtk_check_menu_item_get_type
midend_can_format_as_text_now
gtk_widget_set_sensitive
}
configure_window{
}
window_extra_height{
gtk_widget_get_preferred_size
gtk_widget_get_preferred_size
}
resize_fe{
get_size
gtk_window_resize
g_type_check_instance_cast
gtk_window_get_type
window_extra_height
}
menu_preset_event{
g_object_get_data
g_type_check_instance_cast
gtk_check_menu_item_get_type
g_type_check_instance_is_a
gtk_check_menu_item_get_active
g_type_check_instance_cast
gtk_check_menu_item_get_type
midend_set_params
midend_new_game
changed_preset
resize_fe
midend_redraw
}
set_selection{
gdk_atom_intern
gdk_atom_intern
gtk_selection_owner_set
gtk_selection_clear_targets
gtk_selection_add_target
gtk_selection_add_target
gtk_selection_add_target
}
write_clip{
sfree
strlen
set_selection
set_selection
}
selection_get{
gtk_selection_data_set
gtk_selection_data_get_target
}
selection_clear{
sfree
}
menu_copy_event{
midend_text_format
write_clip
gdk_beep
}
file_selector{
gtk_file_chooser_dialog_new
g_type_check_instance_cast
gtk_window_get_type
gtk_dialog_run
g_type_check_instance_cast
gtk_dialog_get_type
gtk_file_chooser_get_filename
g_type_check_instance_cast
gtk_file_chooser_get_type
dupstr
g_free
gtk_widget_destroy
}
savefile_write{
fwrite
__errno_location
}
savefile_read{
fread
}
menu_save_event{
file_selector
fopen
fclose
sprintf
message_box
fopen
error_box
midend_serialise
fclose
sprintf
strerror
__errno_location
error_box
sfree
}
menu_load_event{
file_selector
fopen
sfree
error_box
midend_deserialise
fclose
error_box
changed_preset
resize_fe
midend_redraw
}
menu_solve_event{
midend_solve
error_box
}
menu_restart_event{
midend_restart_game
}
menu_config_event{
g_object_get_data
g_type_check_instance_cast
gtk_check_menu_item_get_type
g_type_check_instance_is_a
gtk_check_menu_item_get_active
g_type_check_instance_cast
gtk_check_menu_item_get_type
changed_preset
get_config
midend_new_game
resize_fe
midend_redraw
}
menu_about_event{
gdk_pixbuf_new_from_xpm_data
gtk_show_about_dialog
g_type_check_instance_cast
gtk_window_get_type
g_object_unref
g_type_check_instance_cast
}
add_menu_ui_item{
gtk_menu_item_new_with_label
gtk_container_add
g_object_set_data
g_type_check_instance_cast
g_signal_connect_data
g_type_check_instance_cast
gtk_widget_add_accelerator
gtk_widget_show
}
add_menu_separator{
gtk_menu_item_new
gtk_container_add
gtk_widget_show
}
populate_gtk_preset_menu{
gtk_radio_menu_item_new_with_label
gtk_radio_menu_item_get_group
g_type_check_instance_cast
gtk_radio_menu_item_get_type
g_object_set_data
g_type_check_instance_cast
g_signal_connect_data
g_type_check_instance_cast
gtk_menu_item_new_with_label
gtk_menu_new
gtk_menu_item_set_submenu
g_type_check_instance_cast
gtk_menu_item_get_type
populate_gtk_preset_menu
gtk_container_add
g_type_check_instance_cast
gtk_container_get_type
gtk_widget_show
}
new_window{
smalloc
midend_new
midend_game_id
midend_new_game
sprintf
fopen
sprintf
strerror
__errno_location
midend_deserialise
sprintf
fclose
midend_game_id
midend_new_game
fopen
sprintf
strerror
__errno_location
midend_deserialise
sprintf
fclose
dupstr
midend_free
sfree
midend_new_game
gtk_window_new
gtk_window_set_title
g_type_check_instance_cast
gtk_window_get_type
g_type_check_instance_cast
gtk_box_new
gtk_box_get_type
gtk_container_add
g_type_check_instance_cast
gtk_container_get_type
g_type_check_instance_cast
gtk_widget_get_type
gtk_widget_show
g_type_check_instance_cast
gtk_widget_get_type
gtk_accel_group_new
g_type_check_instance_cast
gtk_box_new
gtk_box_get_type
gtk_box_pack_start
g_type_check_instance_cast
gtk_widget_get_type
gtk_widget_show
g_type_check_instance_cast
gtk_widget_get_type
gtk_menu_bar_new
gtk_box_pack_start
gtk_widget_show
gtk_menu_item_new_with_mnemonic
gtk_container_add
g_type_check_instance_cast
gtk_container_get_type
gtk_widget_show
gtk_menu_new
gtk_menu_item_set_submenu
g_type_check_instance_cast
gtk_menu_item_get_type
add_menu_ui_item
g_type_check_instance_cast
gtk_container_get_type
gtk_menu_item_new_with_label
gtk_container_add
g_type_check_instance_cast
gtk_container_get_type
g_signal_connect_data
g_type_check_instance_cast
gtk_widget_show
gtk_menu_item_new_with_label
g_object_set_data
g_type_check_instance_cast
gtk_container_add
g_type_check_instance_cast
gtk_container_get_type
g_signal_connect_data
g_type_check_instance_cast
gtk_widget_show
gtk_menu_item_new_with_label
g_object_set_data
g_type_check_instance_cast
gtk_container_add
g_type_check_instance_cast
gtk_container_get_type
g_signal_connect_data
g_type_check_instance_cast
gtk_widget_show
midend_get_presets
gtk_menu_item_new_with_mnemonic
gtk_container_add
g_type_check_instance_cast
gtk_container_get_type
gtk_widget_show
gtk_menu_new
gtk_menu_item_set_submenu
g_type_check_instance_cast
gtk_menu_item_get_type
populate_gtk_preset_menu
gtk_radio_menu_item_new_with_label
gtk_radio_menu_item_get_group
g_type_check_instance_cast
gtk_radio_menu_item_get_type
gtk_container_add
g_type_check_instance_cast
gtk_container_get_type
g_object_set_data
g_type_check_instance_cast
g_signal_connect_data
g_type_check_instance_cast
gtk_widget_show
add_menu_separator
g_type_check_instance_cast
gtk_container_get_type
gtk_menu_item_new_with_label
gtk_container_add
g_type_check_instance_cast
gtk_container_get_type
g_signal_connect_data
g_type_check_instance_cast
gtk_widget_show
gtk_menu_item_new_with_label
gtk_container_add
g_type_check_instance_cast
gtk_container_get_type
g_signal_connect_data
g_type_check_instance_cast
gtk_widget_show
add_menu_separator
g_type_check_instance_cast
gtk_container_get_type
add_menu_ui_item
g_type_check_instance_cast
gtk_container_get_type
add_menu_ui_item
g_type_check_instance_cast
gtk_container_get_type
add_menu_separator
g_type_check_instance_cast
gtk_container_get_type
gtk_menu_item_new_with_label
gtk_container_add
g_type_check_instance_cast
gtk_container_get_type
g_signal_connect_data
g_type_check_instance_cast
gtk_widget_show
add_menu_separator
g_type_check_instance_cast
gtk_container_get_type
gtk_menu_item_new_with_label
gtk_container_add
g_type_check_instance_cast
gtk_container_get_type
g_signal_connect_data
g_type_check_instance_cast
gtk_widget_show
add_menu_separator
g_type_check_instance_cast
gtk_container_get_type
add_menu_ui_item
g_type_check_instance_cast
gtk_container_get_type
gtk_menu_item_new_with_mnemonic
gtk_container_add
g_type_check_instance_cast
gtk_container_get_type
gtk_widget_show
gtk_menu_new
gtk_menu_item_set_submenu
g_type_check_instance_cast
gtk_menu_item_get_type
gtk_menu_item_new_with_label
gtk_container_add
g_type_check_instance_cast
gtk_container_get_type
g_signal_connect_data
g_type_check_instance_cast
gtk_widget_show
changed_preset
snaffle_colours
midend_wants_statusbar
gtk_viewport_new
gtk_viewport_set_shadow_type
g_type_check_instance_cast
gtk_viewport_get_type
gtk_statusbar_new
gtk_container_add
g_type_check_instance_cast
gtk_container_get_type
gtk_widget_show
gtk_box_pack_end
gtk_widget_show
gtk_statusbar_get_context_id
g_type_check_instance_cast
gtk_statusbar_get_type
gtk_statusbar_push
g_type_check_instance_cast
gtk_statusbar_get_type
gtk_widget_get_preferred_size
gtk_widget_set_size_request
gtk_drawing_area_new
window_extra_height
gtk_window_set_geometry_hints
g_type_check_instance_cast
gtk_window_get_type
get_size
gtk_window_set_default_size
g_type_check_instance_cast
gtk_window_get_type
window_extra_height
gtk_box_pack_end
clear_backing_store
g_signal_connect_data
g_type_check_instance_cast
g_signal_connect_data
g_type_check_instance_cast
g_signal_connect_data
g_type_check_instance_cast
g_signal_connect_data
g_type_check_instance_cast
g_signal_connect_data
g_type_check_instance_cast
g_signal_connect_data
g_type_check_instance_cast
g_signal_connect_data
g_type_check_instance_cast
g_signal_connect_data
g_type_check_instance_cast
g_signal_connect_data
g_type_check_instance_cast
g_signal_connect_data
g_type_check_instance_cast
g_signal_connect_data
g_type_check_instance_cast
g_signal_connect_data
g_type_check_instance_cast
gtk_widget_add_events
g_type_check_instance_cast
gtk_widget_get_type
gtk_window_set_icon
g_type_check_instance_cast
gtk_window_get_type
gdk_pixbuf_new_from_xpm_data
g_list_append
gdk_pixbuf_new_from_xpm_data
gtk_window_set_icon_list
g_type_check_instance_cast
gtk_window_get_type
gtk_widget_show
gtk_widget_show
set_window_background
}
fgetline{
smalloc
fgets
strlen
srealloc
sfree
}
list_presets_from_menu{
printf
sfree
list_presets_from_menu
}
main{
strcmp
printf
strcmp
atoi
fprintf
strcmp
strcmp
strcmp
strcmp
fprintf
strcmp
strcmp
fprintf
strcmp
fprintf
sscanf
fprintf
strcmp
atof
fprintf
strcmp
atof
fprintf
strcmp
fprintf
strcmp
strcmp
strcmp
strcmp
strcmp
strcmp
strcmp
strcmp
strcmp
fprintf
strcmp
strcmp
strcmp
fprintf
sprintf
fputs
midend_new
document_new
fgetline
strcspn
smalloc
strlen
strcpy
strchr
sprintf
strlen
midend_game_id
fprintf
getrusage
midend_new_game
midend_get_random_seed
getrusage
printf
midend_get_game_id
midend_game_id
fprintf
midend_new_game
sfree
midend_solve
strcmp
fprintf
sfree
sfree
midend_print_puzzle
fprintf
smalloc
strlen
strlen
sprintf
midend_solve
fprintf
fopen
fprintf
strerror
__errno_location
midend_serialise
fprintf
strerror
fclose
fprintf
strerror
__errno_location
sfree
midend_get_game_id
puts
sfree
ps_init
document_print
ps_drawing_api
document_free
ps_free
midend_free
midend_new
midend_get_presets
list_presets_from_menu
midend_free
gtk_init
new_window
fprintf
midend_force_redraw
midend_process_key
midend_freeze_timer
save_screenshot_png
exit
gtk_main
}
free_cfg{
sfree
sfree
}
obfuscate_bitmap{
SHA_Init
SHA_Bytes
sprintf
SHA_Bytes
strlen
SHA_Final
}
bin2hex{
smalloc
}
hex2bin{
smalloc
memset
__assert_fail
}
game_mkhighlight_specific{
}
game_mkhighlight{
frontend_default_colour
game_mkhighlight_specific
}
memswap{
memcpy
memcpy
memcpy
}
shuffle{
random_upto
memswap
}
draw_rect_outline{
draw_polygon
}
draw_rect_corners{
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
}
move_cursor{
}
c2pos{
__assert_fail
}
c2diff{
__assert_fail
}
pos2c{
__assert_fail
}
draw_text_outline{
draw_text
draw_text
draw_text
draw_text
draw_text
}
copy_left_justified{
strlen
__assert_fail
memset
__assert_fail
memcpy
}
ps_printf{
__builtin_va_start
vfprintf
__builtin_va_end
}
ps_fill{
print_get_colour
ps_printf
ps_printf
ps_printf
ps_printf
ps_printf
ps_printf
ps_printf
ps_printf
ps_printf
}
ps_setcolour_internal{
print_get_colour
__assert_fail
ps_printf
ps_printf
}
ps_setcolour{
ps_setcolour_internal
}
ps_stroke{
ps_setcolour_internal
}
ps_draw_text{
ps_setcolour
ps_printf
ps_printf
ps_printf
ps_printf
ps_printf
ps_printf
ps_printf
ps_printf
ps_printf
}
ps_draw_rect{
ps_printf
ps_fill
}
ps_draw_line{
ps_printf
ps_stroke
}
ps_draw_polygon{
ps_printf
ps_printf
ps_printf
ps_printf
ps_fill
ps_printf
ps_stroke
}
ps_draw_circle{
ps_printf
ps_printf
ps_fill
ps_printf
ps_stroke
}
ps_unclip{
__assert_fail
ps_printf
}
ps_clip{
ps_unclip
ps_printf
ps_printf
ps_printf
}
ps_line_width{
ps_printf
}
ps_line_dotted{
ps_printf
ps_printf
}
ps_text_fallback{
strlen
smalloc
__assert_fail
}
ps_begin_doc{
fputs
fputs
fputs
fputs
fprintf
fputs
fputs
fputs
fputs
fputs
fputs
fputs
fputs
fputs
fputs
fputs
fputs
}
ps_begin_page{
fprintf
}
ps_begin_puzzle{
fprintf
}
ps_end_puzzle{
fputs
}
ps_end_page{
fputs
}
ps_end_doc{
fputs
}
ps_init{
smalloc
drawing_new
}
ps_free{
drawing_free
sfree
}
ps_drawing_api{
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
default_params{
game_fetch_preset
sfree
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strlen
sprintf
strlen
dupstr
}
game_configure{
smalloc
sprintf
dupstr
}
custom_params{
smalloc
atoi
}
validate_params{
}
blank_game{
smalloc
smalloc
smalloc
smalloc
memset
memset
memset
}
dup_game{
blank_game
memcpy
memcpy
memcpy
}
free_game{
sfree
sfree
sfree
sfree
}
check_num_adj{
__assert_fail
abs
}
check_num_error{
__assert_fail
}
check_complete{
__assert_fail
check_num_error
check_num_adj
latin_check
}
n2c{
}
c2n{
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
n2c
__assert_fail
}
game_debug{
game_text_format
printf
sfree
}
solver_add_link{
srealloc
}
new_ctx{
smalloc
solver_add_link
}
clone_ctx{
new_ctx
}
free_ctx{
sfree
sfree
}
solver_nminmax{
__assert_fail
}
solver_links{
solver_nminmax
solver_nminmax
printf
printf
printf
printf
}
solver_adjacent{
abs
printf
printf
}
solver_adjacent_set{
smalloc
memset
abs
printf
printf
}
solver_easy{
solver_adjacent
solver_links
}
solver_set{
solver_adjacent_set
}
solver_state{
new_ctx
latin_solver_alloc
latin_solver_main
memcpy
free_ctx
latin_solver_free
}
solver_hint{
dup_game
solver_state
}
latin_desc{
smalloc
n2c
}
gg_place_clue{
__assert_fail
printf
__assert_fail
}
gg_remove_clue{
__assert_fail
printf
printf
}
gg_best_clue{
game_debug
latin_solver_debug
gg_place_clue
printf
__assert_fail
}
game_assemble{
dup_game
game_debug
latin_solver_debug
solver_state
gg_best_clue
gg_place_clue
gg_place_clue
free_game
game_text_format
printf
sfree
}
game_strip{
blank_game
gg_remove_clue
memcpy
memcpy
solver_state
gg_place_clue
__assert_fail
printf
free_game
game_text_format
sfree
}
add_adjacent_flags{
abs
abs
}
new_game_desc{
blank_game
smalloc
printf
sfree
latin_generate
latin_debug
shuffle
shuffle
memset
memset
add_adjacent_flags
game_assemble
game_strip
dup_game
solver_state
free_game
printf
printf
printf
sprintf
srealloc
strcpy
latin_desc
free_game
sfree
sfree
}
load_game{
blank_game
atoi
free_game
}
new_game{
load_game
__assert_fail
}
validate_desc{
load_game
free_game
__assert_fail
__assert_fail
}
solve_game{
dupstr
dup_game
solver_state
latin_desc
free_game
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
interpret_move{
sprintf
sprintf
dupstr
sprintf
sprintf
dupstr
move_cursor
sprintf
sprintf
dupstr
move_cursor
c2n
sprintf
dupstr
dupstr
dupstr
}
execute_move{
sscanf
dup_game
check_complete
dup_game
c2n
check_complete
__assert_fail
dup_game
solver_hint
check_complete
sscanf
dup_game
free_game
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
game_mkhighlight
}
game_new_drawstate{
smalloc
smalloc
smalloc
smalloc
memset
memset
memset
}
game_free_drawstate{
sfree
sfree
sfree
sfree
}
draw_gt{
draw_polygon
}
draw_gts{
draw_rect
draw_gt
draw_update
draw_rect
draw_gt
draw_update
draw_rect
draw_gt
draw_update
draw_rect
draw_gt
draw_update
}
draw_adjs{
draw_rect
draw_rect_outline
draw_rect
draw_update
draw_rect
draw_rect_outline
draw_rect
draw_update
}
draw_furniture{
draw_rect
draw_polygon
draw_rect_outline
draw_update
draw_adjs
draw_gts
}
draw_num{
n2c
draw_text
}
draw_hints{
n2c
draw_text
}
game_redraw{
draw_rect
draw_update
draw_furniture
draw_num
draw_hints
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
game_set_size
print_line_width
draw_rect_outline
n2c
draw_text
draw_adjs
draw_gts
}
pdiff{
printf
printf
printf
printf
}
solve{
new_game
new_ctx
game_debug
latin_solver_alloc
latin_solver_main
free_ctx
latin_solver_free
pdiff
game_debug
free_game
}
check{
validate_params
fprintf
exit
}
gen{
check
new_game_desc
solve
sfree
sfree
}
soak{
check
time
printf
new_game_desc
new_game
solver_state
free_game
sfree
sfree
time
printf
}
usage_exit{
fprintf
fprintf
exit
}
main{
time
strcmp
strcmp
usage_exit
atoi
usage_exit
random_new
usage_exit
default_params
decode_params
soak
strchr
default_params
decode_params
validate_desc
fprintf
exit
solve
decode_params
gen
default_params
random_upto
random_upto
gen
pdiff
}
document_new{
smalloc
smalloc
smalloc
}
document_free{
sfree
sfree
sfree
sfree
}
document_add_puzzle{
srealloc
}
get_puzzle_size{
}
document_print{
print_begin_doc
print_begin_page
get_puzzle_size
get_puzzle_size
print_begin_puzzle
print_end_puzzle
print_end_page
print_end_doc
}
dsf_init{
}
snew_dsf{
smalloc
dsf_init
}
dsf_canonify{
edsf_canonify
}
dsf_merge{
edsf_merge
}
dsf_size{
dsf_canonify
}
edsf_canonify{
__assert_fail
__assert_fail
}
edsf_merge{
edsf_canonify
__assert_fail
edsf_canonify
__assert_fail
__assert_fail
__assert_fail
edsf_canonify
__assert_fail
__assert_fail
}
SHA_Core_Init{
}
SHATransform{
}
SHA_Init{
SHA_Core_Init
}
SHA_Bytes{
memcpy
memcpy
SHATransform
memcpy
}
SHA_Final{
memset
SHA_Bytes
SHA_Bytes
}
SHA_Simple{
SHA_Init
SHA_Bytes
SHA_Final
}
random_new{
smalloc
SHA_Simple
SHA_Simple
SHA_Simple
}
random_copy{
smalloc
memcpy
memcpy
}
random_bits{
SHA_Simple
}
random_upto{
__assert_fail
random_bits
}
random_free{
sfree
}
random_state_encode{
sprintf
sprintf
sprintf
dupstr
}
random_state_decode{
smalloc
memset
memset
}
findloop_new_state{
smalloc
}
findloop_free_state{
sfree
}
findloop_is_loop_edge{
}
findloop_run{
}
default_params{
smalloc
}
game_fetch_preset{
smalloc
sfree
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
}
encode_params{
__assert_fail
sprintf
dupstr
}
enum_grid_squares{
sqrt
}
grid_area{
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
count_grid_square_callback{
}
validate_params{
enum_grid_squares
grid_area
}
classify_grid_square_callback{
}
new_game_desc{
grid_area
smalloc
enum_grid_squares
__assert_fail
__assert_fail
smalloc
random_upto
__assert_fail
smalloc
sprintf
random_upto
sfree
sfree
}
add_grid_square_callback{
}
lowest_face{
}
align_poly{
}
flip_poly{
}
transform_poly{
smalloc
flip_poly
__assert_fail
cos
sin
memcpy
}
validate_desc{
grid_area
}
new_game{
smalloc
smalloc
grid_area
smalloc
enum_grid_squares
__assert_fail
smalloc
memset
smalloc
memset
atoi
align_poly
__assert_fail
}
dup_game{
smalloc
smalloc
memcpy
smalloc
memcpy
}
free_game{
sfree
sfree
sfree
sfree
sfree
}
solve_game{
}
game_can_format_as_text_now{
}
game_text_format{
}
new_ui{
}
free_ui{
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
find_move_dest{
__assert_fail
}
interpret_move{
atan2
fabs
fabs
__assert_fail
__assert_fail
find_move_dest
dupstr
dupstr
dupstr
dupstr
}
execute_move{
find_move_dest
dup_game
align_poly
__assert_fail
__assert_fail
acos
transform_poly
flip_poly
align_poly
sfree
transform_poly
flip_poly
align_poly
__assert_fail
smalloc
__assert_fail
__assert_fail
sfree
lowest_face
sfree
align_poly
__assert_fail
}
find_bbox_callback{
}
find_bbox{
enum_grid_squares
}
game_compute_size{
find_bbox
}
game_set_size{
find_bbox
}
game_colours{
smalloc
frontend_default_colour
}
game_new_drawstate{
smalloc
}
game_free_drawstate{
sfree
}
game_redraw{
find_bbox
draw_rect
__assert_fail
draw_polygon
transform_poly
floor
floor
draw_polygon
sfree
draw_update
sprintf
status_bar
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
}
game_print{
}
midend_reset_tilesize{
sprintf
__ctype_b_loc
__builtin_constant_p
__ctype_toupper_loc
toupper
__ctype_toupper_loc
getenv
sscanf
}
midend_new{
smalloc
get_random_seed
random_new
sprintf
__ctype_b_loc
__builtin_constant_p
__ctype_toupper_loc
toupper
__ctype_toupper_loc
getenv
drawing_new
midend_reset_tilesize
sfree
}
midend_which_game{
}
midend_purge_states{
sfree
}
midend_free_game{
sfree
}
midend_free_preset_menu{
sfree
midend_free_preset_menu
sfree
sfree
}
midend_free{
midend_free_game
drawing_free
random_free
sfree
sfree
sfree
sfree
sfree
sfree
sfree
midend_free_preset_menu
sfree
sfree
}
midend_size_new_drawstate{
}
midend_size{
midend_size_new_drawstate
}
midend_tilesize{
}
midend_set_params{
}
midend_get_params{
}
midend_set_timer{
activate_timer
deactivate_timer
}
midend_force_redraw{
midend_size_new_drawstate
midend_redraw
}
newgame_serialise_write{
__assert_fail
srealloc
memcpy
}
midend_new_game{
midend_purge_states
midend_serialise
midend_stop_anim
midend_free_game
__assert_fail
random_upto
random_upto
sfree
dupstr
sfree
sfree
sfree
random_new
strlen
random_free
srealloc
__assert_fail
__assert_fail
sfree
midend_size_new_drawstate
midend_set_timer
}
midend_can_undo{
}
midend_can_redo{
}
newgame_undo_deserialise_read{
memcpy
}
newgame_undo_deserialise_check{
strcmp
strcmp
}
midend_undo{
midend_serialise
midend_deserialise_internal
sfree
__assert_fail
newgame_serialise_write
sfree
}
midend_redo{
midend_serialise
midend_deserialise_internal
sfree
__assert_fail
newgame_serialise_write
sfree
}
midend_finish_move{
midend_set_timer
}
midend_stop_anim{
midend_finish_move
midend_redraw
}
midend_restart_game{
__assert_fail
midend_stop_anim
midend_purge_states
srealloc
dupstr
midend_finish_move
midend_redraw
midend_set_timer
}
midend_really_process_key{
midend_new_game
midend_redraw
midend_stop_anim
midend_undo
midend_stop_anim
midend_redo
midend_solve
__assert_fail
midend_redraw
midend_set_timer
midend_stop_anim
midend_purge_states
srealloc
__assert_fail
midend_finish_move
midend_redraw
midend_set_timer
}
midend_process_key{
midend_really_process_key
midend_really_process_key
}
midend_redraw{
__assert_fail
start_draw
__assert_fail
end_draw
}
midend_freeze_timer{
midend_redraw
deactivate_timer
}
midend_timer{
midend_finish_move
midend_redraw
status_bar
midend_set_timer
}
midend_colours{
sprintf
__ctype_b_loc
__builtin_constant_p
__ctype_toupper_loc
toupper
__ctype_toupper_loc
getenv
sscanf
}
preset_menu_new{
smalloc
}
preset_menu_add{
srealloc
}
preset_menu_add_submenu{
preset_menu_add
preset_menu_new
}
preset_menu_add_preset{
preset_menu_add
}
preset_menu_lookup_by_id{
preset_menu_lookup_by_id
}
preset_menu_add_from_user_env{
strcmp
preset_menu_add_submenu
dupstr
preset_menu_add_from_user_env
preset_menu_add_preset
dupstr
}
preset_menu_alloc_ids{
preset_menu_alloc_ids
}
preset_menu_encode_params{
preset_menu_encode_params
}
midend_get_presets{
__assert_fail
preset_menu_new
preset_menu_add_preset
sprintf
__ctype_b_loc
__builtin_constant_p
__ctype_toupper_loc
toupper
__ctype_toupper_loc
getenv
dupstr
preset_menu_add_from_user_env
sfree
preset_menu_alloc_ids
smalloc
preset_menu_encode_params
}
midend_which_preset{
strcmp
sfree
}
midend_wants_statusbar{
}
midend_request_id_changes{
}
midend_supersede_game_desc{
sfree
sfree
dupstr
dupstr
}
midend_get_config{
__assert_fail
smalloc
strlen
sprintf
sfree
sprintf
smalloc
__assert_fail
smalloc
strlen
strlen
sprintf
sfree
__assert_fail
}
midend_game_id_int{
strchr
strchr
smalloc
strncpy
smalloc
strncpy
dupstr
sfree
sfree
sfree
sfree
dupstr
sfree
dupstr
sfree
}
midend_game_id{
midend_game_id_int
}
midend_get_game_id{
__assert_fail
__assert_fail
smalloc
strlen
strlen
sprintf
sfree
}
midend_get_random_seed{
__assert_fail
smalloc
strlen
strlen
sprintf
sfree
}
midend_set_config{
midend_game_id_int
}
midend_can_format_as_text_now{
}
midend_text_format{
}
midend_solve{
__assert_fail
__assert_fail
midend_stop_anim
midend_purge_states
srealloc
midend_finish_move
midend_redraw
midend_set_timer
}
midend_status{
}
midend_rewrite_statusbar{
sfree
dupstr
sprintf
smalloc
strlen
strlen
strcpy
strcat
dupstr
}
midend_serialise{
copy_left_justified
sprintf
strlen
strlen
strlen
copy_left_justified
sprintf
strlen
strlen
strlen
dupstr
copy_left_justified
sprintf
strlen
strlen
strlen
sfree
copy_left_justified
sprintf
strlen
strlen
strlen
sfree
copy_left_justified
sprintf
strlen
strlen
strlen
sfree
copy_left_justified
sprintf
strlen
strlen
strlen
copy_left_justified
sprintf
strlen
strlen
strlen
copy_left_justified
sprintf
strlen
strlen
strlen
strlen
smalloc
memcpy
obfuscate_bitmap
bin2hex
copy_left_justified
sprintf
strlen
strlen
strlen
sfree
sfree
copy_left_justified
sprintf
strlen
strlen
strlen
sfree
sprintf
copy_left_justified
sprintf
strlen
strlen
strlen
sprintf
copy_left_justified
sprintf
strlen
strlen
strlen
sprintf
copy_left_justified
sprintf
strlen
strlen
strlen
__assert_fail
copy_left_justified
sprintf
strlen
strlen
strlen
copy_left_justified
sprintf
strlen
strlen
strlen
copy_left_justified
sprintf
strlen
strlen
strlen
}
midend_deserialise_internal{
strcspn
__assert_fail
smalloc
strcmp
strcmp
strcmp
strcmp
strcmp
strcmp
strcmp
sfree
strcmp
sfree
strcmp
sfree
strcmp
sfree
strcmp
sfree
strcmp
strlen
hex2bin
obfuscate_bitmap
sfree
smalloc
memcpy
sfree
strcmp
sfree
strcmp
atof
strcmp
atoi
smalloc
strcmp
atoi
strcmp
strcmp
strcmp
sfree
sfree
__assert_fail
midend_set_timer
midend_size_new_drawstate
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
midend_deserialise{
midend_deserialise_internal
}
identify_game{
strcspn
__assert_fail
smalloc
strcmp
strcmp
strcmp
strcmp
strcmp
dupstr
sfree
sfree
}
midend_print_puzzle{
__assert_fail
sfree
document_add_puzzle
}
domino_layout{
smalloc
smalloc
smalloc
domino_layout_prealloc
sfree
sfree
}
domino_layout_prealloc{
__assert_fail
shuffle
shuffle
__assert_fail
__assert_fail
__assert_fail
}
default_params{
smalloc
}
game_fetch_preset{
default_params
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
}
encode_params{
sprintf
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
perm_parity{
}
new_game_desc{
smalloc
smalloc
random_upto
random_upto
__assert_fail
__assert_fail
__assert_fail
__assert_fail
perm_parity
perm_parity
__assert_fail
sprintf
srealloc
strcpy
sfree
sfree
}
validate_desc{
smalloc
atoi
sfree
}
new_game{
smalloc
smalloc
__assert_fail
atoi
__assert_fail
__assert_fail
}
dup_game{
smalloc
smalloc
memcpy
}
free_game{
sfree
sfree
}
solve_game{
dupstr
}
game_can_format_as_text_now{
}
game_text_format{
sprintf
smalloc
sprintf
sprintf
memcpy
__assert_fail
}
new_ui{
}
free_ui{
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
flip_cursor{
}
next_move_3x2{
}
next_move{
__assert_fail
__assert_fail
__assert_fail
__assert_fail
next_move_3x2
next_move_3x2
next_move
abs
abs
}
compute_hint{
__assert_fail
__assert_fail
next_move
next_move
__assert_fail
}
interpret_move{
getenv
flip_cursor
flip_cursor
move_cursor
compute_hint
sprintf
dupstr
}
execute_move{
strcmp
dup_game
sscanf
dup_game
__assert_fail
__assert_fail
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
game_mkhighlight
}
game_new_drawstate{
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
}
draw_tile{
draw_rect
draw_polygon
draw_polygon
draw_rect
sprintf
draw_text
draw_update
}
game_redraw{
draw_rect
draw_update
draw_polygon
draw_polygon
__assert_fail
draw_tile
sprintf
sprintf
status_bar
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
}
game_print{
}
default_params{
smalloc
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
encode_bitmap{
smalloc
}
decode_bitmap{
}
sqcmp_pick{
}
sqcmp_cov{
}
sqcmp_osize{
}
addsq{
abs
abs
smalloc
add234
sfree
}
addneighbours{
addsq
addsq
addsq
addsq
}
new_game_desc{
smalloc
smalloc
abs
abs
newtree234
newtree234
newtree234
memset
addneighbours
addneighbours
addneighbours
index234
findrelpos234
__assert_fail
random_upto
delpos234
del234
del234
findrel234
del234
del234
del234
add234
add234
add234
findrel234
del234
del234
del234
add234
add234
add234
addneighbours
addneighbours
addneighbours
sfree
delpos234
sfree
freetree234
freetree234
freetree234
memcmp
memset
random_upto
encode_bitmap
encode_bitmap
smalloc
strlen
strlen
sprintf
sfree
sfree
sfree
sfree
}
validate_desc{
strspn
strspn
}
new_game{
smalloc
smalloc
smalloc
decode_bitmap
smalloc
decode_bitmap
}
dup_game{
smalloc
smalloc
memcpy
}
free_game{
sfree
sfree
sfree
sfree
}
rowxor{
}
solve_game{
smalloc
smalloc
sfree
sfree
__assert_fail
rowxor
rowxor
smalloc
smalloc
memset
__assert_fail
memcpy
smalloc
sfree
sfree
sfree
sfree
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
memset
memset
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
interpret_move{
sprintf
dupstr
__assert_fail
}
execute_move{
strlen
dup_game
sscanf
dup_game
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
frontend_default_colour
}
game_new_drawstate{
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
}
draw_tile{
clip
draw_rect
draw_polygon
draw_rect
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
unclip
draw_update
}
game_redraw{
draw_rect
draw_line
draw_line
draw_update
draw_tile
sprintf
status_bar
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
}
game_print{
}
default_params{
smalloc
}
game_fetch_preset{
sprintf
dupstr
smalloc
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
}
encode_params{
sprintf
strcat
dupstr
}
game_configure{
smalloc
sprintf
dupstr
}
custom_params{
smalloc
atoi
}
validate_params{
}
find_overlaps{
}
solver{
smalloc
smalloc
__assert_fail
find_overlaps
find_overlaps
__assert_fail
__assert_fail
sfree
sfree
}
new_game_desc{
smalloc
smalloc
smalloc
domino_layout_prealloc
shuffle
random_upto
__assert_fail
solver
smalloc
sprintf
__assert_fail
__assert_fail
smalloc
sfree
sfree
sfree
}
validate_desc{
smalloc
atoi
__ctype_b_loc
sfree
}
new_game{
smalloc
smalloc
smalloc
smalloc
smalloc
__assert_fail
__assert_fail
atoi
__ctype_b_loc
__assert_fail
__assert_fail
}
dup_game{
smalloc
smalloc
memcpy
smalloc
memcpy
}
free_game{
sfree
sfree
sfree
sfree
sfree
}
solve_game{
smalloc
sprintf
sprintf
sprintf
srealloc
strcpy
smalloc
solver
smalloc
sprintf
sprintf
srealloc
strcpy
sfree
}
game_can_format_as_text_now{
}
draw_domino{
}
game_text_format{
smalloc
memset
__assert_fail
draw_domino
draw_domino
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
interpret_move{
abs
abs
abs
abs
abs
abs
abs
abs
sprintf
dupstr
move_cursor
sprintf
dupstr
__ctype_b_loc
}
execute_move{
dup_game
sscanf
__assert_fail
__assert_fail
__assert_fail
__assert_fail
__assert_fail
__assert_fail
__assert_fail
__assert_fail
__assert_fail
sscanf
free_game
free_game
smalloc
memset
__assert_fail
sfree
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
frontend_default_colour
}
game_new_drawstate{
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
}
draw_tile{
clip
draw_rect
draw_circle
draw_circle
draw_circle
draw_circle
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect_corners
draw_rect_corners
sprintf
draw_text
draw_update
unclip
}
game_redraw{
game_compute_size
draw_rect
draw_update
smalloc
memset
__assert_fail
draw_tile
sfree
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
game_set_size
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
draw_tile
}
printv{
__builtin_va_start
vprintf
__builtin_va_end
}
default_params{
smalloc
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
}
encode_params{
sprintf
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
board_to_string{
smalloc
__assert_fail
memcpy
memcpy
}
game_can_format_as_text_now{
}
game_text_format{
board_to_string
}
print_board{
board_to_string
printv
free
}
mark_region{
mark_region
}
region_size{
mark_region
}
merge_ones{
region_size
mark_region
}
make_board{
__assert_fail
__assert_fail
__assert_fail
smalloc
dsf_init
shuffle
dsf_canonify
dsf_size
dsf_canonify
dsf_size
dsf_merge
dsf_size
merge_ones
sfree
}
merge{
__assert_fail
__assert_fail
dsf_canonify
dsf_canonify
dsf_merge
}
memdup{
smalloc
__assert_fail
memcpy
}
expand{
__assert_fail
__assert_fail
__assert_fail
printv
merge
}
clear_count{
}
flood_count{
flood_count
}
check_capacity{
flood_count
clear_count
}
expandsize{
dsf_canonify
printv
dsf_size
dsf_size
__assert_fail
}
filled_square{
merge
}
init_solver_state{
__assert_fail
filled_square
}
learn_expand_or_one{
__assert_fail
expandsize
dsf_size
__assert_fail
check_capacity
__assert_fail
printv
expand
printv
__assert_fail
__assert_fail
}
learn_blocked_expansion{
__assert_fail
dsf_canonify
dsf_size
printv
printv
expandsize
printv
__assert_fail
__assert_fail
printv
expand
}
learn_critical_square{
__assert_fail
dsf_canonify
dsf_size
__assert_fail
abs
abs
check_capacity
__assert_fail
printv
filled_square
}
learn_bitmap_deductions{
dsf_init
dsf_merge
dsf_merge
dsf_size
dsf_size
__assert_fail
__assert_fail
__assert_fail
printv
filled_square
__assert_fail
}
solver{
memdup
snew_dsf
smalloc
smalloc
snew_dsf
smalloc
printv
print_board
init_solver_state
learn_blocked_expansion
learn_expand_or_one
learn_critical_square
learn_bitmap_deductions
printv
print_board
smalloc
sfree
sfree
sfree
sfree
sfree
sfree
}
make_dsf{
snew_dsf
dsf_init
dsf_merge
}
minimize_clue_set{
smalloc
shuffle
make_dsf
smalloc
dsf_canonify
__assert_fail
dsf_canonify
solver
sfree
sfree
solver
sfree
}
encode_run{
}
new_game_desc{
smalloc
smalloc
make_board
minimize_clue_set
__assert_fail
__assert_fail
encode_run
encode_run
sfree
srealloc
}
validate_desc{
sprintf
__assert_fail
}
new_game{
smalloc
smalloc
smalloc
__assert_fail
memdup
}
dup_game{
smalloc
memdup
}
free_game{
__assert_fail
sfree
sfree
sfree
sfree
}
solve_game{
solver
dupstr
}
new_ui{
smalloc
}
free_ui{
sfree
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
sfree
}
interpret_move{
__assert_fail
__assert_fail
sfree
smalloc
memset
move_cursor
smalloc
memset
smalloc
memset
sfree
sfree
sprintf
srealloc
strlen
strlen
strcat
smalloc
strlen
strcpy
sprintf
srealloc
strlen
strlen
strcat
sfree
}
execute_move{
dup_game
strchr
strtol
dup_game
strtol
make_dsf
dsf_size
sfree
free_game
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
frontend_default_colour
}
game_new_drawstate{
smalloc
smalloc
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
sfree
sfree
sfree
}
draw_square{
__assert_fail
__assert_fail
clip
draw_rect
draw_line
draw_line
draw_text
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect_outline
unclip
draw_update
}
draw_grid{
make_dsf
dsf_size
dsf_size
dsf_size
dsf_canonify
dsf_canonify
draw_square
}
game_redraw{
draw_rect
draw_rect
draw_update
draw_grid
}
game_anim_length{
}
game_flash_length{
__assert_fail
__assert_fail
__assert_fail
__assert_fail
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
game_new_drawstate
game_set_size
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
draw_rect
print_line_width
draw_grid
game_free_drawstate
}
default_params{
smalloc
}
game_fetch_preset{
smalloc
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strlen
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
atoi
atoi
}
validate_params{
}
new_scratch{
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
}
free_scratch{
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
search{
}
fill{
__assert_fail
}
completed{
}
choosemove_recurse{
__assert_fail
memcpy
fill
completed
choosemove_recurse
search
}
choosemove{
choosemove_recurse
}
new_game_desc{
new_scratch
random_upto
memcpy
completed
choosemove
fill
smalloc
sprintf
free_scratch
}
validate_desc{
strspn
}
new_game{
smalloc
smalloc
__assert_fail
__assert_fail
__assert_fail
atoi
}
dup_game{
smalloc
smalloc
memcpy
}
free_game{
sfree
sfree
sfree
sfree
}
solve_game{
smalloc
new_scratch
memcpy
completed
choosemove
fill
__assert_fail
free_scratch
sprintf
smalloc
sprintf
__assert_fail
sfree
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
__assert_fail
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
interpret_move{
sprintf
dupstr
}
execute_move{
sscanf
smalloc
dup_game
fill
completed
__assert_fail
sfree
smalloc
smalloc
__assert_fail
atoi
strspn
__assert_fail
dup_game
sfree
sfree
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
game_mkhighlight
}
game_new_drawstate{
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
}
draw_tile{
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect_outline
draw_circle
draw_update
}
game_redraw{
draw_rect
draw_update
draw_polygon
draw_polygon
draw_rect
smalloc
memcpy
smalloc
fill
fill
sfree
abs
abs
draw_tile
sfree
sprintf
status_bar
}
game_anim_length{
}
game_status{
}
game_flash_length{
game_status
game_status
__assert_fail
}
game_timing_state{
}
game_print_size{
}
game_print{
}
fixup_islands_for_realloc{
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
__assert_fail
}
debug_state{
game_text_format
sfree
}
island_set_surrounds{
__assert_fail
}
island_find_orthogonal{
}
island_hasbridge{
}
island_find_connection{
__assert_fail
island_hasbridge
__assert_fail
}
island_add{
__assert_fail
srealloc
memset
island_set_surrounds
fixup_islands_for_realloc
}
island_join{
__assert_fail
__assert_fail
__assert_fail
}
island_countbridges{
}
island_adjspace{
}
island_countspaces{
island_countbridges
island_adjspace
}
island_isadj{
}
island_countadj{
island_isadj
}
island_togglemark{
__assert_fail
}
island_impossible{
island_countbridges
island_countspaces
__assert_fail
island_countbridges
__assert_fail
}
default_params{
smalloc
}
game_fetch_preset{
default_params
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
encode_game{
smalloc
__assert_fail
}
game_state_diff{
smalloc
__assert_fail
__assert_fail
__assert_fail
__assert_fail
__assert_fail
sprintf
srealloc
strcpy
__assert_fail
sprintf
srealloc
strcpy
sprintf
srealloc
strcpy
}
map_update_possibles{
__assert_fail
__assert_fail
}
map_count{
}
map_find_orthogonal{
island_find_orthogonal
}
bridges_neighbour{
__assert_fail
__assert_fail
}
map_hasloops{
findloop_new_state
findloop_run
bridges_neighbour
bridges_neighbour
findloop_is_loop_edge
findloop_free_state
}
map_group{
dsf_init
island_find_connection
dsf_canonify
dsf_canonify
dsf_merge
}
map_group_check{
dsf_canonify
island_countbridges
dsf_canonify
}
map_group_full{
map_group_check
dsf_canonify
}
map_check{
map_hasloops
map_group
map_group_full
}
map_clear{
}
solve_join{
__assert_fail
island_join
dsf_canonify
dsf_canonify
dsf_merge
}
solve_fillone{
island_isadj
island_hasbridge
solve_join
}
solve_fill{
island_countbridges
island_adjspace
solve_join
}
solve_island_stage1{
island_countbridges
island_countspaces
island_countadj
__assert_fail
island_togglemark
solve_fill
solve_fillone
map_update_possibles
}
solve_island_checkloop{
island_hasbridge
island_isadj
dsf_canonify
dsf_canonify
}
solve_island_stage2{
__assert_fail
solve_island_checkloop
solve_join
map_update_possibles
island_isadj
island_hasbridge
island_isadj
solve_join
map_update_possibles
}
solve_island_subgroup{
island_countbridges
__assert_fail
island_countbridges
map_group_check
dsf_canonify
}
solve_island_impossible{
island_impossible
}
solve_island_stage3{
__assert_fail
island_countbridges
island_adjspace
memcpy
solve_join
map_update_possibles
solve_island_subgroup
solve_island_impossible
solve_join
memcpy
solve_join
solve_join
map_update_possibles
island_adjspace
memcpy
island_adjspace
solve_join
map_update_possibles
solve_island_subgroup
solve_join
memcpy
solve_join
map_update_possibles
}
solve_sub{
solve_island_stage1
solve_island_stage2
solve_island_stage3
map_check
}
solve_for_hint{
map_group
solve_sub
}
solve_from_scratch{
map_clear
map_group
map_update_possibles
solve_sub
}
new_state{
smalloc
smalloc
memset
smalloc
memset
memset
memset
smalloc
smalloc
snew_dsf
smalloc
}
dup_game{
smalloc
smalloc
memcpy
smalloc
memcpy
smalloc
memcpy
smalloc
fixup_islands_for_realloc
}
free_game{
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
new_game_desc{
free_game
new_state
random_upto
random_upto
island_add
random_upto
random_upto
random_upto
random_upto
random_upto
random_upto
island_add
island_join
random_upto
debug_state
map_count
map_find_orthogonal
solve_from_scratch
solve_from_scratch
debug_state
encode_game
dup_game
map_clear
map_update_possibles
game_state_diff
free_game
free_game
}
validate_desc{
}
new_game_sub{
new_state
__assert_fail
island_add
island_add
__assert_fail
__assert_fail
map_find_orthogonal
map_update_possibles
}
new_game{
new_game_sub
}
ui_cancel_drag{
}
new_ui{
smalloc
ui_cancel_drag
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
update_drag_dst{
abs
abs
}
finish_drag{
ui_cancel_drag
sprintf
sprintf
ui_cancel_drag
dupstr
}
interpret_move{
ui_cancel_drag
update_drag_dst
finish_drag
ui_cancel_drag
ui_cancel_drag
sprintf
dupstr
dup_game
solve_for_hint
game_state_diff
free_game
move_cursor
update_drag_dst
finish_drag
abs
abs
__assert_fail
ui_cancel_drag
sprintf
dupstr
}
execute_move{
dup_game
sscanf
island_join
sscanf
island_join
sscanf
island_togglemark
map_update_possibles
map_check
free_game
}
solve_game{
execute_move
dup_game
solve_from_scratch
free_game
game_state_diff
free_game
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
game_mkhighlight
}
game_new_drawstate{
smalloc
smalloc
smalloc
smalloc
smalloc
memset
memset
}
game_free_drawstate{
sfree
sfree
sfree
sfree
sfree
}
between_island{
}
lines_lvlh{
between_island
between_island
}
draw_cross{
draw_line
draw_line
}
draw_general_line{
draw_cross
draw_cross
draw_rect
draw_rect
}
draw_hline{
draw_general_line
}
draw_vline{
draw_general_line
}
draw_island{
draw_circle
draw_circle
sprintf
draw_text
}
draw_island_tile{
clip
draw_rect
draw_hline
draw_hline
draw_vline
draw_vline
draw_island
unclip
draw_update
}
draw_line_tile{
clip
draw_rect
draw_hline
draw_vline
draw_vline
draw_hline
draw_island
draw_island
draw_island
draw_island
unclip
draw_update
}
draw_edge_tile{
clip
draw_rect
draw_island
unclip
draw_update
}
game_redraw{
draw_rect
draw_update
__assert_fail
__assert_fail
island_impossible
lines_lvlh
between_island
between_island
draw_island_tile
draw_edge_tile
draw_edge_tile
draw_edge_tile
draw_edge_tile
draw_line_tile
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
print_mono_colour
sqrt
print_line_width
draw_line
draw_line
draw_circle
sprintf
draw_text
}
default_params{
smalloc
}
free_params{
sfree
}
dup_params{
smalloc
}
game_fetch_preset{
dupstr
dup_params
}
decode_params{
default_params
free_params
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
atoi
}
validate_params{
}
new_pegrow{
smalloc
smalloc
memset
smalloc
memset
}
dup_pegrow{
new_pegrow
memcpy
memcpy
}
invalidate_pegrow{
memset
memset
}
free_pegrow{
sfree
sfree
sfree
}
new_game_desc{
smalloc
new_pegrow
random_upto
obfuscate_bitmap
bin2hex
sfree
free_pegrow
}
validate_desc{
strlen
hex2bin
obfuscate_bitmap
sfree
sfree
}
new_game{
smalloc
smalloc
new_pegrow
smalloc
new_pegrow
hex2bin
obfuscate_bitmap
sfree
memset
}
dup_game{
smalloc
smalloc
dup_pegrow
smalloc
memcpy
dup_pegrow
}
free_game{
free_pegrow
free_pegrow
sfree
sfree
sfree
}
solve_game{
dupstr
}
game_can_format_as_text_now{
}
game_text_format{
}
is_markable{
new_pegrow
free_pegrow
}
new_ui{
smalloc
memset
new_pegrow
smalloc
memset
}
free_ui{
free_pegrow
free_pegrow
sfree
sfree
}
encode_ui{
smalloc
sprintf
__assert_fail
srealloc
}
decode_ui{
atoi
__ctype_b_loc
is_markable
}
game_changed_state{
sfree
is_markable
}
set_peg{
is_markable
}
mark_pegs{
__assert_fail
__assert_fail
memset
}
encode_move{
smalloc
sprintf
__assert_fail
srealloc
}
compute_hint{
new_pegrow
mark_pegs
}
interpret_move{
__assert_fail
__assert_fail
__assert_fail
__assert_fail
__assert_fail
set_peg
set_peg
encode_move
compute_hint
encode_move
set_peg
set_peg
}
execute_move{
strcmp
dup_game
dup_game
atoi
free_game
atoi
__ctype_b_loc
mark_pegs
}
game_compute_size{
ceil
ceil
}
game_set_size{
game_compute_size
__assert_fail
__assert_fail
blitter_new
}
game_colours{
smalloc
frontend_default_colour
}
game_new_drawstate{
smalloc
memset
smalloc
new_pegrow
invalidate_pegrow
new_pegrow
invalidate_pegrow
new_pegrow
invalidate_pegrow
}
game_free_drawstate{
blitter_free
free_pegrow
free_pegrow
free_pegrow
sfree
sfree
}
draw_peg{
draw_rect
draw_circle
draw_rect
draw_text
draw_update
}
draw_cursor{
draw_circle
draw_update
}
guess_redraw{
__assert_fail
draw_peg
draw_rect
draw_update
draw_cursor
}
hint_redraw{
__assert_fail
draw_rect
draw_circle
draw_rect
draw_line
draw_line
draw_line
draw_line
draw_update
}
currmove_redraw{
draw_rect
draw_update
}
game_redraw{
draw_rect
draw_rect
draw_update
blitter_load
draw_update
draw_peg
draw_cursor
guess_redraw
hint_redraw
guess_redraw
hint_redraw
guess_redraw
hint_redraw
currmove_redraw
currmove_redraw
draw_rect
draw_update
guess_redraw
blitter_save
draw_peg
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
}
game_print{
}
default_params{
smalloc
}
free_params{
sfree
}
dup_params{
smalloc
}
game_fetch_preset{
dup_params
sprintf
dupstr
}
decode_params{
atoi
__ctype_b_loc
atoi
}
encode_params{
sprintf
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
new_scratch{
smalloc
smalloc
smalloc
smalloc
}
free_scratch{
sfree
sfree
sfree
sfree
}
can_go{
}
find_gem_candidates{
memset
memset
__assert_fail
can_go
can_go
}
gengrid{
smalloc
new_scratch
__assert_fail
shuffle
find_gem_candidates
__assert_fail
shuffle
free_scratch
}
new_game_desc{
gengrid
}
validate_desc{
}
new_game{
smalloc
smalloc
strlen
__assert_fail
memcpy
__assert_fail
__assert_fail
}
dup_game{
smalloc
smalloc
memcpy
}
free_game{
sfree
sfree
sfree
sfree
}
move_goes_to{
__assert_fail
}
compare_integers{
}
solve_game{
smalloc
smalloc
move_goes_to
smalloc
smalloc
move_goes_to
smalloc
smalloc
qsort
smalloc
smalloc
smalloc
smalloc
smalloc
srealloc
memmove
__assert_fail
__assert_fail
__assert_fail
__assert_fail
__assert_fail
memmove
__assert_fail
__assert_fail
smalloc
__assert_fail
__assert_fail
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
sprintf
memset
memcpy
memset
memset
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
sprintf
dupstr
}
decode_ui{
sscanf
}
game_changed_state{
}
interpret_move{
atan2
__assert_fail
sprintf
dupstr
}
install_new_solution{
__assert_fail
smalloc
strlen
smalloc
sfree
sfree
}
discard_solution{
__assert_fail
}
execute_move{
dup_game
install_new_solution
atoi
dup_game
discard_solution
__assert_fail
__assert_fail
solve_game
install_new_solution
sfree
discard_solution
}
game_compute_size{
}
game_set_size{
__assert_fail
__assert_fail
blitter_new
}
game_colours{
smalloc
game_mkhighlight
}
game_new_drawstate{
smalloc
smalloc
}
game_free_drawstate{
blitter_free
sfree
sfree
}
draw_player{
sqrt
sqrt
draw_polygon
draw_circle
draw_polygon
draw_update
}
draw_tile{
clip
draw_rect
draw_polygon
draw_polygon
draw_rect
draw_circle
draw_rect
draw_rect
draw_rect
draw_circle
draw_rect
draw_rect
draw_polygon
unclip
draw_update
}
game_redraw{
__assert_fail
blitter_load
draw_update
game_compute_size
draw_rect
draw_update
draw_line
draw_line
abs
abs
abs
abs
draw_tile
sprintf
sprintf
sprintf
strlen
sprintf
sprintf
__assert_fail
sprintf
strlen
status_bar
__assert_fail
__assert_fail
blitter_save
draw_player
}
game_anim_length{
sqrt
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
}
game_print{
}
latin_solver_place{
__assert_fail
__assert_fail
}
latin_solver_elim{
__assert_fail
latin_solver_place
}
latin_solver_set{
memset
memset
__assert_fail
memset
}
latin_solver_forcing{
memset
}
latin_solver_new_scratch{
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
}
latin_solver_free_scratch{
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
latin_solver_alloc{
smalloc
memset
smalloc
smalloc
memset
memset
latin_solver_place
}
latin_solver_free{
sfree
sfree
sfree
}
latin_solver_diff_simple{
latin_solver_elim
latin_solver_elim
latin_solver_elim
}
latin_solver_diff_set{
latin_solver_set
latin_solver_set
latin_solver_set
}
latin_solver_recurse{
__assert_fail
smalloc
smalloc
smalloc
memcpy
memcpy
latin_solver_alloc
latin_solver_top
latin_solver_free
__assert_fail
memcpy
sfree
sfree
sfree
__assert_fail
}
latin_solver_top{
latin_solver_new_scratch
__assert_fail
latin_solver_debug
latin_solver_diff_simple
latin_solver_diff_set
latin_solver_diff_set
latin_solver_forcing
latin_solver_recurse
latin_solver_free_scratch
}
latin_solver_main{
latin_solver_top
}
latin_solver{
latin_solver_alloc
latin_solver_main
latin_solver_free
}
latin_solver_debug{
}
latin_debug{
}
latin_generate{
smalloc
smalloc
smalloc
smalloc
smalloc
shuffle
maxflow_scratch_size
smalloc
smalloc
smalloc
smalloc
smalloc
__assert_fail
maxflow_setup_backedges
shuffle
shuffle
maxflow_with_scratch
__assert_fail
__assert_fail
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
latin_generate_rect{
latin_generate
smalloc
sfree
}
latin_check_cmp{
}
latin_check{
newtree234
find234
smalloc
add234
__assert_fail
count234
index234
index234
sfree
freetree234
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
default_params{
game_fetch_preset
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strlen
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
__assert_fail
}
add_dot{
__assert_fail
}
remove_dot{
__assert_fail
}
remove_assoc{
}
remove_assoc_with_opposite{
tile_opposite
remove_assoc
remove_assoc
}
add_assoc{
remove_assoc
}
add_assoc_with_opposite{
space_opposite_dot
smalloc
check_complete
sfree
sfree
sfree
remove_assoc_with_opposite
add_assoc
remove_assoc_with_opposite
add_assoc
}
sp2dot{
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
sp2dot
__assert_fail
__assert_fail
}
dbg_state{
}
foreach_sub{
}
foreach_tile{
foreach_sub
}
foreach_edge{
foreach_sub
foreach_sub
}
space_opposite_dot{
__assert_fail
}
tile_opposite{
__assert_fail
space_opposite_dot
}
dotfortile{
space_opposite_dot
}
adjacencies{
}
outline_tile_fordot{
__assert_fail
adjacencies
}
tiles_from_edge{
}
diff_game{
smalloc
__assert_fail
__assert_fail
sprintf
sprintf
sprintf
sprintf
srealloc
strcpy
dbg_state
dbg_state
}
dot_is_possible{
abs
abs
}
blank_game{
smalloc
smalloc
memset
}
game_update_dots{
sfree
smalloc
}
clear_game{
game_update_dots
}
dup_game{
blank_game
memcpy
game_update_dots
}
free_game{
sfree
sfree
sfree
}
encode_game{
smalloc
__assert_fail
srealloc
}
movedot_cb{
__assert_fail
__assert_fail
space_opposite_dot
__assert_fail
add_assoc
add_assoc
}
dot_expand_or_move{
__assert_fail
space_opposite_dot
space_opposite_dot
add_assoc
add_assoc
dbg_state
foreach_tile
space_opposite_dot
add_assoc
remove_dot
add_dot
foreach_tile
__assert_fail
dbg_state
}
generate_try_block{
sqrt
__assert_fail
__assert_fail
__assert_fail
__assert_fail
__assert_fail
__assert_fail
shuffle
dot_expand_or_move
}
generate_pass{
shuffle
generate_try_block
dot_is_possible
add_dot
solver_obvious_dot
__assert_fail
dbg_state
dbg_state
}
new_game_desc{
blank_game
smalloc
clear_game
generate_pass
game_update_dots
outline_tile_fordot
check_complete
__assert_fail
dup_game
clear_game
dbg_state
solver_state
free_game
__assert_fail
encode_game
dbg_state
free_game
sfree
}
dots_too_close{
dup_game
solver_obvious
free_game
}
load_game{
blank_game
add_dot
game_update_dots
dots_too_close
free_game
}
validate_desc{
load_game
free_game
__assert_fail
__assert_fail
}
new_game{
load_game
__assert_fail
}
new_solver{
smalloc
smalloc
}
free_solver{
sfree
sfree
}
solver_add_assoc{
space_opposite_dot
__assert_fail
printf
printf
printf
add_assoc
add_assoc
printf
printf
}
solver_obvious_dot{
__assert_fail
solver_add_assoc
}
solver_obvious{
solver_obvious_dot
}
solver_lines_opposite_cb{
__assert_fail
tiles_from_edge
printf
__assert_fail
tile_opposite
printf
__assert_fail
printf
}
solver_spaces_oneposs_cb{
__assert_fail
adjacencies
__assert_fail
__assert_fail
__assert_fail
__assert_fail
printf
__assert_fail
solver_add_assoc
__assert_fail
}
solver_expand_checkdot{
}
solver_expand_fromdot{
tiles_from_edge
__assert_fail
__assert_fail
adjacencies
__assert_fail
__assert_fail
space_opposite_dot
__assert_fail
solver_expand_checkdot
solver_expand_checkdot
dbg_state
}
solver_expand_postcb{
__assert_fail
printf
solver_add_assoc
}
solver_expand_dots{
solver_expand_fromdot
foreach_tile
}
solver_recurse_cb{
__assert_fail
dotfortile
}
solver_recurse{
printf
foreach_tile
__assert_fail
printf
smalloc
memcpy
memcpy
dotfortile
solver_add_assoc
solver_state
__assert_fail
smalloc
memcpy
tile_opposite
__assert_fail
remove_assoc
remove_assoc
memcpy
sfree
sfree
}
solver_state{
new_solver
solver_obvious
foreach_edge
foreach_tile
solver_expand_dots
check_complete
solver_recurse
free_solver
dbg_state
}
solve_game{
dup_game
solver_state
free_game
dup_game
solver_state
free_game
diff_game
free_game
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
coord_round_to_edge{
floor
floor
floor
floor
fabs
fabs
floor
floor
}
interpret_move{
dup_game
solver_obvious
diff_game
free_game
coord_round_to_edge
__assert_fail
sprintf
dupstr
sprintf
strlen
sprintf
strlen
dupstr
move_cursor
sprintf
sprintf
strlen
dupstr
__assert_fail
sprintf
dupstr
}
check_complete{
snew_dsf
dsf_init
dsf_merge
dsf_merge
smalloc
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
__assert_fail
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
sfree
sfree
}
execute_move{
dup_game
sscanf
remove_assoc
remove_assoc_with_opposite
sscanf
add_assoc
add_assoc_with_opposite
check_complete
free_game
}
game_compute_size{
}
game_set_size{
__assert_fail
__assert_fail
blitter_new
__assert_fail
blitter_new
__assert_fail
blitter_new
}
game_colours{
smalloc
game_mkhighlight
}
game_new_drawstate{
smalloc
smalloc
smalloc
smalloc
smalloc
}
game_free_drawstate{
blitter_free
sfree
blitter_free
blitter_free
sfree
sfree
sfree
sfree
}
draw_arrow{
sqrt
draw_line
draw_line
draw_line
}
draw_square{
clip
draw_rect
draw_rect
draw_rect
draw_arrow
draw_rect_outline
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_circle
unclip
draw_update
}
calculate_opposite_point{
}
game_redraw{
__assert_fail
__assert_fail
calculate_opposite_point
blitter_load
draw_update
blitter_load
draw_update
__assert_fail
blitter_load
draw_update
draw_rect
draw_rect
draw_update
check_complete
tile_opposite
draw_square
blitter_save
draw_circle
draw_rect
draw_update
calculate_opposite_point
blitter_save
blitter_save
draw_arrow
draw_arrow
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
print_mono_colour
print_hatched_colour
smalloc
smalloc
check_complete
print_line_width
draw_line
draw_line
dsf_canonify
srealloc
dsf_canonify
dsf_canonify
draw_polygon
draw_rect
draw_rect
draw_circle
sfree
sfree
sfree
}
factx{
}
reset_combi{
}
new_combi{
__assert_fail
__assert_fail
smalloc
memset
smalloc
memset
factx
factx
reset_combi
}
next_combi{
}
free_combi{
sfree
sfree
}
maxflow_with_scratch{
__assert_fail
__assert_fail
__assert_fail
__assert_fail
__assert_fail
__assert_fail
}
maxflow_scratch_size{
}
maxflow_setup_backedges{
}
maxflow{
maxflow_scratch_size
smalloc
maxflow_setup_backedges
maxflow_with_scratch
sfree
}
default_params{
smalloc
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strlen
dupstr
}
game_configure{
smalloc
sprintf
dupstr
}
custom_params{
smalloc
atoi
}
validate_params{
}
solver_clue_candidate{
}
solver_common{
__assert_fail
solver_clue_candidate
solver_clue_candidate
solver_clue_candidate
}
solver_easy{
solver_common
}
solver_normal{
solver_common
}
solver_hard{
solver_common
}
solver{
dsf_canonify
smalloc
smalloc
smalloc
smalloc
dsf_canonify
dsf_canonify
__assert_fail
__assert_fail
smalloc
smalloc
latin_solver
sfree
sfree
sfree
sfree
sfree
sfree
}
encode_block_structure{
dsf_canonify
dsf_canonify
sprintf
}
parse_block_structure{
dsf_init
__ctype_b_loc
atoi
__ctype_b_loc
dsf_merge
}
new_game_desc{
smalloc
smalloc
smalloc
snew_dsf
smalloc
smalloc
smalloc
sfree
latin_generate
shuffle
dsf_init
random_upto
dsf_merge
dsf_size
dsf_size
dsf_size
dsf_size
dsf_merge
dsf_canonify
dsf_size
shuffle
dsf_canonify
abs
dsf_canonify
memset
solver
memset
solver
smalloc
encode_block_structure
dsf_canonify
sprintf
srealloc
memcmp
__assert_fail
smalloc
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
validate_desc{
snew_dsf
parse_block_structure
sfree
dsf_canonify
dsf_size
__ctype_b_loc
}
new_game{
smalloc
smalloc
snew_dsf
parse_block_structure
__assert_fail
smalloc
dsf_canonify
dsf_size
__assert_fail
dsf_size
__assert_fail
__assert_fail
atol
__ctype_b_loc
smalloc
smalloc
}
dup_game{
smalloc
smalloc
smalloc
memcpy
memcpy
}
free_game{
sfree
sfree
sfree
sfree
sfree
sfree
}
solve_game{
dupstr
smalloc
memset
solver
smalloc
sfree
}
game_can_format_as_text_now{
}
game_text_format{
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
check_errors{
smalloc
smalloc
dsf_canonify
abs
dsf_canonify
sfree
sfree
}
interpret_move{
move_cursor
sprintf
dupstr
dupstr
}
execute_move{
dup_game
free_game
free_game
sscanf
dup_game
check_errors
dup_game
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
frontend_default_colour
}
game_new_drawstate{
smalloc
smalloc
smalloc
text_fallback
text_fallback
text_fallback
}
game_free_drawstate{
sfree
sfree
sfree
sfree
sfree
sfree
}
draw_tile{
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
clip
draw_rect
draw_polygon
dsf_canonify
dsf_canonify
draw_rect
dsf_canonify
dsf_canonify
draw_rect
dsf_canonify
dsf_canonify
draw_rect
dsf_canonify
dsf_canonify
draw_rect
dsf_canonify
dsf_size
sprintf
draw_text
draw_text
dsf_canonify
__assert_fail
dsf_canonify
draw_text
unclip
draw_update
}
game_redraw{
draw_rect
draw_rect
draw_update
check_errors
draw_tile
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
outline_block_structure{
smalloc
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
__assert_fail
dsf_canonify
__assert_fail
__assert_fail
draw_polygon
sfree
}
game_print{
print_mono_colour
game_set_size
text_fallback
text_fallback
text_fallback
print_line_width
draw_rect_outline
print_line_width
draw_line
print_line_width
draw_line
print_line_width
outline_block_structure
dsf_canonify
dsf_size
sprintf
draw_text
draw_text
sfree
sfree
sfree
}
generic_sort_cmpfn{
}
white_sort_cmpfn{
generic_sort_cmpfn
}
black_sort_cmpfn{
generic_sort_cmpfn
}
can_colour_face{
__assert_fail
__assert_fail
}
face_num_neighbours{
}
face_score{
face_num_neighbours
}
generate_loop{
memset
smalloc
random_bits
random_upto
newtree234
newtree234
can_colour_face
face_score
add234
can_colour_face
face_score
add234
count234
count234
__assert_fail
random_upto
index234
__assert_fail
__assert_fail
index234
__assert_fail
__assert_fail
del234
del234
del234
can_colour_face
face_score
add234
del234
can_colour_face
face_score
add234
freetree234
freetree234
sfree
smalloc
shuffle
can_colour_face
random_upto
face_num_neighbours
sfree
}
get_surrounds{
__assert_fail
}
default_params{
smalloc
}
game_fetch_preset{
default_params
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
atoi
}
validate_params{
}
new_state{
smalloc
smalloc
memset
smalloc
memset
}
dup_game{
smalloc
smalloc
memcpy
smalloc
memcpy
}
free_game{
sfree
sfree
sfree
}
debug_state{
}
grid_lit{
}
grid_overlap{
}
number_wrong{
__assert_fail
get_surrounds
}
number_correct{
__assert_fail
get_surrounds
}
grid_addsup{
number_correct
}
grid_correct{
grid_lit
grid_overlap
grid_addsup
}
clean_board{
}
set_blacks{
__assert_fail
__assert_fail
clean_board
random_upto
random_upto
random_upto
}
list_lights{
}
set_light{
__assert_fail
list_lights
}
check_dark{
list_lights
}
place_lights{
smalloc
shuffle
set_light
list_lights
check_dark
check_dark
set_light
set_light
grid_overlap
sfree
grid_lit
__assert_fail
grid_overlap
debug_state
__assert_fail
sfree
}
place_numbers{
get_surrounds
}
tsl_callback{
}
try_solve_light{
list_lights
tsl_callback
tsl_callback
set_light
}
could_place_light{
}
could_place_light_xy{
could_place_light
}
try_solve_number{
get_surrounds
could_place_light
set_light
}
trl_callback_search{
}
trl_callback_discount{
try_rule_out
}
trl_callback_incn{
}
try_rule_out{
list_lights
could_place_light_xy
could_place_light_xy
get_surrounds
get_surrounds
could_place_light_xy
}
discount_set{
try_rule_out
try_rule_out
}
discount_clear{
memset
}
unlit_cb{
could_place_light_xy
}
discount_unlit{
discount_clear
list_lights
unlit_cb
unlit_cb
discount_set
}
discount_clue{
get_surrounds
memset
could_place_light
new_combi
next_combi
discount_clear
discount_set
free_combi
}
flags_from_difficulty{
__assert_fail
}
solve_sub{
grid_overlap
grid_correct
could_place_light
try_solve_light
try_solve_number
smalloc
discount_unlit
discount_clue
could_place_light
list_lights
__assert_fail
__assert_fail
dup_game
solve_sub
free_game
set_light
solve_sub
memcpy
memcpy
free_game
sfree
}
dosolve{
solve_sub
}
strip_unused_nums{
}
unplace_lights{
set_light
}
puzzle_is_good{
flags_from_difficulty
unplace_lights
dosolve
}
new_game_desc{
new_state
smalloc
shuffle
set_blacks
place_lights
place_numbers
puzzle_is_good
dup_game
strip_unused_nums
puzzle_is_good
free_game
free_game
puzzle_is_good
puzzle_is_good
smalloc
__assert_fail
free_game
sfree
}
validate_desc{
}
new_game{
new_state
__assert_fail
__assert_fail
__assert_fail
}
solve_game{
dup_game
dosolve
free_game
dup_game
dosolve
smalloc
sprintf
sprintf
srealloc
strcpy
free_game
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
__assert_fail
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
interpret_move{
move_cursor
sprintf
__assert_fail
dupstr
}
execute_move{
dup_game
sscanf
set_light
set_light
grid_correct
free_game
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
frontend_default_colour
}
game_new_drawstate{
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
}
tile_flags{
number_wrong
}
tile_redraw{
draw_rect
sprintf
draw_text
draw_rect
draw_rect_outline
draw_circle
getenv
draw_rect
draw_rect_outline
draw_update
}
game_redraw{
draw_rect
draw_rect_outline
draw_update
tile_flags
tile_redraw
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
print_mono_colour
game_set_size
print_line_width
draw_rect_outline
print_line_width
draw_line
draw_line
tile_flags
draw_rect
sprintf
draw_text
draw_circle
}
v_origin{
}
v_x{
}
v_y{
}
v_trans{
}
v_rotate_36{
}
v_rotate{
__assert_fail
v_rotate_36
}
v_growphi{
}
v_shrinkphi{
}
xform_coord{
v_shrinkphi
v_growphi
v_rotate
v_trans
}
penrose_p2_large{
xform_coord
xform_coord
xform_coord
v_trans
v_rotate
v_rotate
penrose_p2_small
v_shrinkphi
penrose_p2_large
v_shrinkphi
penrose_p2_large
v_shrinkphi
}
penrose_p2_small{
xform_coord
xform_coord
xform_coord
v_trans
penrose_p2_large
v_shrinkphi
v_rotate
penrose_p2_small
v_shrinkphi
v_rotate
}
penrose_p3_large{
xform_coord
xform_coord
xform_coord
v_trans
penrose_p3_large
v_shrinkphi
v_rotate
penrose_p3_small
v_shrinkphi
v_rotate
v_trans
v_growphi
penrose_p3_large
v_shrinkphi
v_rotate
}
penrose_p3_small{
xform_coord
xform_coord
xform_coord
v_trans
penrose_p3_large
v_shrinkphi
v_rotate
penrose_p3_small
v_shrinkphi
v_rotate
}
penrose_side_length{
pow
}
penrose_count_tiles{
}
penrose{
v_origin
v_origin
v_shrinkphi
v_shrinkphi
v_rotate
v_rotate
penrose_p2_large
penrose_p3_small
}
penrose_calculate_size{
sqrt
}
grid_free{
__assert_fail
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
grid_empty{
smalloc
}
point_line_distance{
sqrt
}
grid_nearest_edge{
point_line_distance
}
grid_debug_basic{
}
grid_debug_derived{
}
grid_edge_bydots_cmpfn{
}
grid_trim_vigorously{
smalloc
smalloc
snew_dsf
dsf_merge
dsf_canonify
dsf_size
smalloc
dsf_canonify
sfree
sfree
sfree
sfree
sfree
}
grid_make_consistent{
grid_debug_basic
smalloc
newtree234
del234
__assert_fail
add234
freetree234
smalloc
__assert_fail
__assert_fail
__assert_fail
__assert_fail
__assert_fail
smalloc
smalloc
__assert_fail
__assert_fail
__assert_fail
__assert_fail
__assert_fail
grid_debug_derived
}
grid_point_cmp_fn{
}
grid_face_add_new{
smalloc
}
grid_dot_add_new{
}
grid_get_dot{
find234
grid_dot_add_new
add234
}
grid_face_set_dot{
}
solve_2x2_matrix{
}
solve_3x3_matrix{
}
grid_find_incentre{
sqrt
solve_3x3_matrix
sqrt
fabs
fabs
sqrt
sqrt
sqrt
sqrt
solve_2x2_matrix
__builtin_huge_val
__assert_fail
}
grid_size_square{
}
grid_new_square{
grid_empty
smalloc
smalloc
newtree234
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
freetree234
__assert_fail
__assert_fail
grid_make_consistent
}
grid_size_honeycomb{
}
grid_new_honeycomb{
grid_empty
smalloc
smalloc
newtree234
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
freetree234
__assert_fail
__assert_fail
grid_make_consistent
}
grid_size_triangular{
}
grid_validate_desc_triangular{
strcmp
}
grid_new_triangular{
atoi
grid_empty
smalloc
smalloc
smalloc
smalloc
newtree234
smalloc
smalloc
grid_face_add_new
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_add_new
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
freetree234
__assert_fail
__assert_fail
grid_make_consistent
}
grid_size_snubsquare{
}
grid_new_snubsquare{
grid_empty
smalloc
smalloc
newtree234
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
freetree234
__assert_fail
__assert_fail
grid_make_consistent
}
grid_size_cairo{
}
grid_new_cairo{
grid_empty
smalloc
smalloc
newtree234
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
freetree234
__assert_fail
__assert_fail
grid_make_consistent
}
grid_size_greathexagonal{
}
grid_new_greathexagonal{
grid_empty
smalloc
smalloc
newtree234
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
freetree234
__assert_fail
__assert_fail
grid_make_consistent
}
grid_size_kagome{
}
grid_new_kagome{
grid_empty
smalloc
smalloc
newtree234
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
freetree234
__assert_fail
__assert_fail
grid_make_consistent
}
grid_size_octagonal{
}
grid_new_octagonal{
grid_empty
smalloc
smalloc
newtree234
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
freetree234
__assert_fail
__assert_fail
grid_make_consistent
}
grid_size_kites{
}
grid_new_kites{
grid_empty
smalloc
smalloc
newtree234
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
freetree234
__assert_fail
__assert_fail
grid_make_consistent
}
grid_size_floret{
}
grid_new_floret{
grid_empty
smalloc
smalloc
newtree234
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
freetree234
__assert_fail
__assert_fail
grid_make_consistent
}
grid_size_dodecagonal{
}
grid_new_dodecagonal{
grid_empty
smalloc
smalloc
newtree234
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
freetree234
__assert_fail
__assert_fail
grid_make_consistent
}
grid_size_greatdodecagonal{
}
grid_new_greatdodecagonal{
grid_empty
smalloc
smalloc
newtree234
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
freetree234
__assert_fail
__assert_fail
grid_make_consistent
}
grid_size_greatgreatdodecagonal{
}
grid_new_greatgreatdodecagonal{
grid_empty
smalloc
smalloc
newtree234
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_face_add_new
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
grid_get_dot
grid_face_set_dot
freetree234
__assert_fail
__assert_fail
grid_make_consistent
}
round_int_nearest_away{
floor
ceil
}
set_faces{
v_x
v_y
round_int_nearest_away
round_int_nearest_away
grid_face_add_new
grid_get_dot
grid_face_set_dot
}
grid_size_penrose{
}
grid_new_desc_penrose{
penrose_calculate_size
sqrt
random_upto
random_upto
sqrt
random_upto
sprintf
grid_new_penrose
grid_free
dupstr
}
grid_validate_desc_penrose{
penrose_calculate_size
sqrt
sscanf
sqrt
grid_new_penrose
grid_free
}
grid_new_penrose{
penrose_calculate_size
grid_empty
smalloc
smalloc
newtree234
memset
sscanf
__assert_fail
penrose
freetree234
__assert_fail
__assert_fail
grid_free
grid_trim_vigorously
grid_free
grid_make_consistent
}
grid_size_penrose_p2_kite{
grid_size_penrose
}
grid_size_penrose_p3_thick{
grid_size_penrose
}
grid_new_penrose_p2_kite{
grid_new_penrose
}
grid_new_penrose_p3_thick{
grid_new_penrose
}
grid_new_desc{
grid_new_desc_penrose
dupstr
}
grid_validate_desc{
grid_validate_desc_penrose
grid_validate_desc_triangular
}
grid_new{
grid_validate_desc
__assert_fail
}
grid_compute_size{
}
default_params{
smalloc
}
game_fetch_preset{
default_params
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strlen
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
clear_state{
memset
memset
memset
}
new_state{
smalloc
memset
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
clear_state
}
dup_game{
smalloc
smalloc
memcpy
smalloc
memcpy
smalloc
memcpy
}
free_game{
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
n2c{
}
c2n{
__ctype_b_loc
}
readrow{
c2n
}
new_game_int{
new_state
readrow
readrow
readrow
readrow
free_game
}
validate_desc{
new_game_int
free_game
}
new_game{
new_game_int
__assert_fail
}
generate_desc{
smalloc
n2c
n2c
n2c
n2c
__assert_fail
}
game_text_hborder{
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
n2c
game_text_hborder
n2c
n2c
game_text_hborder
n2c
}
game_debug{
game_text_format
sfree
}
mkrowcol{
__assert_fail
}
count_rowcol{
mkrowcol
}
check_rowcol{
mkrowcol
count_rowcol
}
check_completion{
check_rowcol
check_rowcol
}
solve_clearflags{
}
solve_unflag{
__assert_fail
}
solve_unflag_surrounds{
__assert_fail
solve_unflag
}
solve_set{
solve_unflag_surrounds
solve_unflag_surrounds
}
solve_counts{
__assert_fail
__assert_fail
}
solve_checkfull{
__assert_fail
solve_counts
solve_unflag
solve_set
}
solve_startflags{
solve_set
}
solve_rowcols{
mkrowcol
solve_counts
mkrowcol
solve_counts
}
solve_force{
solve_set
}
solve_neither{
solve_set
}
solve_advancedfull{
solve_unflag
solve_unflag
}
solve_nonneutral{
solve_unflag
}
solve_oddlength{
solve_set
}
solve_countdominoes_neutral{
__assert_fail
solve_unflag
}
solve_domino_count{
}
solve_countdominoes_nonneutral{
solve_domino_count
solve_domino_count
__assert_fail
__assert_fail
solve_set
}
solve_state{
solve_clearflags
solve_startflags
solve_force
solve_neither
solve_rowcols
solve_rowcols
solve_rowcols
solve_rowcols
solve_rowcols
solve_rowcols
check_completion
}
game_state_diff{
__assert_fail
srealloc
sprintf
srealloc
strcpy
}
solve_from_aux{
strlen
__assert_fail
}
solve_game{
dup_game
strlen
solve_from_aux
solve_state
free_game
dup_game
solve_state
free_game
game_state_diff
free_game
}
solve_unnumbered{
solve_force
solve_neither
}
lay_dominoes{
shuffle
__assert_fail
solve_set
solve_set
solve_set
solve_set
solve_unnumbered
game_debug
}
gen_game{
smalloc
clear_state
sfree
domino_layout
lay_dominoes
memset
memset
sfree
}
generate_aux{
}
check_difficulty{
memset
solve_state
solve_state
smalloc
memcpy
smalloc
shuffle
mkrowcol
game_debug
memset
solve_state
__assert_fail
memcmp
sfree
sfree
}
new_game_desc{
new_state
smalloc
gen_game
generate_aux
check_difficulty
generate_desc
free_game
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
is_clue{
}
clue_index{
}
interpret_move{
move_cursor
is_clue
sprintf
dupstr
__assert_fail
sprintf
dupstr
}
execute_move{
dup_game
sscanf
sscanf
is_clue
clue_index
check_completion
free_game
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
game_mkhighlight
}
game_new_drawstate{
smalloc
smalloc
memset
smalloc
memset
smalloc
memset
}
game_free_drawstate{
sfree
sfree
sfree
sfree
}
draw_num{
sprintf
strlen
strlen
draw_rect
draw_text
draw_update
}
draw_sym{
draw_rect
draw_rect
draw_text
draw_line
draw_line
}
draw_tile_col{
__assert_fail
draw_circle
draw_circle
draw_circle
draw_circle
draw_rect
draw_sym
}
draw_tile{
draw_rect
draw_rect
draw_tile_col
draw_tile_col
draw_update
}
get_count_color{
count_rowcol
count_rowcol
clue_index
clue_index
}
game_redraw{
draw_rect
draw_sym
draw_sym
draw_update
draw_tile
get_count_color
draw_num
get_count_color
draw_num
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
print_mono_colour
game_set_size
print_line_width
draw_sym
draw_sym
draw_num
draw_num
print_line_width
draw_circle
draw_rect
draw_rect
draw_circle
draw_rect
draw_rect
draw_sym
}
loopy_generate_grid{
grid_new
}
dup_game{
smalloc
smalloc
memcpy
smalloc
memcpy
smalloc
memcpy
}
free_game{
grid_free
sfree
sfree
sfree
sfree
}
new_solver_state{
smalloc
dup_game
snew_dsf
smalloc
smalloc
smalloc
memset
memset
smalloc
memset
smalloc
memset
smalloc
memset
smalloc
memset
smalloc
memset
snew_dsf
}
free_solver_state{
free_game
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
dup_solver_state{
smalloc
dup_game
smalloc
smalloc
memcpy
memcpy
smalloc
smalloc
memcpy
memcpy
smalloc
memcpy
smalloc
memcpy
smalloc
memcpy
smalloc
memcpy
smalloc
memcpy
smalloc
memcpy
}
default_params{
smalloc
}
dup_params{
smalloc
}
preset_menu_add_preset_with_title{
sprintf
smalloc
preset_menu_add_preset
dupstr
}
game_preset_menu{
preset_menu_new
preset_menu_add_preset_with_title
preset_menu_add_submenu
dupstr
preset_menu_add_preset_with_title
}
free_params{
sfree
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strlen
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
__assert_fail
}
state_to_text{
smalloc
sprintf
sprintf
sprintf
sprintf
dupstr
sfree
}
extract_grid_desc{
strchr
smalloc
memcpy
}
validate_desc{
extract_grid_desc
grid_validate_desc
loopy_generate_grid
sfree
grid_free
}
len_0_to_n{
}
encode_solve_move{
len_0_to_n
smalloc
sprintf
sprintf
sprintf
strlen
__assert_fail
}
new_ui{
}
free_ui{
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
game_compute_size{
grid_compute_size
}
game_set_size{
}
game_colours{
smalloc
frontend_default_colour
}
game_new_drawstate{
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
memset
memset
memset
}
game_free_drawstate{
sfree
sfree
sfree
sfree
sfree
sfree
}
game_timing_state{
}
game_anim_length{
}
game_can_format_as_text_now{
}
game_text_format{
__assert_fail
__assert_fail
abs
smalloc
__assert_fail
__assert_fail
}
solver_set_line{
__assert_fail
}
merge_dots{
dsf_canonify
dsf_canonify
dsf_merge
dsf_canonify
}
merge_lines{
__assert_fail
__assert_fail
edsf_canonify
edsf_canonify
edsf_merge
}
dot_order{
}
face_order{
}
dot_setall{
solver_set_line
__assert_fail
}
face_setall{
solver_set_line
__assert_fail
}
add_full_clues{
smalloc
generate_loop
memset
__assert_fail
__assert_fail
sfree
}
game_has_unique_soln{
new_solver_state
solve_game_rec
__assert_fail
free_solver_state
free_solver_state
}
remove_clues{
dup_game
smalloc
shuffle
dup_game
game_has_unique_soln
free_game
free_game
sfree
}
new_game_desc{
smalloc
grid_new_desc
loopy_generate_grid
smalloc
smalloc
smalloc
memset
memset
add_full_clues
game_has_unique_soln
remove_clues
free_game
game_has_unique_soln
state_to_text
free_game
smalloc
strlen
strlen
sprintf
sfree
sfree
validate_desc
__assert_fail
}
new_game{
smalloc
extract_grid_desc
loopy_generate_grid
sfree
smalloc
smalloc
smalloc
__assert_fail
__assert_fail
memset
memset
}
check_completion{
memset
snew_dsf
dsf_merge
smalloc
dsf_canonify
dsf_canonify
dot_order
dot_order
dsf_size
dsf_size
dsf_canonify
face_order
sfree
sfree
}
dline_index_from_dot{
}
dline_index_from_face{
}
is_atleastone{
}
set_atleastone{
}
is_atmostone{
}
set_atmostone{
}
array_setall{
memchr
}
dline_set_opp_atleastone{
dline_index_from_dot
set_atleastone
}
face_setall_identical{
edsf_canonify
edsf_canonify
solver_set_line
solver_set_line
}
find_unknowns{
}
parity_deductions{
find_unknowns
merge_lines
find_unknowns
edsf_canonify
edsf_canonify
edsf_canonify
solver_set_line
solver_set_line
solver_set_line
find_unknowns
edsf_canonify
edsf_canonify
edsf_canonify
edsf_canonify
merge_lines
merge_lines
merge_lines
merge_lines
merge_lines
merge_lines
}
trivial_deductions{
face_setall
face_setall
__assert_fail
solver_set_line
__assert_fail
dot_setall
dot_setall
dot_setall
}
dline_deductions{
__assert_fail
dline_index_from_face
is_atmostone
is_atleastone
solver_set_line
solver_set_line
dline_index_from_face
set_atmostone
set_atleastone
dline_index_from_dot
set_atmostone
set_atleastone
is_atmostone
solver_set_line
solver_set_line
is_atleastone
solver_set_line
solver_set_line
is_atmostone
solver_set_line
solver_set_line
is_atleastone
solver_set_line
solver_set_line
set_atmostone
set_atleastone
is_atleastone
dline_index_from_dot
set_atmostone
is_atmostone
solver_set_line
dline_set_opp_atleastone
}
linedsf_deductions{
face_setall_identical
face_setall_identical
parity_deductions
dline_index_from_dot
edsf_canonify
edsf_canonify
set_atmostone
set_atleastone
is_atmostone
is_atleastone
merge_lines
parity_deductions
edsf_canonify
solver_set_line
solver_set_line
}
loop_deductions{
merge_dots
dsf_canonify
__assert_fail
dsf_canonify
dsf_canonify
solver_set_line
__assert_fail
}
solve_game_rec{
dup_solver_state
array_setall
}
solve_game{
new_solver_state
solve_game_rec
encode_solve_move
encode_solve_move
encode_solve_move
free_solver_state
free_solver_state
}
interpret_move{
grid_nearest_edge
smalloc
sprintf
getenv
strcmp
strcmp
strcmp
srealloc
sprintf
srealloc
}
execute_move{
dup_game
atoi
strspn
check_completion
free_game
}
grid_to_screen{
}
face_text_pos{
grid_find_incentre
grid_to_screen
}
face_text_bbox{
face_text_pos
}
game_redraw_clue{
sprintf
face_text_pos
draw_text
}
edge_bbox{
grid_to_screen
grid_to_screen
}
dot_bbox{
grid_to_screen
}
game_redraw_line{
grid_to_screen
grid_to_screen
getenv
draw_line
draw_thick_line
}
game_redraw_dot{
grid_to_screen
draw_circle
}
boxes_intersect{
}
game_redraw_in_rect{
clip
draw_rect
face_text_bbox
boxes_intersect
game_redraw_clue
edge_bbox
boxes_intersect
game_redraw_line
dot_bbox
boxes_intersect
game_redraw_dot
unclip
draw_update
}
game_redraw{
face_order
face_order
game_redraw_in_rect
face_text_bbox
game_redraw_in_rect
edge_bbox
game_redraw_in_rect
}
game_flash_length{
}
game_status{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
smalloc
smalloc
grid_to_screen
draw_circle
sprintf
face_text_pos
draw_text
grid_to_screen
grid_to_screen
sqrt
draw_polygon
draw_circle
sfree
sfree
}
newtree234{
smalloc
}
freenode234{
freenode234
freenode234
freenode234
freenode234
sfree
}
freetree234{
freenode234
sfree
}
countnode234{
}
count234{
countnode234
}
add234_insert{
countnode234
countnode234
smalloc
countnode234
countnode234
countnode234
smalloc
}
add234_internal{
smalloc
add234_insert
}
add234{
add234_internal
}
addpos234{
add234_internal
}
index234{
countnode234
}
findrelpos234{
__assert_fail
index234
}
find234{
findrelpos234
}
findrel234{
findrelpos234
}
findpos234{
findrelpos234
}
trans234_subtree_right{
}
trans234_subtree_left{
}
trans234_subtree_merge{
__assert_fail
sfree
}
delpos234_internal{
__assert_fail
__assert_fail
trans234_subtree_right
trans234_subtree_left
trans234_subtree_merge
sfree
__assert_fail
__assert_fail
sfree
}
delpos234{
countnode234
delpos234_internal
}
del234{
findrelpos234
delpos234_internal
}
join234_internal{
smalloc
countnode234
countnode234
add234_insert
}
height234{
}
join234{
countnode234
index234
findrelpos234
delpos234
height234
height234
join234_internal
}
join234r{
countnode234
index234
findrelpos234
delpos234
height234
height234
join234_internal
}
split234_internal{
countnode234
countnode234
smalloc
__assert_fail
__assert_fail
sfree
trans234_subtree_merge
__assert_fail
sfree
}
splitpos234{
countnode234
newtree234
split234_internal
}
split234{
__assert_fail
findrelpos234
splitpos234
}
copynode234{
smalloc
copynode234
}
copytree234{
newtree234
copynode234
}
default_params{
smalloc
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strlen
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
atoi
}
validate_params{
}
cf_init{
}
cf_add{
}
cf_clookup{
__assert_fail
}
cf_slookup{
__assert_fail
}
cf_whichsym{
__assert_fail
}
extend_options{
__assert_fail
__assert_fail
__assert_fail
__assert_fail
}
genmap{
__assert_fail
smalloc
random_upto
cf_init
cf_add
extend_options
random_upto
cf_whichsym
cf_clookup
extend_options
cf_add
cf_slookup
extend_options
__assert_fail
sfree
}
gengraph{
}
graph_edge_index{
}
graph_vertex_start{
}
fourcolour_recurse{
random_upto
__assert_fail
graph_vertex_start
shuffle
fourcolour_recurse
}
fourcolour{
smalloc
fourcolour_recurse
__assert_fail
sfree
}
new_scratch{
smalloc
smalloc
smalloc
smalloc
}
free_scratch{
sfree
sfree
sfree
sfree
}
bitcount{
__assert_fail
}
place_colour{
graph_vertex_start
}
map_solver{
place_colour
__assert_fail
place_colour
__assert_fail
graph_vertex_start
graph_edge_index
bitcount
graph_vertex_start
bitcount
graph_edge_index
__assert_fail
__assert_fail
__assert_fail
new_scratch
smalloc
memcpy
smalloc
memcpy
memcpy
place_colour
map_solver
memcpy
sfree
sfree
free_scratch
}
new_game_desc{
smalloc
smalloc
smalloc
smalloc
smalloc
genmap
gengraph
fourcolour
sfree
sprintf
srealloc
strcpy
shuffle
free_scratch
new_scratch
memcpy
map_solver
__assert_fail
memcpy
map_solver
srealloc
srealloc
__assert_fail
free_scratch
sfree
sfree
sfree
sfree
sfree
}
parse_edge_list{
dsf_init
dsf_merge
__assert_fail
dsf_canonify
}
validate_desc{
smalloc
parse_edge_list
sfree
}
new_game{
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
parse_edge_list
__assert_fail
__assert_fail
__assert_fail
__assert_fail
gengraph
random_new
strlen
smalloc
shuffle
sfree
random_free
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
graph_edge_index
__assert_fail
__assert_fail
sqrt
smalloc
smalloc
memcpy
memcpy
smalloc
smalloc
memcpy
memcpy
graph_edge_index
__assert_fail
sfree
sfree
sfree
sfree
sfree
sfree
}
dup_game{
smalloc
smalloc
memcpy
smalloc
memcpy
}
free_game{
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
solve_game{
smalloc
memcpy
new_scratch
map_solver
free_scratch
sfree
smalloc
strcpy
__assert_fail
__assert_fail
sprintf
srealloc
strcpy
sfree
dupstr
}
game_can_format_as_text_now{
}
game_text_format{
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
region_from_logical_coords{
}
region_from_coords{
region_from_logical_coords
}
region_from_ui_cursor{
__assert_fail
region_from_logical_coords
}
interpret_move{
move_cursor
region_from_ui_cursor
region_from_ui_cursor
region_from_coords
region_from_coords
sprintf
sprintf
dupstr
}
execute_move{
dup_game
sscanf
free_game
free_game
free_game
}
game_compute_size{
}
game_set_size{
__assert_fail
blitter_new
}
game_colours{
smalloc
frontend_default_colour
memcpy
memcpy
memcpy
memcpy
}
game_new_drawstate{
smalloc
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
blitter_free
sfree
}
draw_error{
draw_polygon
draw_rect
draw_rect
}
draw_square{
clip
draw_rect
draw_polygon
__assert_fail
draw_circle
draw_rect
draw_rect
draw_rect
draw_error
sprintf
draw_text
unclip
draw_update
}
game_redraw{
blitter_load
draw_update
game_compute_size
draw_rect
draw_rect
draw_update
__assert_fail
__assert_fail
__assert_fail
draw_square
region_from_ui_cursor
blitter_save
draw_circle
draw_circle
draw_update
}
game_anim_length{
}
game_flash_length{
getenv
atoi
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
print_rgb_hatched_colour
print_line_width
__assert_fail
__assert_fail
__assert_fail
srealloc
__assert_fail
draw_polygon
sfree
}
map.c:1506:13: warning: Null pointer argument in call to string copy function
            strcpy(ret + retlen, buf);
            ^~~~~~~~~~~~~~~~~~~~~~~~~
1 warning generated.
addremcommon{
}
divvy_internal{
__assert_fail
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
shuffle
addremcommon
addremcommon
random_upto
__assert_fail
__assert_fail
addremcommon
addremcommon
__assert_fail
__assert_fail
snew_dsf
dsf_merge
dsf_init
dsf_merge
dsf_merge
dsf_canonify
dsf_canonify
dsf_canonify
__assert_fail
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
divvy_rectangle{
divvy_internal
}
xyd_cmp{
}
new_xyd{
smalloc
}
default_params{
smalloc
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atof
__ctype_b_loc
atoi
}
encode_params{
sprintf
sprintf
sprintf
__assert_fail
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
atof
atoi
}
validate_params{
}
new_game_desc{
smalloc
memset
smalloc
memset
newtree234
add234
new_xyd
add234
new_xyd
add234
new_xyd
add234
new_xyd
count234
random_upto
count234
delpos234
sfree
__assert_fail
find234
del234
sfree
find234
del234
sfree
add234
new_xyd
count234
__assert_fail
freetree234
newtree234
add234
new_xyd
add234
new_xyd
smalloc
random_upto
random_upto
slide_col_int
random_upto
slide_row_int
count234
count234
__assert_fail
random_upto
count234
delpos234
__assert_fail
sfree
delpos234
sfree
freetree234
smalloc
__assert_fail
sfree
sfree
}
validate_desc{
}
new_game{
__assert_fail
__assert_fail
smalloc
smalloc
memset
smalloc
memset
}
dup_game{
smalloc
smalloc
memcpy
smalloc
memcpy
}
free_game{
sfree
sfree
sfree
}
solve_game{
dupstr
}
game_can_format_as_text_now{
}
game_text_format{
}
compute_active{
smalloc
memset
newtree234
add234
new_xyd
delpos234
sfree
add234
new_xyd
count234
__assert_fail
freetree234
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
slide_row_int{
}
slide_col_int{
}
slide_row{
slide_row_int
}
slide_col{
slide_col_int
}
game_changed_state{
}
interpret_move{
c2pos
c2diff
pos2c
sprintf
sprintf
dupstr
}
execute_move{
sscanf
strlen
dup_game
free_game
dup_game
slide_col
slide_row
compute_active
sfree
}
game_new_drawstate{
smalloc
smalloc
memset
}
game_free_drawstate{
sfree
sfree
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
frontend_default_colour
}
draw_filled_line{
draw_line
draw_line
draw_line
draw_line
draw_line
}
draw_rect_coords{
draw_rect
}
draw_barrier_corner{
draw_rect_coords
draw_rect_coords
draw_rect_coords
}
draw_barrier{
draw_rect
draw_rect
}
draw_tile{
draw_rect
draw_rect
draw_filled_line
draw_line
draw_polygon
draw_rect_coords
draw_rect_coords
draw_rect_coords
draw_update
}
draw_tile_barriers{
draw_barrier_corner
draw_barrier
draw_update
}
draw_arrow{
draw_polygon
}
draw_arrow_for_cursor{
draw_arrow
draw_arrow
draw_arrow
draw_arrow
__assert_fail
draw_update
}
game_redraw{
draw_rect
draw_update
draw_barrier_corner
draw_barrier_corner
draw_barrier
draw_barrier_corner
draw_barrier_corner
draw_barrier
draw_barrier_corner
draw_barrier_corner
draw_barrier
draw_barrier_corner
draw_barrier_corner
draw_barrier
draw_arrow
draw_arrow
draw_arrow
draw_arrow
__assert_fail
draw_arrow_for_cursor
draw_arrow_for_cursor
compute_active
compute_active
clip
draw_tile
draw_tile
draw_tile
draw_tile
draw_tile
draw_tile_barriers
unclip
sprintf
sprintf
sprintf
strlen
sprintf
strlen
status_bar
sfree
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
}
game_print{
}
default_params{
smalloc
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
__assert_fail
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
atoi
strchr
}
validate_params{
}
bitcount16{
}
setcmp{
}
ss_new{
smalloc
newtree234
}
setmunge{
abs
abs
}
ss_add_todo{
}
ss_add{
__assert_fail
smalloc
add234
sfree
ss_add_todo
}
ss_remove{
del234
sfree
}
ss_overlap{
findrelpos234
index234
setmunge
srealloc
srealloc
}
ss_todo{
}
std_add{
}
known_squares{
__assert_fail
std_add
}
minesolve{
ss_new
smalloc
std_add
ss_add
ss_overlap
setmunge
ss_add
ss_remove
sfree
ss_todo
bitcount16
known_squares
ss_overlap
setmunge
setmunge
bitcount16
bitcount16
known_squares
known_squares
__assert_fail
ss_add
__assert_fail
ss_add
sfree
__assert_fail
known_squares
count234
index234
setmunge
bitcount16
setmunge
known_squares
__assert_fail
bitcount16
count234
index234
random_upto
count234
__assert_fail
std_add
ss_overlap
ss_add_todo
sfree
sfree
sfree
delpos234
sfree
freetree234
sfree
sfree
}
mineopen{
__assert_fail
}
squarecmp{
}
mineperturb{
smalloc
abs
abs
random_bits
qsort
__assert_fail
__assert_fail
smalloc
smalloc
smalloc
smalloc
__assert_fail
smalloc
__assert_fail
__assert_fail
__assert_fail
random_upto
smalloc
sfree
sfree
smalloc
__assert_fail
sfree
__assert_fail
sfree
sfree
__assert_fail
}
minegen{
smalloc
memset
smalloc
abs
abs
random_upto
sfree
smalloc
memset
mineopen
__assert_fail
minesolve
sfree
}
describe_layout{
smalloc
memset
obfuscate_bitmap
smalloc
sprintf
sfree
}
new_mine_layout{
minegen
describe_layout
}
new_game_desc{
random_upto
random_upto
new_mine_layout
sfree
random_state_encode
smalloc
strlen
sprintf
sfree
}
validate_desc{
__ctype_b_loc
__ctype_b_loc
__ctype_b_loc
atoi
__ctype_b_loc
__ctype_b_loc
atoi
__ctype_b_loc
strlen
}
open_square{
new_mine_layout
__ctype_b_loc
__ctype_b_loc
__assert_fail
midend_supersede_game_desc
sfree
random_free
__assert_fail
__assert_fail
}
new_game{
smalloc
smalloc
memset
smalloc
memset
atoi
__ctype_b_loc
random_state_decode
smalloc
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
smalloc
memset
__assert_fail
obfuscate_bitmap
memset
open_square
sfree
}
dup_game{
smalloc
smalloc
memcpy
}
free_game{
sfree
random_free
sfree
sfree
sfree
}
solve_game{
dupstr
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
sprintf
strcat
dupstr
}
decode_ui{
sscanf
}
game_changed_state{
}
interpret_move{
move_cursor
sprintf
dupstr
sprintf
dupstr
sprintf
dupstr
sprintf
dupstr
sprintf
sprintf
dupstr
}
execute_move{
strcmp
dup_game
dup_game
sscanf
sscanf
open_square
sscanf
open_square
free_game
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
frontend_default_colour
}
game_new_drawstate{
smalloc
smalloc
memset
}
game_free_drawstate{
sfree
sfree
}
draw_tile{
draw_rect
draw_line
draw_line
draw_polygon
draw_polygon
draw_rect
draw_polygon
draw_polygon
draw_text
draw_rect
draw_line
draw_line
draw_text
draw_circle
draw_rect
draw_rect
draw_rect
draw_line
draw_line
draw_update
}
game_redraw{
draw_rect
draw_update
draw_polygon
draw_polygon
abs
abs
draw_tile
sprintf
sprintf
sprintf
sprintf
sprintf
strlen
sprintf
strlen
sprintf
strlen
status_bar
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
}
game_print{
}
string{
__builtin_va_start
vsprintf
smalloc
__builtin_va_end
fatal
}
default_params{
memcpy
smalloc
}
game_fetch_preset{
memcpy
smalloc
string
}
free_params{
sfree
}
dup_params{
memcpy
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
}
encode_params{
string
}
game_configure{
smalloc
string
string
string
}
custom_params{
smalloc
atoi
atoi
atoi
}
validate_params{
__assert_fail
}
connect{
dsf_merge
}
connected{
dsf_canonify
dsf_canonify
}
disconnect{
}
disconnected{
__assert_fail
}
maybe{
__assert_fail
disconnected
connected
}
solver_connected_clues_versus_region_size{
disconnected
disconnect
}
solver_number_exhausted{
maybe
connect
disconnected
connected
maybe
disconnect
}
solver_not_too_big{
dsf_size
maybe
dsf_size
disconnect
}
solver_not_too_small{
smalloc
memset
dsf_canonify
dsf_size
maybe
dsf_canonify
dsf_canonify
dsf_canonify
connect
sfree
}
solver_no_dangling_edges{
connected
__assert_fail
disconnect
__assert_fail
__assert_fail
disconnect
disconnect
}
solver_equivalent_edges{
disconnected
connected
maybe
maybe
connected
connect
connect
disconnect
disconnect
}
dfs_dsf{
dsf_merge
dfs_dsf
}
is_solved{
snew_dsf
__assert_fail
dfs_dsf
dsf_size
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
sfree
sfree
}
solver{
snew_dsf
solver_connected_clues_versus_region_size
solver_number_exhausted
solver_not_too_big
solver_not_too_small
solver_no_dangling_edges
solver_equivalent_edges
sfree
is_solved
}
init_borders{
memset
}
new_game_desc{
smalloc
smalloc
smalloc
smalloc
smalloc
shuffle
init_borders
__assert_fail
memset
sfree
divvy_rectangle
dsf_canonify
dsf_canonify
memcpy
solver
memcpy
solver
sfree
sfree
sfree
sfree
srealloc
}
validate_desc{
__ctype_b_loc
__ctype_b_loc
__ctype_b_loc
__assert_fail
__ctype_b_loc
}
new_game{
smalloc
smalloc
smalloc
memset
__ctype_b_loc
__ctype_b_loc
smalloc
init_borders
}
dup_game{
smalloc
memcpy
smalloc
}
free_game{
sfree
sfree
sfree
sfree
}
solve_game{
dupstr
smalloc
init_borders
solver
sfree
}
game_can_format_as_text_now{
}
game_text_format{
memset
smalloc
smalloc
memset
memcpy
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
__assert_fail
}
game_changed_state{
}
interpret_move{
string
string
move_cursor
string
move_cursor
}
execute_move{
dup_game
sscanf
is_solved
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
game_mkhighlight
}
game_new_drawstate{
smalloc
}
game_free_drawstate{
sfree
sfree
}
draw_tile{
clip
draw_rect
draw_rect_corners
draw_text
draw_rect
draw_rect
draw_rect
draw_rect
unclip
draw_update
}
game_redraw{
snew_dsf
snew_dsf
draw_rect
draw_rect
draw_update
smalloc
memset
sprintf
status_bar
dfs_dsf
dfs_dsf
dsf_size
dsf_size
dsf_canonify
dsf_canonify
dsf_size
dsf_size
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
dsf_size
dsf_canonify
dsf_canonify
draw_tile
sfree
sfree
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
__assert_fail
}
game_print_size{
game_compute_size
}
print_line{
draw_circle
draw_line
}
game_print{
print_mono_colour
draw_text
print_line
print_line
print_line
print_line
draw_circle
}
tdq_new{
smalloc
smalloc
smalloc
}
tdq_free{
sfree
sfree
sfree
}
tdq_add{
__assert_fail
}
tdq_remove{
}
tdq_fill{
tdq_add
}
xyd_cmp{
}
xyd_cmp_nc{
xyd_cmp
}
new_xyd{
smalloc
}
default_params{
smalloc
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atof
__ctype_b_loc
}
encode_params{
sprintf
sprintf
__assert_fail
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
atof
}
validate_params{
}
todo_new{
smalloc
smalloc
memset
smalloc
}
todo_free{
sfree
sfree
sfree
}
todo_add{
}
todo_get{
}
net_solver{
smalloc
smalloc
memset
smalloc
snew_dsf
todo_new
todo_get
todo_add
todo_get
dsf_canonify
dsf_canonify
dsf_merge
todo_add
todo_add
todo_add
__assert_fail
todo_free
sfree
sfree
sfree
sfree
}
perturb{
srealloc
abs
abs
abs
abs
smalloc
memcpy
shuffle
abs
abs
sfree
sfree
srealloc
__assert_fail
__assert_fail
random_upto
sfree
sfree
qsort
__assert_fail
sfree
}
new_game_desc{
smalloc
smalloc
memset
memset
newtree234
add234
new_xyd
add234
new_xyd
add234
new_xyd
add234
new_xyd
count234
random_upto
count234
delpos234
sfree
__assert_fail
find234
del234
sfree
find234
del234
sfree
add234
new_xyd
count234
__assert_fail
freetree234
net_solver
perturb
perturb
perturb
perturb
newtree234
add234
new_xyd
add234
new_xyd
smalloc
random_upto
compute_loops_inner
random_upto
sfree
count234
count234
__assert_fail
random_upto
count234
delpos234
__assert_fail
sfree
delpos234
sfree
freetree234
smalloc
__assert_fail
sfree
sfree
}
validate_desc{
}
new_game{
__assert_fail
__assert_fail
smalloc
smalloc
smalloc
memset
smalloc
memset
}
dup_game{
smalloc
smalloc
memcpy
}
free_game{
sfree
sfree
sfree
sfree
}
solve_game{
smalloc
memcpy
net_solver
sfree
smalloc
sprintf
__assert_fail
sprintf
sprintf
srealloc
memcpy
__assert_fail
srealloc
sfree
}
game_can_format_as_text_now{
}
game_text_format{
}
compute_active{
smalloc
memset
newtree234
add234
new_xyd
delpos234
sfree
add234
new_xyd
count234
__assert_fail
freetree234
}
net_neighbour{
}
compute_loops_inner{
findloop_new_state
findloop_run
smalloc
findloop_is_loop_edge
findloop_free_state
}
compute_loops{
compute_loops_inner
}
new_ui{
smalloc
get_random_seed
random_new
sfree
}
free_ui{
random_free
sfree
}
encode_ui{
sprintf
dupstr
}
decode_ui{
sscanf
}
game_changed_state{
}
interpret_move{
sprintf
dupstr
sprintf
dupstr
smalloc
random_upto
sprintf
__assert_fail
srealloc
__assert_fail
}
execute_move{
dup_game
sscanf
__assert_fail
free_game
free_game
compute_active
sfree
}
game_new_drawstate{
smalloc
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
frontend_default_colour
}
rotated_coords{
}
draw_wires{
rotated_coords
draw_polygon
}
draw_tile{
clip
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
cos
sin
draw_wires
draw_wires
draw_wires
rotated_coords
draw_polygon
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
unclip
draw_update
}
game_redraw{
game_compute_size
draw_rect
draw_update
compute_active
compute_loops
draw_tile
sprintf
sprintf
sprintf
status_bar
sfree
sfree
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
draw_diagram{
draw_rect
draw_rect
}
game_print{
print_mono_colour
game_set_size
print_line_width
draw_rect_outline
print_line_width
draw_line
draw_line
draw_rect
draw_rect
draw_diagram
draw_diagram
}
default_params{
smalloc
}
game_fetch_preset{
smalloc
strcpy
sprintf
strlen
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
strcmp
}
encode_params{
sprintf
__assert_fail
strcat
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
movecmp{
}
movecmpcost{
movecmp
}
update_moves{
abs
abs
__assert_fail
find234
del234
del234
sfree
smalloc
add234
add234
__assert_fail
del234
del234
sfree
}
pegs_genmoves{
newtree234
newtree234
update_moves
findrelpos234
random_upto
index234
update_moves
delpos234
del234
sfree
freetree234
freetree234
}
pegs_generate{
memset
pegs_genmoves
}
new_game_desc{
smalloc
pegs_generate
abs
abs
abs
abs
random_upto
random_upto
random_upto
random_upto
random_upto
random_upto
random_upto
random_upto
smalloc
sfree
}
validate_desc{
strlen
strspn
}
new_game{
smalloc
smalloc
}
dup_game{
smalloc
smalloc
memcpy
}
free_game{
sfree
sfree
}
solve_game{
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
}
new_ui{
smalloc
__assert_fail
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
interpret_move{
__assert_fail
abs
abs
abs
abs
abs
abs
abs
abs
sprintf
dupstr
move_cursor
__assert_fail
sprintf
dupstr
}
execute_move{
sscanf
abs
abs
abs
abs
abs
abs
abs
abs
dup_game
}
game_compute_size{
}
game_set_size{
__assert_fail
__assert_fail
blitter_new
}
game_colours{
smalloc
game_mkhighlight
}
game_new_drawstate{
smalloc
smalloc
memset
}
game_free_drawstate{
blitter_free
sfree
sfree
}
draw_tile{
draw_rect
__assert_fail
draw_circle
draw_circle
draw_circle
draw_update
}
game_redraw{
__assert_fail
blitter_load
draw_update
draw_rect
draw_polygon
draw_polygon
draw_rect
draw_rect
draw_polygon
draw_rect
draw_update
draw_tile
blitter_save
draw_tile
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
}
game_print{
}
default_params{
smalloc
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
__assert_fail
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
float_compare{
}
generate{
smalloc
random_upto
smalloc
sfree
smalloc
memcpy
qsort
random_upto
sfree
sfree
}
compute_rowdata{
}
do_recurse{
do_recurse
}
do_row{
memset
memset
do_recurse
}
solve_puzzle{
__assert_fail
memset
memcpy
compute_rowdata
memcpy
compute_rowdata
memcpy
compute_rowdata
do_row
memcpy
compute_rowdata
do_row
}
generate_soluble{
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
generate
solve_puzzle
sfree
sfree
sfree
sfree
sfree
}
new_game_desc{
generate_soluble
smalloc
smalloc
compute_rowdata
compute_rowdata
sprintf
smalloc
compute_rowdata
compute_rowdata
sprintf
__assert_fail
__assert_fail
sfree
sfree
}
validate_desc{
__ctype_b_loc
__ctype_b_loc
atoi
__builtin_constant_p
__ctype_tolower_loc
tolower
__ctype_tolower_loc
}
new_game{
smalloc
smalloc
smalloc
memset
smalloc
memset
smalloc
smalloc
__ctype_b_loc
__ctype_b_loc
atoi
__ctype_b_loc
__builtin_constant_p
__ctype_tolower_loc
tolower
__ctype_tolower_loc
}
dup_game{
smalloc
smalloc
memcpy
}
free_game{
sfree
sfree
sfree
sfree
sfree
sfree
}
solve_game{
dupstr
smalloc
smalloc
smalloc
smalloc
smalloc
solve_puzzle
sfree
sfree
sfree
sfree
sfree
smalloc
__assert_fail
sfree
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
sprintf
sprintf
smalloc
sprintf
memcpy
memcpy
sfree
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
interpret_move{
abs
abs
sprintf
dupstr
move_cursor
sprintf
abs
abs
dupstr
sprintf
dupstr
}
execute_move{
strlen
dup_game
sscanf
dup_game
smalloc
compute_rowdata
memcmp
compute_rowdata
memcmp
sfree
}
errcheck_found_run{
}
check_errors{
errcheck_found_run
errcheck_found_run
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
frontend_default_colour
}
game_new_drawstate{
smalloc
smalloc
memset
smalloc
memset
}
game_free_drawstate{
sfree
sfree
}
grid_square{
draw_rect
draw_rect
draw_rect_outline
draw_rect_outline
draw_update
}
draw_numbers{
draw_rect
draw_rect
__assert_fail
sprintf
draw_text
draw_update
draw_update
}
game_redraw{
draw_rect
draw_rect
draw_update
grid_square
check_errors
draw_numbers
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
game_set_size
print_line_width
draw_rect_outline
print_line_width
draw_line
print_line_width
draw_line
draw_numbers
print_line_width
draw_rect
draw_circle
}
default_params{
smalloc
}
game_fetch_preset{
default_params
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strlen
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
pearl_solve{
smalloc
smalloc
smalloc
dsf_init
dsf_canonify
dsf_canonify
dsf_merge
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
__assert_fail
sfree
sfree
sfree
__assert_fail
}
pearl_loopgen_bias{
tdq_add
tdq_remove
tdq_add
tdq_remove
tdq_add
tdq_add
tdq_remove
tdq_add
tdq_add
tdq_add
tdq_add
tdq_add
tdq_remove
}
pearl_loopgen{
grid_new
smalloc
memset
smalloc
tdq_new
tdq_fill
memset
smalloc
memset
tdq_new
tdq_fill
smalloc
memset
smalloc
smalloc
tdq_new
tdq_fill
smalloc
memset
tdq_new
tdq_fill
generate_loop
sfree
tdq_free
sfree
tdq_free
sfree
sfree
sfree
tdq_free
sfree
tdq_free
__assert_fail
__assert_fail
__assert_fail
__assert_fail
__assert_fail
grid_free
sfree
}
new_clues{
pearl_loopgen
__assert_fail
__assert_fail
pearl_solve
__assert_fail
pearl_solve
__assert_fail
smalloc
shuffle
shuffle
pearl_solve
__assert_fail
sfree
}
new_game_desc{
smalloc
smalloc
new_clues
smalloc
smalloc
sfree
sfree
}
validate_desc{
}
new_game{
smalloc
smalloc
smalloc
__assert_fail
__assert_fail
smalloc
smalloc
smalloc
}
dup_game{
smalloc
smalloc
smalloc
smalloc
}
free_game{
__assert_fail
sfree
sfree
sfree
sfree
sfree
sfree
}
dsf_update_completion{
__assert_fail
__assert_fail
dsf_merge
}
check_completion{
snew_dsf
dsf_update_completion
dsf_update_completion
smalloc
dsf_canonify
dsf_canonify
dsf_size
dsf_size
dsf_canonify
sfree
sfree
}
solve_for_diff{
smalloc
sprintf
srealloc
}
solve_game{
dup_game
pearl_solve
pearl_solve
solve_for_diff
free_game
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
__assert_fail
memset
memset
}
new_ui{
smalloc
smalloc
}
free_ui{
sfree
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
get_gui_style{
getenv
}
update_ui_drag{
}
interpret_ui_drag{
}
mark_in_direction{
sprintf
dupstr
}
interpret_move{
get_gui_style
get_gui_style
get_gui_style
get_gui_style
update_ui_drag
mark_in_direction
move_cursor
move_cursor
update_ui_drag
get_gui_style
get_gui_style
interpret_ui_drag
smalloc
sprintf
srealloc
strcpy
get_gui_style
get_gui_style
get_gui_style
get_gui_style
get_gui_style
get_gui_style
abs
abs
abs
abs
abs
abs
mark_in_direction
dupstr
}
execute_move{
dup_game
sscanf
strcmp
pearl_solve
check_completion
free_game
}
game_compute_size{
get_gui_style
get_gui_style
}
game_set_size{
}
game_colours{
smalloc
game_mkhighlight
}
game_new_drawstate{
smalloc
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
sfree
}
draw_lines_specific{
get_gui_style
get_gui_style
abs
abs
draw_rect
abs
abs
draw_rect
}
draw_square{
get_gui_style
get_gui_style
__assert_fail
clip
draw_rect
get_gui_style
draw_circle
draw_line
get_gui_style
draw_line
get_gui_style
draw_line
draw_line
get_gui_style
draw_line
draw_lines_specific
draw_lines_specific
draw_lines_specific
draw_lines_specific
draw_circle
draw_circle
unclip
draw_update
}
game_redraw{
draw_rect
get_gui_style
get_gui_style
get_gui_style
draw_rect
get_gui_style
get_gui_style
draw_update
get_gui_style
get_gui_style
memset
interpret_ui_drag
draw_square
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
print_mono_colour
game_new_drawstate
game_set_size
draw_line
get_gui_style
get_gui_style
get_gui_style
get_gui_style
draw_line
get_gui_style
get_gui_style
get_gui_style
get_gui_style
get_gui_style
get_gui_style
draw_lines_specific
draw_circle
game_free_drawstate
}
npoints{
}
default_params{
smalloc
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
atoi
}
validate_params{
}
gen_grid{
smalloc
smalloc
random_upto
__assert_fail
random_upto
memcpy
random_upto
random_upto
__assert_fail
__assert_fail
__assert_fail
__assert_fail
__assert_fail
memcpy
sfree
sfree
}
gen_grid_random{
random_upto
random_upto
}
new_game_desc{
smalloc
gen_grid
gen_grid_random
sprintf
srealloc
strcpy
sfree
}
validate_desc{
__ctype_b_loc
__ctype_b_loc
atoi
}
new_game{
smalloc
smalloc
__assert_fail
atoi
}
dup_game{
smalloc
smalloc
memcpy
}
free_game{
sfree
sfree
}
solve_game{
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
__assert_fail
}
new_ui{
smalloc
smalloc
memset
}
free_ui{
sfree
sfree
}
encode_ui{
}
decode_ui{
}
sel_clear{
}
game_changed_state{
sel_clear
}
sel_movedesc{
smalloc
sprintf
strlen
strlen
srealloc
strcpy
strlen
__assert_fail
srealloc
}
sel_expand{
sel_clear
}
sg_emptycol{
}
sg_snuggle{
sg_emptycol
sg_emptycol
}
sg_check{
}
interpret_move{
sel_clear
sel_movedesc
sel_clear
sel_expand
}
execute_move{
dup_game
atoi
free_game
__ctype_b_loc
npoints
sg_snuggle
sg_check
}
game_set_size{
}
game_compute_size{
game_set_size
}
game_colours{
smalloc
frontend_default_colour
}
game_new_drawstate{
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
}
tile_redraw{
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_line
draw_line
draw_line
draw_line
draw_update
}
game_redraw{
draw_rect
draw_update
draw_polygon
draw_polygon
tile_redraw
sprintf
sprintf
sprintf
sprintf
npoints
sprintf
status_bar
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
}
game_print{
}
nfmtstr{
smalloc
__builtin_va_start
vsprintf
__builtin_va_end
}
default_params{
smalloc
}
dup_params{
smalloc
}
game_fetch_preset{
default_params
nfmtstr
}
free_params{
sfree
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
dupstr
}
game_configure{
smalloc
nfmtstr
nfmtstr
}
custom_params{
smalloc
atoi
atoi
}
dup_game{
smalloc
smalloc
memcpy
}
free_game{
sfree
sfree
}
solve_game{
smalloc
solve_internal
smalloc
sprintf
sfree
}
solve_internal{
find_clues
dup_game
do_solve
free_game
sfree
}
do_solve{
}
runlength{
}
solver_makemove{
}
solver_reasoning_adjacency{
solver_makemove
}
solver_reasoning_connectedness{
smalloc
smalloc
dfs_biconnect_visit
sfree
sfree
}
dfs_biconnect_visit{
dfs_biconnect_visit
solver_makemove
solver_makemove
}
solver_reasoning_not_too_big{
runlength
solver_makemove
solver_makemove
solver_makemove
solver_makemove
}
solver_reasoning_recursion{
dup_game
do_solve
free_game
solver_makemove
}
find_clues{
smalloc
srealloc
}
new_game_desc{
smalloc
smalloc
shuffle
newdesc_choose_black_squares
newdesc_compute_clues
shuffle
newdesc_strip_clues
newdesc_encode_game_description
sfree
sfree
}
newdesc_choose_black_squares{
dfs_count_white
}
newdesc_compute_clues{
}
newdesc_strip_clues{
smalloc
__assert_fail
__assert_fail
__assert_fail
__assert_fail
__assert_fail
__assert_fail
__assert_fail
dup_game
solve_internal
free_game
dup_game
solve_internal
free_game
sfree
}
dfs_count_rec{
dfs_count_rec
dfs_count_rec
dfs_count_rec
dfs_count_rec
}
dfs_count_white{
dfs_count_rec
}
validate_params{
}
newdesc_encode_game_description{
srealloc
sprintf
}
validate_desc{
atoi
}
new_game{
smalloc
smalloc
atoi
__assert_fail
__assert_fail
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
memset
smalloc
memcpy
sprintf
memset
sprintf
memcpy
__assert_fail
sfree
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
interpret_move{
getenv
__assert_fail
nfmtstr
nfmtstr
nfmtstr
nfmtstr
smalloc
solve_internal
nfmtstr
sfree
nfmtstr
nfmtstr
nfmtstr
nfmtstr
nfmtstr
nfmtstr
}
find_errors{
dup_game
runlength
runlength
snew_dsf
dsf_merge
dsf_merge
dsf_size
sfree
dsf_size
dsf_canonify
dsf_canonify
sfree
free_game
free_game
}
execute_move{
__assert_fail
dup_game
sscanf
find_errors
free_game
}
game_changed_state{
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
game_mkhighlight
}
makecell{
}
game_new_drawstate{
smalloc
smalloc
makecell
}
game_free_drawstate{
sfree
sfree
}
cell_eq{
}
game_redraw{
smalloc
memset
find_errors
__assert_fail
draw_rect
draw_update
makecell
cell_eq
draw_cell
sfree
}
draw_cell{
draw_rect_outline
draw_rect
draw_rect_outline
draw_rect
nfmtstr
draw_text
sfree
draw_update
}
game_timing_state{
puts
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
draw_cell
makecell
print_line_width
draw_rect_outline
}
default_params{
smalloc
}
game_fetch_preset{
sprintf
dupstr
smalloc
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strlen
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
atoi
}
validate_params{
}
perm_parity{
}
new_game_desc{
smalloc
smalloc
random_upto
random_upto
abs
abs
abs
sfree
smalloc
random_upto
__assert_fail
__assert_fail
__assert_fail
__assert_fail
perm_parity
perm_parity
__assert_fail
sfree
sprintf
srealloc
strcpy
sfree
}
validate_desc{
smalloc
atoi
sfree
}
new_game{
smalloc
smalloc
__assert_fail
atoi
__assert_fail
}
dup_game{
smalloc
smalloc
memcpy
}
free_game{
sfree
sfree
}
solve_game{
dupstr
}
game_can_format_as_text_now{
}
game_text_format{
sprintf
smalloc
sprintf
memcpy
__assert_fail
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
interpret_move{
move_cursor
move_cursor
sprintf
sprintf
sprintf
sprintf
dupstr
move_cursor
sprintf
sprintf
dupstr
}
execute_move{
strcmp
dup_game
sscanf
sscanf
dup_game
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
game_mkhighlight
}
game_new_drawstate{
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
}
draw_tile{
draw_rect
draw_polygon
draw_polygon
draw_rect
sprintf
draw_text
draw_update
}
draw_arrow{
draw_polygon
}
draw_arrow_for_cursor{
draw_arrow
draw_arrow
draw_arrow
draw_arrow
draw_update
}
game_redraw{
draw_rect
draw_update
draw_polygon
draw_polygon
draw_arrow
draw_arrow
draw_arrow
draw_arrow
draw_arrow_for_cursor
draw_arrow_for_cursor
clip
__assert_fail
__assert_fail
abs
__assert_fail
abs
__assert_fail
draw_tile
draw_tile
unclip
sprintf
sprintf
sprintf
strlen
status_bar
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
}
game_print{
}
default_params{
smalloc
}
game_fetch_preset{
sprintf
dupstr
smalloc
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atof
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strlen
strcat
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
atof
}
validate_params{
}
remove_rect_placement{
__assert_fail
}
remove_number_placement{
}
rect_solver{
smalloc
srealloc
smalloc
memset
smalloc
__assert_fail
smalloc
remove_rect_placement
remove_rect_placement
srealloc
random_upto
sfree
remove_number_placement
sfree
sfree
sfree
sfree
sfree
}
enum_rects{
abs
__assert_fail
}
place_rect{
}
find_rect{
}
new_game_desc{
smalloc
smalloc
random_upto
__assert_fail
enum_rects
random_upto
enum_rects
place_rect
sfree
find_rect
find_rect
find_rect
find_rect
memset
memset
random_upto
__assert_fail
find_rect
__assert_fail
find_rect
__assert_fail
find_rect
__assert_fail
find_rect
__assert_fail
place_rect
place_rect
__assert_fail
__assert_fail
find_rect
__assert_fail
__assert_fail
__assert_fail
__assert_fail
place_rect
smalloc
smalloc
smalloc
random_upto
random_upto
sfree
sfree
sfree
smalloc
sfree
smalloc
find_rect
smalloc
__assert_fail
rect_solver
smalloc
random_upto
sfree
sfree
sfree
smalloc
__assert_fail
smalloc
sprintf
sfree
sfree
}
validate_desc{
}
get_correct{
smalloc
memset
}
new_game{
smalloc
smalloc
smalloc
smalloc
__assert_fail
__assert_fail
atoi
__assert_fail
__assert_fail
get_correct
}
dup_game{
smalloc
smalloc
smalloc
smalloc
smalloc
memcpy
memcpy
memcpy
memcpy
}
free_game{
sfree
sfree
sfree
sfree
sfree
}
solve_game{
dupstr
smalloc
smalloc
__assert_fail
smalloc
smalloc
memset
memset
rect_solver
sfree
sfree
smalloc
__assert_fail
sfree
sfree
}
game_can_format_as_text_now{
}
game_text_format{
sprintf
smalloc
sprintf
sprintf
memcpy
__assert_fail
}
reset_ui{
}
new_ui{
smalloc
reset_ui
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
coord_round{
floor
floor
floor
floor
fabs
fabs
fabs
fabs
floor
floor
}
grid_draw_rect{
}
ui_draw_rect{
grid_draw_rect
}
game_changed_state{
}
interpret_move{
coord_round
reset_ui
__assert_fail
move_cursor
coord_round
__assert_fail
coord_round
__assert_fail
reset_ui
ui_draw_rect
sprintf
dupstr
sprintf
dupstr
sprintf
dupstr
reset_ui
}
execute_move{
dup_game
sfree
get_correct
sscanf
sscanf
dup_game
grid_draw_rect
sfree
get_correct
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
frontend_default_colour
}
game_new_drawstate{
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
}
draw_tile{
draw_rect
draw_rect
sprintf
draw_text
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_update
}
game_redraw{
smalloc
smalloc
memcpy
memcpy
ui_draw_rect
smalloc
memset
draw_rect
draw_rect
draw_update
draw_tile
sprintf
strcat
strcat
status_bar
sfree
sfree
sfree
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
game_set_size
print_line_width
draw_rect_outline
print_line_width
draw_line
draw_line
print_line_width
draw_line
draw_line
sprintf
draw_text
}
whichdir{
abs
abs
abs
abs
}
whichdiri{
whichdir
}
ispointing{
}
ispointingi{
ispointing
}
move_couldfit{
__assert_fail
dsf_size
}
isvalidmove{
ispointing
dsf_canonify
dsf_canonify
move_couldfit
move_couldfit
}
makelink{
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
__assert_fail
}
debug_state{
}
strip_nums{
memset
memset
memset
dsf_init
}
check_nums{
__assert_fail
__assert_fail
__assert_fail
}
default_params{
smalloc
}
game_fetch_preset{
default_params
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
blank_game_into{
memset
memset
memset
memset
memset
memset
}
blank_game{
smalloc
memset
smalloc
smalloc
smalloc
smalloc
smalloc
snew_dsf
smalloc
blank_game_into
}
dup_game_to{
memcpy
memcpy
memcpy
memcpy
memcpy
memcpy
memcpy
}
dup_game{
blank_game
dup_game_to
}
free_game{
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
unpick_desc{
blank_game
__ctype_b_loc
free_game
free_game
}
generate_desc{
srealloc
sprintf
sprintf
srealloc
strcpy
}
cell_adj{
}
new_game_fill{
smalloc
smalloc
memset
__assert_fail
cell_adj
random_upto
cell_adj
cell_adj
random_upto
cell_adj
whichdiri
sfree
sfree
}
debug_desc{
}
new_game_strip{
dup_game
strip_nums
debug_desc
solve_state
free_game
smalloc
shuffle
__assert_fail
debug_state
strip_nums
solve_state
check_nums
__assert_fail
dup_game_to
strip_nums
solve_state
check_nums
__assert_fail
__assert_fail
sfree
free_game
}
new_game_desc{
blank_game
dupstr
blank_game_into
random_upto
random_upto
new_game_fill
debug_state
__assert_fail
__assert_fail
new_game_strip
strip_nums
dup_game
solve_state
__assert_fail
free_game
generate_desc
free_game
}
validate_desc{
unpick_desc
}
head_number{
__assert_fail
dsf_size
__assert_fail
dsf_size
__assert_fail
}
connect_numbers{
dsf_init
__assert_fail
dsf_canonify
dsf_canonify
dsf_merge
}
compare_heads{
}
lowest_start{
__assert_fail
}
update_numbers{
smalloc
__assert_fail
__assert_fail
connect_numbers
head_number
qsort
lowest_start
__assert_fail
lowest_start
__assert_fail
sfree
}
check_completion{
ispointingi
makelink
}
new_game{
unpick_desc
__assert_fail
update_numbers
check_completion
}
solve_single{
memset
isvalidmove
makelink
makelink
}
solve_state{
dup_game
smalloc
debug_state
update_numbers
solve_single
dup_game_to
free_game
sfree
update_numbers
check_completion
debug_state
}
solve_game{
dup_game
solve_state
generate_desc
free_game
dup_game
solve_state
generate_desc
free_game
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
interpret_move{
move_cursor
isvalidmove
sprintf
isvalidmove
sprintf
dupstr
__assert_fail
sprintf
dupstr
isvalidmove
sprintf
isvalidmove
sprintf
dupstr
sprintf
dupstr
}
unlink_cell{
}
execute_move{
validate_desc
dup_game
new_game
free_game
sscanf
isvalidmove
dup_game
makelink
sscanf
dup_game
unlink_cell
unlink_cell
strcmp
dup_game
solve_state
update_numbers
check_completion
}
game_compute_size{
}
game_set_size{
__assert_fail
__assert_fail
blitter_new
}
game_colours{
smalloc
game_mkhighlight
}
game_new_drawstate{
smalloc
smalloc
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
sfree
blitter_free
sfree
}
draw_arrow{
sin
cos
draw_polygon
}
draw_arrow_dir{
draw_arrow
}
draw_star{
__assert_fail
smalloc
sin
cos
draw_polygon
sfree
}
num2col{
}
tile_redraw{
num2col
draw_rect
draw_star
draw_arrow_dir
draw_rect_corners
draw_circle
sprintf
sprintf
strlen
sprintf
strlen
strlen
draw_text
draw_rect_outline
draw_update
}
draw_drag_indicator{
abs
abs
atan
draw_arrow
}
game_redraw{
__assert_fail
blitter_load
draw_update
interpret_move
strcmp
execute_move
sfree
draw_rect
draw_rect_outline
draw_update
ispointing
ispointing
whichdir
getenv
tile_redraw
blitter_save
draw_drag_indicator
free_game
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
print_line_width
draw_line
draw_line
print_line_width
draw_rect_outline
print_line_width
tile_redraw
}
default_params{
smalloc
}
game_fetch_preset{
default_params
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
blank_game{
smalloc
memset
smalloc
smalloc
memset
memset
}
dup_game{
blank_game
memcpy
memcpy
}
free_game{
sfree
sfree
sfree
}
n2c{
}
c2n{
__ctype_b_loc
}
unpick_desc{
blank_game
strlen
c2n
free_game
free_game
}
generate_desc{
smalloc
n2c
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
n2c
__assert_fail
}
debug_state{
game_text_format
sfree
}
connect_if_same{
dsf_canonify
dsf_canonify
dsf_merge
}
connect_dsf{
dsf_init
connect_if_same
connect_if_same
}
check_rowcol{
}
check_complete{
smalloc
connect_dsf
dsf_size
check_rowcol
check_rowcol
dsf_size
dsf_canonify
sfree
}
game_state_diff{
__assert_fail
srealloc
__assert_fail
sprintf
srealloc
strcpy
}
solver_state_new{
smalloc
smalloc
}
solver_state_free{
sfree
sfree
sfree
}
solver_op_add{
srealloc
}
solver_op_circle{
solver_op_add
}
solver_op_blacken{
solver_op_add
}
solver_ops_do{
solver_op_circle
solver_op_circle
solver_op_circle
solver_op_circle
solver_op_blacken
solver_op_blacken
}
solve_singlesep{
solver_op_add
solver_op_add
}
solve_doubles{
__assert_fail
solver_op_add
solver_op_add
}
solve_allblackbutone{
__assert_fail
solver_op_add
}
solve_corner{
solver_op_add
solver_op_add
solver_op_add
solver_op_add
solver_op_add
solver_op_add
}
solve_corners{
solve_corner
solve_corner
solve_corner
solve_corner
}
solve_offsetpair_pair{
__assert_fail
__assert_fail
solver_op_add
solver_op_add
}
solve_offsetpair{
solve_offsetpair_pair
solve_offsetpair_pair
solve_offsetpair_pair
solve_offsetpair_pair
}
solve_hassinglewhiteregion{
memset
__assert_fail
}
solve_removesplits_check{
solve_hassinglewhiteregion
solver_op_add
}
solve_removesplits{
solve_hassinglewhiteregion
solve_removesplits_check
solve_removesplits_check
solve_removesplits_check
solve_removesplits_check
}
solve_sneaky{
solver_op_add
}
solve_specific{
solver_state_new
solve_sneaky
solve_singlesep
solve_doubles
solve_corners
solve_offsetpair
solver_ops_do
solve_allblackbutone
solve_removesplits
solver_state_free
check_complete
}
solve_game{
dup_game
solve_specific
free_game
dup_game
solve_specific
free_game
game_state_diff
free_game
}
new_game_is_good{
memcpy
memset
__assert_fail
solve_specific
memset
solve_specific
}
best_black_col{
shuffle
__assert_fail
}
new_game_desc{
blank_game
blank_game
solver_state_new
smalloc
smalloc
smalloc
memset
latin_generate_rect
sfree
debug_state
shuffle
solver_op_add
solver_ops_do
solve_allblackbutone
solver_ops_do
solve_removesplits
solver_ops_do
debug_state
memset
memset
best_black_col
debug_state
new_game_is_good
generate_desc
free_game
free_game
solver_state_free
sfree
sfree
sfree
}
validate_desc{
unpick_desc
}
new_game{
unpick_desc
__assert_fail
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
interpret_move{
move_cursor
sprintf
dupstr
}
execute_move{
dup_game
sscanf
check_complete
free_game
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
game_mkhighlight
}
game_new_drawstate{
smalloc
smalloc
memset
}
game_free_drawstate{
sfree
sfree
}
tile_redraw{
draw_rect
draw_rect_outline
draw_circle
draw_circle
sprintf
strlen
strlen
draw_text
draw_rect_corners
draw_update
}
game_redraw{
draw_rect
draw_rect_outline
draw_update
tile_redraw
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
print_mono_colour
game_set_size
print_line_width
draw_rect
draw_rect_outline
draw_circle
sprintf
draw_text
strlen
}
default_params{
smalloc
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strlen
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
new_scratch{
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
}
free_scratch{
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
merge_vertices{
dsf_canonify
dsf_canonify
dsf_merge
dsf_canonify
}
decr_exits{
dsf_canonify
}
fill_square{
__assert_fail
dsf_canonify
merge_vertices
decr_exits
decr_exits
merge_vertices
decr_exits
decr_exits
}
vbitmap_clear{
}
slant_solve{
memset
dsf_init
dsf_init
memset
memset
dsf_canonify
dsf_canonify
fill_square
__assert_fail
dsf_canonify
dsf_canonify
dsf_merge
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
fill_square
fill_square
vbitmap_clear
vbitmap_clear
vbitmap_clear
vbitmap_clear
dsf_canonify
dsf_canonify
dsf_merge
dsf_canonify
dsf_canonify
dsf_merge
vbitmap_clear
vbitmap_clear
vbitmap_clear
vbitmap_clear
vbitmap_clear
vbitmap_clear
vbitmap_clear
vbitmap_clear
vbitmap_clear
vbitmap_clear
}
slant_generate{
memset
snew_dsf
smalloc
shuffle
dsf_canonify
dsf_canonify
dsf_canonify
dsf_canonify
__assert_fail
random_upto
fill_square
sfree
sfree
}
new_game_desc{
smalloc
smalloc
smalloc
smalloc
new_scratch
slant_generate
slant_solve
__assert_fail
shuffle
slant_solve
slant_solve
smalloc
__assert_fail
srealloc
smalloc
free_scratch
sfree
sfree
sfree
sfree
}
validate_desc{
}
new_game{
smalloc
smalloc
memset
smalloc
memset
smalloc
smalloc
smalloc
memset
__assert_fail
__assert_fail
}
dup_game{
smalloc
smalloc
memcpy
smalloc
memcpy
}
free_game{
sfree
sfree
__assert_fail
sfree
sfree
sfree
sfree
}
vertex_degree{
__assert_fail
}
slant_neighbour{
}
check_completion{
memset
findloop_new_state
findloop_run
findloop_is_loop_edge
findloop_free_state
vertex_degree
vertex_degree
}
solve_game{
new_scratch
smalloc
slant_solve
free_scratch
sfree
smalloc
sprintf
srealloc
strcpy
sfree
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
__assert_fail
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
interpret_move{
getenv
move_cursor
sprintf
dupstr
sprintf
dupstr
}
execute_move{
dup_game
sscanf
free_game
free_game
free_game
check_completion
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
game_mkhighlight
}
game_new_drawstate{
smalloc
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
sfree
}
draw_clue{
draw_circle
draw_text
}
draw_tile{
clip
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_clue
draw_clue
draw_clue
draw_clue
unclip
draw_update
}
game_redraw{
game_compute_size
draw_rect
draw_update
draw_tile
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
print_mono_colour
game_set_size
print_line_width
draw_rect_outline
print_line_width
draw_line
draw_line
print_line_width
clip
draw_line
unclip
print_line_width
draw_clue
}
default_params{
smalloc
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strlen
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
new_scratch{
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
}
free_scratch{
sfree
sfree
sfree
sfree
sfree
sfree
}
tents_solve{
memset
memcpy
__assert_fail
memset
memset
memset
}
new_game_desc{
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
new_scratch
shuffle
memset
abs
abs
__assert_fail
maxflow
tents_solve
tents_solve
smalloc
sprintf
srealloc
smalloc
sprintf
srealloc
free_scratch
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
validate_desc{
__ctype_b_loc
}
new_game{
smalloc
smalloc
smalloc
smalloc
memset
__assert_fail
__assert_fail
__assert_fail
__assert_fail
atoi
__ctype_b_loc
__assert_fail
}
dup_game{
smalloc
smalloc
memcpy
}
free_game{
sfree
sfree
sfree
sfree
}
solve_game{
dupstr
new_scratch
smalloc
tents_solve
free_scratch
sfree
smalloc
sprintf
srealloc
sfree
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
sprintf
memcpy
memcpy
memset
memset
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
drag_xform{
}
interpret_move{
abs
abs
__assert_fail
__assert_fail
smalloc
drag_xform
sprintf
srealloc
strcpy
sfree
move_cursor
sprintf
__assert_fail
dupstr
move_cursor
sprintf
dupstr
}
execute_move{
dup_game
sscanf
free_game
free_game
free_game
free_game
smalloc
smalloc
smalloc
__assert_fail
__assert_fail
__assert_fail
maxflow
sfree
sfree
sfree
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
frontend_default_colour
}
game_new_drawstate{
smalloc
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
sfree
}
find_errors{
smalloc
smalloc
dsf_init
dsf_merge
dsf_merge
dsf_canonify
dsf_canonify
dsf_init
dsf_merge
dsf_merge
dsf_canonify
dsf_canonify
sfree
}
draw_err_adj{
draw_polygon
draw_rect
draw_rect
}
draw_tile{
clip
draw_rect
draw_rect
draw_circle
draw_circle
draw_circle
draw_circle
draw_circle
draw_polygon
draw_err_adj
draw_err_adj
draw_err_adj
draw_err_adj
draw_err_adj
draw_err_adj
draw_err_adj
draw_err_adj
draw_rect_outline
unclip
draw_update
}
int_redraw{
game_compute_size
draw_rect
draw_update
print_line_width
draw_line
draw_line
smalloc
memcpy
drag_xform
find_errors
sfree
find_errors
drag_xform
draw_tile
draw_rect
sprintf
draw_text
draw_update
draw_rect
sprintf
draw_text
draw_update
sfree
}
game_redraw{
int_redraw
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
game_set_size
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
print_mono_colour
__assert_fail
int_redraw
}
find_sum_bits{
__assert_fail
__assert_fail
find_sum_bits
}
precompute_sum_bits{
find_sum_bits
__assert_fail
find_sum_bits
__assert_fail
find_sum_bits
__assert_fail
}
default_params{
smalloc
}
free_params{
sfree
}
dup_params{
smalloc
}
game_fetch_preset{
dupstr
dup_params
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strcat
strcat
strcat
strcat
strcat
strcat
strcat
strcat
strcat
strcat
strcat
strcat
strcat
strcat
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
alloc_block_structure{
smalloc
smalloc
smalloc
smalloc
smalloc
}
free_block_structure{
sfree
sfree
sfree
sfree
sfree
}
dup_block_structure{
alloc_block_structure
memcpy
memcpy
memcpy
}
split_block{
__assert_fail
__assert_fail
srealloc
srealloc
sfree
smalloc
__assert_fail
}
remove_from_block{
__assert_fail
}
solver_place{
__assert_fail
}
solver_elim{
__assert_fail
solver_place
}
solver_intersect{
}
solver_set{
memset
memset
__assert_fail
memset
}
solver_forcing{
memset
}
solver_killer_minmax{
}
solver_killer_sums{
__assert_fail
__assert_fail
}
filter_whole_cages{
memmove
__assert_fail
}
solver_new_scratch{
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
}
solver_free_scratch{
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
solver{
smalloc
dup_block_structure
alloc_block_structure
smalloc
smalloc
__assert_fail
smalloc
__assert_fail
memset
memset
smalloc
smalloc
smalloc
memset
memset
memset
smalloc
memset
smalloc
smalloc
solver_new_scratch
solver_place
solver_elim
remove_from_block
solver_place
memcpy
filter_whole_cages
__assert_fail
solver_place
__assert_fail
split_block
__assert_fail
solver_killer_minmax
solver_killer_minmax
solver_killer_sums
solver_killer_sums
solver_elim
solver_elim
solver_elim
solver_elim
solver_elim
solver_intersect
solver_intersect
solver_intersect
solver_intersect
solver_intersect
solver_intersect
solver_intersect
solver_intersect
solver_set
solver_set
solver_set
solver_set
solver_set
solver_set
solver_forcing
__assert_fail
smalloc
smalloc
smalloc
memcpy
memcpy
solver
memcpy
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
free_block_structure
free_block_structure
sfree
sfree
sfree
solver_free_scratch
}
gridgen_place{
}
gridgen_remove{
}
gridgen_real{
smalloc
shuffle
gridgen_place
gridgen_real
gridgen_remove
sfree
}
gridgen{
memset
smalloc
smalloc
smalloc
smalloc
smalloc
memset
memset
memset
memset
smalloc
memset
shuffle
gridgen_place
smalloc
random_bits
gridgen_real
sfree
sfree
sfree
sfree
sfree
sfree
}
check_killer_cage_sum{
__assert_fail
__assert_fail
}
check_valid{
smalloc
memset
sfree
memset
sfree
memset
sfree
memset
sfree
check_killer_cage_sum
sfree
memset
sfree
sfree
sfree
}
symmetries{
}
encode_solve_move{
smalloc
sprintf
__assert_fail
}
dsf_to_blocks{
dsf_canonify
__assert_fail
}
make_blocks_from_whichblock{
__assert_fail
}
encode_block_structure_desc{
}
encode_grid{
sprintf
}
grid_encode_space{
}
blocks_encode_space{
grid_encode_space
}
encode_puzzle_desc{
grid_encode_space
blocks_encode_space
blocks_encode_space
grid_encode_space
smalloc
encode_grid
encode_block_structure_desc
encode_block_structure_desc
encode_grid
__assert_fail
srealloc
}
merge_blocks{
memcpy
memcpy
}
merge_some_cages{
smalloc
random_upto
merge_blocks
sfree
sfree
}
compute_kclues{
memset
__assert_fail
}
gen_killer_cages{
alloc_block_structure
random_bits
random_bits
make_blocks_from_whichblock
__assert_fail
random_bits
merge_blocks
__assert_fail
}
new_game_desc{
precompute_sum_bits
smalloc
smalloc
smalloc
alloc_block_structure
smalloc
divvy_rectangle
dsf_to_blocks
sfree
make_blocks_from_whichblock
free_block_structure
gen_killer_cages
gridgen
check_valid
__assert_fail
sfree
encode_solve_move
memcpy
compute_kclues
memset
solver
free_block_structure
dup_block_structure
merge_some_cages
free_block_structure
dup_block_structure
merge_some_cages
free_block_structure
free_block_structure
dup_block_structure
merge_some_cages
free_block_structure
free_block_structure
compute_kclues
memset
symmetries
shuffle
memcpy
symmetries
solver
memcpy
solver
sfree
sfree
encode_puzzle_desc
sfree
free_block_structure
free_block_structure
sfree
}
spec_to_grid{
__assert_fail
__assert_fail
atoi
__assert_fail
__assert_fail
}
spec_to_dsf{
snew_dsf
sfree
sfree
dsf_merge
sfree
}
validate_grid_desc{
atoi
}
validate_block_desc{
spec_to_dsf
__assert_fail
__assert_fail
smalloc
smalloc
dsf_canonify
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
validate_desc{
validate_grid_desc
validate_block_desc
validate_block_desc
validate_grid_desc
}
new_game{
smalloc
precompute_sum_bits
smalloc
smalloc
memset
smalloc
memset
alloc_block_structure
alloc_block_structure
smalloc
spec_to_grid
__assert_fail
spec_to_dsf
__assert_fail
dsf_to_blocks
sfree
make_blocks_from_whichblock
__assert_fail
spec_to_dsf
__assert_fail
dsf_to_blocks
sfree
make_blocks_from_whichblock
__assert_fail
spec_to_grid
__assert_fail
}
dup_game{
smalloc
smalloc
memcpy
smalloc
memcpy
smalloc
memcpy
smalloc
memcpy
}
free_game{
free_block_structure
free_block_structure
sfree
sfree
sfree
sfree
sfree
}
solve_game{
dupstr
smalloc
memcpy
solver
sfree
encode_solve_move
sfree
}
grid_text_format{
smalloc
__assert_fail
}
game_can_format_as_text_now{
}
game_text_format{
__assert_fail
grid_text_format
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
interpret_move{
move_cursor
sprintf
dupstr
dupstr
}
execute_move{
dup_game
atoi
free_game
__ctype_b_loc
sscanf
dup_game
memset
check_valid
dup_game
memset
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
frontend_default_colour
}
game_new_drawstate{
smalloc
smalloc
memset
smalloc
memset
smalloc
memset
smalloc
}
game_free_drawstate{
sfree
sfree
sfree
sfree
sfree
}
draw_number{
memcmp
clip
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_polygon
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
draw_line
sprintf
draw_text
draw_text
__assert_fail
draw_text
unclip
draw_update
memcpy
}
game_redraw{
draw_rect
draw_rect
check_killer_cage_sum
draw_number
draw_update
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
outline_block_structure{
smalloc
__assert_fail
__assert_fail
__assert_fail
__assert_fail
draw_polygon
sfree
}
game_print{
print_mono_colour
game_set_size
print_line_width
draw_rect_outline
print_grey_colour
draw_rect
draw_rect
print_line_width
draw_line
print_line_width
draw_line
print_line_width
outline_block_structure
print_line_width
print_line_dotted
outline_block_structure
print_line_dotted
sprintf
draw_text
draw_text
}
solo.c:5128:5: warning: Null pointer argument in call to memory copy function
    memcpy(ds->pencil+(y*cr+x)*cr, state->pencil+(y*cr+x)*cr, cr);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1 warning generated.
default_params{
smalloc
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strlen
dupstr
}
game_configure{
smalloc
sprintf
dupstr
}
custom_params{
smalloc
atoi
}
validate_params{
}
solver_easy{
latin_solver_place
}
solver_hard{
}
solver{
smalloc
smalloc
latin_solver
sfree
sfree
}
new_game_desc{
smalloc
smalloc
smalloc
smalloc
sfree
latin_generate
memcpy
memset
solver
shuffle
memcpy
solver
shuffle
memcpy
solver
memcpy
solver
smalloc
sprintf
sprintf
srealloc
smalloc
sfree
sfree
sfree
sfree
sfree
}
validate_desc{
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
new_game{
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
memset
memset
__assert_fail
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__assert_fail
__assert_fail
__ctype_b_loc
__assert_fail
__assert_fail
__assert_fail
}
dup_game{
smalloc
smalloc
smalloc
smalloc
memcpy
memcpy
memcpy
}
free_game{
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
solve_game{
dupstr
smalloc
memcpy
solver
smalloc
sfree
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
__assert_fail
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
check_errors{
__assert_fail
}
clue_index{
}
is_clue{
clue_index
}
interpret_move{
is_clue
sprintf
dupstr
is_clue
sprintf
dupstr
move_cursor
sprintf
dupstr
dupstr
}
execute_move{
dup_game
sscanf
check_errors
sscanf
is_clue
clue_index
free_game
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
frontend_default_colour
}
game_new_drawstate{
smalloc
getenv
smalloc
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
sfree
sfree
}
draw_tile{
draw_polygon
draw_polygon
draw_rect
draw_polygon
draw_polygon
draw_text
__assert_fail
draw_text
}
game_redraw{
draw_rect
draw_update
check_errors
clip
draw_tile
draw_tile
draw_tile
draw_tile
unclip
draw_update
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
game_set_size
print_line_width
draw_rect_outline
print_line_width
draw_line
print_line_width
draw_line
sprintf
draw_text
draw_text
}
default_params{
smalloc
}
free_params{
sfree
}
dup_params{
smalloc
}
game_fetch_preset{
dupstr
dup_params
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strlen
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
atoi
atoi
}
validate_params{
}
do_rotate{
__assert_fail
__assert_fail
}
grid_complete{
}
new_game_desc{
smalloc
random_upto
smalloc
random_upto
random_upto
random_upto
abs
abs
abs
do_rotate
sfree
grid_complete
sprintf
srealloc
strcpy
sfree
}
validate_desc{
}
new_game{
smalloc
smalloc
atoi
}
dup_game{
smalloc
smalloc
memcpy
}
free_game{
sfree
sfree
}
compare_int{
}
solve_game{
dupstr
}
game_can_format_as_text_now{
}
game_text_format{
sprintf
smalloc
sprintf
memcpy
__assert_fail
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
interpret_move{
sprintf
dupstr
}
execute_move{
strcmp
dup_game
qsort
sscanf
dup_game
do_rotate
grid_complete
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
game_mkhighlight
}
game_new_drawstate{
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
}
rotate{
}
draw_tile{
clip
rotate
rotate
rotate
draw_polygon
rotate
draw_polygon
rotate
draw_polygon
rotate
draw_polygon
rotate
rotate
rotate
rotate
draw_polygon
draw_rect
rotate
rotate
rotate
draw_polygon
rotate
sprintf
draw_text
unclip
draw_update
}
highlight_colour{
}
game_anim_length_real{
sqrt
}
game_anim_length{
game_anim_length_real
}
game_flash_length{
}
game_status{
}
game_redraw{
draw_rect
draw_update
draw_polygon
draw_polygon
game_anim_length_real
cos
sin
highlight_colour
highlight_colour
highlight_colour
highlight_colour
draw_rect
draw_tile
sprintf
sprintf
sprintf
strlen
status_bar
}
game_timing_state{
}
game_print_size{
}
game_print{
}
default_params{
smalloc
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
strcat
sprintf
strlen
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
validate_desc{
}
blank_state{
smalloc
smalloc
smalloc
memset
memset
}
new_game{
blank_state
__assert_fail
__assert_fail
}
dup_game{
blank_state
memcpy
memcpy
}
free_game{
sfree
sfree
sfree
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
}
unruly_solver_update_remaining{
memset
memset
memset
memset
}
unruly_new_scratch{
smalloc
smalloc
smalloc
smalloc
smalloc
unruly_solver_update_remaining
}
unruly_free_scratch{
sfree
sfree
sfree
sfree
sfree
}
unruly_solver_check_threes{
}
unruly_solver_check_all_threes{
unruly_solver_check_threes
unruly_solver_check_threes
unruly_solver_check_threes
unruly_solver_check_threes
}
unruly_solver_check_uniques{
__assert_fail
__assert_fail
}
unruly_solver_check_all_uniques{
unruly_solver_check_uniques
unruly_solver_check_uniques
unruly_solver_check_uniques
unruly_solver_check_uniques
}
unruly_solver_fill_row{
}
unruly_solver_check_complete_nums{
unruly_solver_fill_row
}
unruly_solver_check_all_complete_nums{
unruly_solver_check_complete_nums
unruly_solver_check_complete_nums
unruly_solver_check_complete_nums
unruly_solver_check_complete_nums
}
unruly_solver_check_near_complete{
unruly_solver_fill_row
unruly_solver_fill_row
unruly_solver_fill_row
unruly_solver_fill_row
}
unruly_solver_check_all_near_complete{
unruly_solver_check_near_complete
unruly_solver_check_near_complete
unruly_solver_check_near_complete
unruly_solver_check_near_complete
}
unruly_validate_rows{
}
unruly_validate_unique{
}
unruly_validate_all_rows{
unruly_validate_rows
unruly_validate_rows
unruly_validate_rows
unruly_validate_rows
unruly_validate_unique
unruly_validate_unique
}
unruly_validate_counts{
unruly_new_scratch
unruly_free_scratch
}
unruly_solve_game{
unruly_solver_check_all_threes
unruly_solver_check_all_complete_nums
unruly_solver_check_all_uniques
unruly_solver_check_all_near_complete
}
solve_game{
dup_game
unruly_new_scratch
unruly_solve_game
unruly_validate_counts
unruly_validate_all_rows
smalloc
free_game
unruly_free_scratch
}
unruly_fill_game{
smalloc
shuffle
random_upto
unruly_solve_game
sfree
unruly_validate_all_rows
unruly_validate_counts
}
new_game_desc{
blank_state
unruly_new_scratch
unruly_fill_game
free_game
unruly_free_scratch
unruly_free_scratch
smalloc
shuffle
dup_game
unruly_new_scratch
unruly_solve_game
unruly_validate_counts
free_game
unruly_free_scratch
sfree
dup_game
unruly_new_scratch
unruly_solve_game
unruly_validate_counts
free_game
unruly_free_scratch
smalloc
free_game
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
game_new_drawstate{
smalloc
smalloc
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
sfree
sfree
}
interpret_move{
move_cursor
sprintf
dupstr
}
execute_move{
dup_game
free_game
sscanf
dup_game
free_game
unruly_validate_counts
unruly_validate_all_rows
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
frontend_default_colour
game_mkhighlight_specific
game_mkhighlight_specific
}
unruly_draw_err_rectangle{
draw_rect
draw_rect
draw_rect
draw_rect
}
unruly_draw_tile{
clip
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
unruly_draw_err_rectangle
unruly_draw_err_rectangle
draw_text
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
draw_rect
unclip
draw_update
}
game_redraw{
draw_rect
draw_rect
draw_update
unruly_validate_all_rows
unruly_validate_counts
unruly_draw_tile
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
draw_polygon
draw_rect
draw_circle
}
default_params{
smalloc
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strlen
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
S_E_DIRS{
}
S_E_COUNT{
S_E_DIRS
}
S_E_FLAGS{
}
S_E_ADJ{
}
S_E_SET{
S_E_ADJ
}
S_E_CLEAR{
S_E_ADJ
}
clear_game{
memset
memset
memset
}
blank_game{
smalloc
smalloc
smalloc
smalloc
smalloc
clear_game
}
copy_game_flags{
memcpy
}
dup_game{
smalloc
smalloc
copy_game_flags
smalloc
memcpy
}
free_game{
sfree
sfree
sfree
sfree
sfree
}
find_direction{
memcpy
shuffle
S_E_COUNT
}
lay_path{
clear_game
random_upto
S_E_SET
find_direction
S_E_SET
__assert_fail
}
copy_and_strip{
copy_game_flags
S_E_CLEAR
S_E_CLEAR
}
solve_progress{
S_E_COUNT
S_E_COUNT
}
check_phantom_moves{
S_E_COUNT
}
add_clues{
smalloc
smalloc
dup_game
debug_state
S_E_DIRS
copy_and_strip
tracks_solve
__assert_fail
tracks_solve
__assert_fail
debug_state
solve_progress
shuffle
copy_and_strip
check_phantom_moves
tracks_solve
tracks_solve
solve_progress
solve_progress
S_E_COUNT
shuffle
copy_and_strip
check_phantom_moves
tracks_solve
sfree
free_game
}
new_game_desc{
blank_game
lay_path
S_E_COUNT
add_clues
smalloc
S_E_DIRS
sprintf
sprintf
tracks_solve
__assert_fail
free_game
}
validate_desc{
__ctype_b_loc
}
new_game{
blank_game
__assert_fail
__assert_fail
S_E_SET
S_E_SET
S_E_SET
S_E_SET
__assert_fail
atoi
__ctype_b_loc
__assert_fail
}
solve_set_sflag{
}
solve_set_eflag{
S_E_FLAGS
S_E_SET
}
solve_update_flags{
solve_set_eflag
S_E_COUNT
solve_set_sflag
S_E_COUNT
solve_set_sflag
S_E_COUNT
S_E_COUNT
S_E_FLAGS
solve_set_eflag
S_E_COUNT
S_E_COUNT
S_E_FLAGS
solve_set_eflag
}
solve_count_col{
}
solve_count_row{
}
solve_count_clues_sub{
solve_set_sflag
solve_set_sflag
}
solve_count_clues{
solve_count_clues_sub
solve_count_clues_sub
}
solve_check_single_sub{
S_E_DIRS
S_E_COUNT
abs
abs
solve_set_sflag
}
solve_check_single{
solve_check_single_sub
solve_check_single_sub
}
solve_check_loose_sub{
S_E_COUNT
S_E_DIRS
S_E_DIRS
S_E_DIRS
solve_set_eflag
solve_set_eflag
}
solve_check_loose_ends{
solve_check_loose_sub
solve_check_loose_sub
}
solve_check_loop_sub{
__assert_fail
S_E_DIRS
S_E_DIRS
dsf_canonify
dsf_canonify
solve_set_eflag
dsf_canonify
dsf_canonify
solve_set_eflag
solve_count_col
solve_count_row
solve_set_eflag
}
solve_check_loop{
smalloc
dsf_init
S_E_DIRS
__assert_fail
dsf_merge
S_E_DIRS
__assert_fail
dsf_merge
dsf_canonify
dsf_canonify
solve_check_loop_sub
solve_check_loop_sub
sfree
}
solve_discount_edge{
S_E_DIRS
__assert_fail
solve_set_eflag
}
tracks_solve{
solve_discount_edge
solve_discount_edge
solve_discount_edge
solve_discount_edge
solve_update_flags
solve_count_clues
solve_check_loop
solve_check_single
solve_check_loose_ends
check_completion
}
move_string_diff{
smalloc
S_E_DIRS
S_E_DIRS
S_E_DIRS
S_E_DIRS
sprintf
sprintf
sprintf
sprintf
srealloc
}
solve_game{
dup_game
tracks_solve
free_game
dup_game
tracks_solve
move_string_diff
free_game
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
S_E_DIRS
S_E_DIRS
}
debug_state{
game_text_format
sfree
}
dsf_update_completion{
S_E_DIRS
dsf_merge
}
tracks_neighbour{
S_E_DIRS
}
check_completion{
S_E_COUNT
S_E_COUNT
S_E_COUNT
S_E_COUNT
S_E_COUNT
S_E_COUNT
smalloc
dsf_init
dsf_update_completion
dsf_update_completion
findloop_new_state
findloop_run
tracks_neighbour
tracks_neighbour
findloop_is_loop_edge
findloop_free_state
dsf_canonify
dsf_canonify
dsf_canonify
S_E_COUNT
sfree
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
update_ui_drag{
abs
abs
}
ui_can_flip_edge{
S_E_FLAGS
S_E_COUNT
S_E_COUNT
}
ui_can_flip_square{
S_E_COUNT
}
edge_flip_str{
S_E_FLAGS
sprintf
dupstr
}
square_flip_str{
sprintf
dupstr
}
copy_and_apply_drag{
dup_game
ui_can_flip_square
}
interpret_move{
update_ui_drag
copy_and_apply_drag
move_string_diff
free_game
abs
abs
abs
abs
ui_can_flip_square
square_flip_str
abs
abs
ui_can_flip_edge
edge_flip_str
ui_can_flip_edge
edge_flip_str
ui_can_flip_square
square_flip_str
}
execute_move{
dup_game
sscanf
S_E_SET
S_E_CLEAR
tracks_solve
check_completion
free_game
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
game_mkhighlight
}
game_new_drawstate{
smalloc
smalloc
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
sfree
sfree
}
draw_circle_sleepers{
cos
cos
sin
sin
draw_thick_line
}
draw_thick_circle_outline{
cos
cos
sin
sin
draw_thick_line
}
draw_tracks_specific{
draw_thick_line
draw_thick_line
draw_thick_line
draw_thick_line
draw_thick_line
draw_thick_line
draw_circle_sleepers
draw_thick_circle_outline
draw_thick_circle_outline
draw_thick_line
}
best_bits{
}
draw_square{
__assert_fail
clip
best_bits
draw_rect
draw_rect
draw_rect_outline
best_bits
draw_tracks_specific
best_bits
draw_thick_line
draw_thick_line
best_bits
draw_thick_line
draw_thick_line
unclip
draw_update
}
draw_clue{
draw_rect
sprintf
draw_text
draw_update
}
draw_loop_ends{
draw_text
draw_text
}
s2d_flags{
S_E_DIRS
S_E_DIRS
S_E_COUNT
}
game_redraw{
draw_rect
draw_loop_ends
draw_rect
draw_update
draw_clue
copy_and_apply_drag
s2d_flags
s2d_flags
draw_square
free_game
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
print_grey_colour
game_set_size
print_line_width
draw_line
draw_line
print_line_width
draw_rect_outline
print_line_width
draw_clue
draw_loop_ends
clip
draw_tracks_specific
S_E_DIRS
unclip
}
frontend_default_colour{
}
draw_text{
}
draw_rect{
}
draw_line{
}
draw_thick_line{
}
draw_polygon{
}
draw_circle{
}
text_fallback{
dupstr
}
clip{
}
unclip{
}
start_draw{
}
draw_update{
}
end_draw{
}
blitter_new{
}
blitter_free{
}
blitter_save{
}
blitter_load{
}
print_mono_colour{
}
print_grey_colour{
}
print_hatched_colour{
}
print_rgb_mono_colour{
}
print_rgb_grey_colour{
}
print_rgb_hatched_colour{
}
print_line_width{
}
print_line_dotted{
}
midend_supersede_game_desc{
}
status_bar{
}
preset_menu_new{
}
preset_menu_add_submenu{
}
preset_menu_add_preset{
}
fatal{
fprintf
__builtin_va_start
vfprintf
__builtin_va_end
fprintf
exit
}
default_params{
smalloc
}
game_fetch_preset{
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
}
encode_params{
dupstr
}
game_configure{
}
custom_params{
}
validate_params{
}
new_game_desc{
dupstr
}
validate_desc{
}
new_game{
smalloc
}
dup_game{
smalloc
}
free_game{
sfree
}
solve_game{
}
game_can_format_as_text_now{
}
game_text_format{
}
new_ui{
}
free_ui{
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
interpret_move{
}
execute_move{
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
frontend_default_colour
}
game_new_drawstate{
smalloc
}
game_free_drawstate{
sfree
}
game_redraw{
draw_rect
draw_update
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
}
game_print{
}
main{
strcmp
fprintf
fprintf
fprintf
strlen
hex2bin
smalloc
fread
fprintf
strerror
__errno_location
srealloc
obfuscate_bitmap
fwrite
fprintf
strerror
__errno_location
printf
printf
}
ar: `u' modifier ignored since `D' is the default (see `U')
ar: `u' modifier ignored since `D' is the default (see `U')
ar: `u' modifier ignored since `D' is the default (see `U')
ar: `u' modifier ignored since `D' is the default (see `U')
ar: `u' modifier ignored since `D' is the default (see `U')
ar: `u' modifier ignored since `D' is the default (see `U')
ar: `u' modifier ignored since `D' is the default (see `U')
ar: `u' modifier ignored since `D' is the default (see `U')
ar: `u' modifier ignored since `D' is the default (see `U')
ar: `u' modifier ignored since `D' is the default (see `U')
ar: `u' modifier ignored since `D' is the default (see `U')
ar: `u' modifier ignored since `D' is the default (see `U')
ar: `u' modifier ignored since `D' is the default (see `U')
ar: `u' modifier ignored since `D' is the default (see `U')
ar: `u' modifier ignored since `D' is the default (see `U')
ar: `u' modifier ignored since `D' is the default (see `U')
ar: `u' modifier ignored since `D' is the default (see `U')
ar: `u' modifier ignored since `D' is the default (see `U')
ar: `u' modifier ignored since `D' is the default (see `U')
ar: `u' modifier ignored since `D' is the default (see `U')
ar: `u' modifier ignored since `D' is the default (see `U')
ar: `u' modifier ignored since `D' is the default (see `U')
ar: `u' modifier ignored since `D' is the default (see `U')
default_params{
smalloc
}
game_fetch_preset{
default_params
sprintf
dupstr
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strlen
dupstr
}
game_configure{
smalloc
sprintf
dupstr
sprintf
dupstr
}
custom_params{
smalloc
atoi
atoi
}
validate_params{
}
new_state{
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
memset
}
dup_game{
smalloc
smalloc
memcpy
smalloc
memcpy
smalloc
memcpy
smalloc
memcpy
smalloc
memcpy
}
free_game{
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
range2grid{
}
grid2range{
}
make_paths{
range2grid
grid2range
}
next_list{
next_list
next_list
next_list
next_list
next_list
next_list
}
get_unique{
smalloc
smalloc
smalloc
__assert_fail
__assert_fail
smalloc
smalloc
memcpy
next_list
smalloc
smalloc
smalloc
memcpy
sfree
random_upto
memcpy
sfree
sfree
sfree
sfree
sfree
sfree
sfree
}
count_monsters{
}
check_numbers{
}
check_solution{
}
solve_iterative{
smalloc
smalloc
smalloc
smalloc
check_numbers
check_solution
next_list
sfree
sfree
sfree
sfree
}
solve_bruteforce{
smalloc
smalloc
check_numbers
check_solution
next_list
sfree
sfree
}
path_cmp{
}
new_game_desc{
new_state
random_upto
free_game
free_game
range2grid
smalloc
smalloc
make_paths
free_game
qsort
count_monsters
get_unique
random_upto
count_monsters
free_game
free_game
range2grid
range2grid
smalloc
solve_iterative
solve_bruteforce
sfree
free_game
smalloc
sprintf
sprintf
sprintf
range2grid
sprintf
srealloc
sfree
free_game
}
num2grid{
}
new_game{
new_state
atoi
__ctype_b_loc
atoi
__ctype_b_loc
atoi
__ctype_b_loc
smalloc
smalloc
smalloc
num2grid
num2grid
num2grid
num2grid
num2grid
num2grid
atoi
__ctype_b_loc
range2grid
make_paths
qsort
}
validate_desc{
__ctype_b_loc
atoi
__ctype_b_loc
__ctype_b_loc
}
solve_game{
dup_game
smalloc
solve_iterative
sfree
free_game
solve_bruteforce
sfree
free_game
smalloc
sprintf
sprintf
sprintf
srealloc
sfree
free_game
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
sprintf
grid2range
sprintf
strcat
sprintf
strcat
sprintf
strcat
sprintf
strcat
sprintf
strcat
sprintf
strcat
sprintf
strcat
sprintf
strcat
sprintf
strcat
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
is_clue{
}
clue_index{
}
interpret_move{
dupstr
sprintf
dupstr
sprintf
dupstr
sprintf
dupstr
sprintf
dupstr
sprintf
dupstr
sprintf
dupstr
sprintf
dupstr
sprintf
dupstr
is_clue
sprintf
dupstr
}
check_numbers_draw{
}
check_path_solution{
}
execute_move{
dup_game
sscanf
sscanf
is_clue
clue_index
check_numbers_draw
check_path_solution
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
frontend_default_colour
}
game_new_drawstate{
smalloc
smalloc
smalloc
smalloc
smalloc
smalloc
memset
}
game_free_drawstate{
sfree
sfree
sfree
sfree
sfree
sfree
}
draw_cell_background{
draw_rect
draw_polygon
draw_update
}
draw_circle_or_point{
draw_circle
draw_rect
}
draw_monster{
clip
draw_circle
unclip
clip
draw_polygon
unclip
draw_circle
draw_circle
draw_circle_or_point
draw_circle_or_point
clip
draw_circle
unclip
clip
draw_circle
unclip
clip
draw_circle
unclip
clip
draw_circle
unclip
draw_circle
draw_circle
draw_circle_or_point
draw_circle_or_point
clip
draw_polygon
draw_polygon
draw_circle
unclip
draw_circle
draw_line
draw_line
draw_line
draw_line
clip
draw_circle
unclip
draw_line
draw_update
}
draw_monster_count{
sprintf
sprintf
sprintf
sprintf
sprintf
sprintf
draw_rect
draw_monster
draw_text
draw_text
draw_update
}
draw_path_hint{
range2grid
sprintf
draw_rect
draw_text
draw_update
}
draw_mirror{
draw_thick_line
draw_update
}
draw_big_monster{
sprintf
sprintf
sprintf
sprintf
draw_text
draw_update
draw_monster
}
draw_pencils{
draw_monster
sprintf
sprintf
sprintf
draw_text
draw_update
}
is_hint_stale{
}
game_redraw{
draw_rect
draw_rect
draw_rect
draw_update
draw_monster_count
is_hint_stale
draw_path_hint
is_hint_stale
draw_path_hint
draw_cell_background
draw_mirror
draw_big_monster
draw_pencils
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
}
game_print{
}
edgecmpC{
}
edgecmp{
edgecmpC
}
default_params{
smalloc
}
game_fetch_preset{
sprintf
dupstr
smalloc
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
}
encode_params{
sprintf
dupstr
}
game_configure{
smalloc
sprintf
dupstr
}
custom_params{
smalloc
atoi
}
validate_params{
}
mulu32to64{
}
mul32to64{
mulu32to64
}
dotprod64{
mul32to64
mul32to64
}
cross{
dotprod64
dotprod64
dotprod64
dotprod64
dotprod64
dotprod64
dotprod64
}
squarert{
}
addedge{
smalloc
__assert_fail
add234
}
isedge{
__assert_fail
find234
}
vertcmpC{
}
vertcmp{
vertcmpC
}
make_circle{
sin
cos
}
new_game_desc{
squarert
smalloc
smalloc
shuffle
sfree
smalloc
newtree234
add234
newtree234
smalloc
index234
index234
isedge
qsort
cross
index234
cross
addedge
del234
add234
del234
add234
smalloc
smalloc
make_circle
shuffle
index234
index234
cross
count234
smalloc
index234
__assert_fail
sprintf
__assert_fail
qsort
smalloc
sprintf
__assert_fail
sfree
sprintf
smalloc
sprintf
__assert_fail
sfree
sfree
sfree
freetree234
sfree
delpos234
sfree
freetree234
sfree
}
validate_desc{
atoi
__ctype_b_loc
atoi
__ctype_b_loc
}
mark_crossings{
index234
index234
cross
}
new_game{
smalloc
squarert
smalloc
make_circle
smalloc
newtree234
atoi
__assert_fail
__ctype_b_loc
__assert_fail
atoi
__assert_fail
__ctype_b_loc
__assert_fail
addedge
}
dup_game{
smalloc
smalloc
memcpy
}
free_game{
delpos234
sfree
freetree234
sfree
sfree
sfree
}
solve_game{
smalloc
sscanf
sfree
__assert_fail
smalloc
sprintf
srealloc
strcpy
sfree
}
game_can_format_as_text_now{
}
game_text_format{
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
interpret_move{
sprintf
dupstr
}
execute_move{
dup_game
sscanf
free_game
mark_crossings
}
game_compute_size{
squarert
}
game_set_size{
}
game_colours{
smalloc
game_mkhighlight
}
game_new_drawstate{
smalloc
smalloc
smalloc
}
game_free_drawstate{
sfree
sfree
sfree
}
mix{
}
game_redraw{
mix
game_compute_size
draw_rect
index234
draw_line
isedge
draw_circle
draw_update
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
}
game_print{
}
game_fetch_preset{
smalloc
sprintf
dupstr
}
default_params{
game_fetch_preset
sfree
}
free_params{
sfree
}
dup_params{
smalloc
}
decode_params{
atoi
__ctype_b_loc
}
encode_params{
sprintf
sprintf
strlen
sprintf
strlen
dupstr
}
game_configure{
smalloc
sprintf
dupstr
}
custom_params{
smalloc
atoi
}
validate_params{
}
blank_game{
smalloc
smalloc
smalloc
smalloc
memset
memset
memset
}
dup_game{
blank_game
memcpy
memcpy
memcpy
}
free_game{
sfree
sfree
sfree
sfree
}
check_num_adj{
__assert_fail
abs
}
check_num_error{
__assert_fail
}
check_complete{
__assert_fail
check_num_error
check_num_adj
latin_check
}
n2c{
}
c2n{
}
game_can_format_as_text_now{
}
game_text_format{
smalloc
n2c
__assert_fail
}
solver_add_link{
srealloc
}
new_ctx{
smalloc
solver_add_link
}
clone_ctx{
new_ctx
}
free_ctx{
sfree
sfree
}
solver_nminmax{
__assert_fail
}
solver_links{
solver_nminmax
solver_nminmax
}
solver_adjacent{
abs
}
solver_adjacent_set{
smalloc
memset
abs
}
solver_easy{
solver_adjacent
solver_links
}
solver_set{
solver_adjacent_set
}
solver_state{
new_ctx
latin_solver_alloc
latin_solver_main
memcpy
free_ctx
latin_solver_free
}
solver_hint{
dup_game
solver_state
}
latin_desc{
smalloc
n2c
}
gg_place_clue{
__assert_fail
__assert_fail
}
gg_remove_clue{
__assert_fail
}
gg_best_clue{
gg_place_clue
__assert_fail
}
game_assemble{
dup_game
solver_state
gg_best_clue
gg_place_clue
gg_place_clue
free_game
}
game_strip{
blank_game
gg_remove_clue
memcpy
memcpy
solver_state
gg_place_clue
__assert_fail
free_game
}
add_adjacent_flags{
abs
abs
}
new_game_desc{
blank_game
smalloc
sfree
latin_generate
latin_debug
shuffle
shuffle
memset
memset
add_adjacent_flags
game_assemble
game_strip
dup_game
solver_state
free_game
sprintf
srealloc
strcpy
latin_desc
free_game
sfree
sfree
}
load_game{
blank_game
atoi
free_game
}
new_game{
load_game
__assert_fail
}
validate_desc{
load_game
free_game
__assert_fail
__assert_fail
}
solve_game{
dupstr
dup_game
solver_state
latin_desc
free_game
}
new_ui{
smalloc
}
free_ui{
sfree
}
encode_ui{
}
decode_ui{
}
game_changed_state{
}
interpret_move{
sprintf
sprintf
dupstr
sprintf
sprintf
dupstr
move_cursor
sprintf
sprintf
dupstr
move_cursor
c2n
sprintf
dupstr
dupstr
dupstr
}
execute_move{
sscanf
dup_game
check_complete
dup_game
c2n
check_complete
__assert_fail
dup_game
solver_hint
check_complete
sscanf
dup_game
free_game
}
game_compute_size{
}
game_set_size{
}
game_colours{
smalloc
game_mkhighlight
}
game_new_drawstate{
smalloc
smalloc
smalloc
smalloc
memset
memset
memset
}
game_free_drawstate{
sfree
sfree
sfree
sfree
}
draw_gt{
draw_polygon
}
draw_gts{
draw_rect
draw_gt
draw_update
draw_rect
draw_gt
draw_update
draw_rect
draw_gt
draw_update
draw_rect
draw_gt
draw_update
}
draw_adjs{
draw_rect
draw_rect_outline
draw_rect
draw_update
draw_rect
draw_rect_outline
draw_rect
draw_update
}
draw_furniture{
draw_rect
draw_polygon
draw_rect_outline
draw_update
draw_adjs
draw_gts
}
draw_num{
n2c
draw_text
}
draw_hints{
n2c
draw_text
}
game_redraw{
draw_rect
draw_update
draw_furniture
draw_num
draw_hints
}
game_anim_length{
}
game_flash_length{
}
game_status{
}
game_timing_state{
}
game_print_size{
game_compute_size
}
game_print{
print_mono_colour
game_set_size
print_line_width
draw_rect_outline
n2c
draw_text
draw_adjs
draw_gts
}
